/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using CS426.node;
using CS426.lexer;
using CS426.analysis;

namespace CS426.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTAssign(TAssign node)
    {
        index = 0;
    }

    public override void CaseTPlus(TPlus node)
    {
        index = 1;
    }

    public override void CaseTMultiply(TMultiply node)
    {
        index = 2;
    }

    public override void CaseTMinus(TMinus node)
    {
        index = 3;
    }

    public override void CaseTDivide(TDivide node)
    {
        index = 4;
    }

    public override void CaseTAnd(TAnd node)
    {
        index = 5;
    }

    public override void CaseTOr(TOr node)
    {
        index = 6;
    }

    public override void CaseTNot(TNot node)
    {
        index = 7;
    }

    public override void CaseTEquals(TEquals node)
    {
        index = 8;
    }

    public override void CaseTNotEquals(TNotEquals node)
    {
        index = 9;
    }

    public override void CaseTLessthan(TLessthan node)
    {
        index = 10;
    }

    public override void CaseTGreaterthan(TGreaterthan node)
    {
        index = 11;
    }

    public override void CaseTLessthanorequals(TLessthanorequals node)
    {
        index = 12;
    }

    public override void CaseTGreaterthanorequals(TGreaterthanorequals node)
    {
        index = 13;
    }

    public override void CaseTComma(TComma node)
    {
        index = 14;
    }

    public override void CaseTDot(TDot node)
    {
        index = 15;
    }

    public override void CaseTOpenp(TOpenp node)
    {
        index = 16;
    }

    public override void CaseTClosep(TClosep node)
    {
        index = 17;
    }

    public override void CaseTQuote(TQuote node)
    {
        index = 18;
    }

    public override void CaseTUnderscore(TUnderscore node)
    {
        index = 19;
    }

    public override void CaseTEol(TEol node)
    {
        index = 20;
    }

    public override void CaseTDefine(TDefine node)
    {
        index = 21;
    }

    public override void CaseTIf(TIf node)
    {
        index = 22;
    }

    public override void CaseTElse(TElse node)
    {
        index = 23;
    }

    public override void CaseTWhile(TWhile node)
    {
        index = 24;
    }

    public override void CaseTConstant(TConstant node)
    {
        index = 25;
    }

    public override void CaseTMain(TMain node)
    {
        index = 26;
    }

    public override void CaseTNum(TNum node)
    {
        index = 27;
    }

    public override void CaseTFp(TFp node)
    {
        index = 28;
    }

    public override void CaseTS(TS node)
    {
        index = 29;
    }

    public override void CaseTId(TId node)
    {
        index = 30;
    }

    public override void CaseEOF(EOF node)
    {
        index = 31;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(2), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(2), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(3), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(3), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(4), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(5), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(5), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(5), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(6), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(7), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(8), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(8), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(9), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(9), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(9), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(9), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(9), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(10), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(11), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(12), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(13), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(14), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(14), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(14), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(15), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(15), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(15), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(16), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(16), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(17), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(18), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(19), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(20), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(20), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(20), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(21), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(22), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(22), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(23), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(23), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(24), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(24), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(25), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(25), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(25), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(26), list);
        }
        break;
                    case 49:
        {
      ArrayList list = New49();
      Push(GoTo(26), list);
        }
        break;
                    case 50:
        {
      ArrayList list = New50();
      Push(GoTo(26), list);
        }
        break;
                    case 51:
        {
      ArrayList list = New51();
      Push(GoTo(26), list);
        }
        break;
                    case 52:
        {
      ArrayList list = New52();
      Push(GoTo(26), list);
        }
        break;
                    case 53:
        {
      ArrayList list = New53();
      Push(GoTo(27), list);
        }
        break;
                    case 54:
        {
      ArrayList list = New54();
      Push(GoTo(27), list);
        }
        break;
                    case 55:
        {
      ArrayList list = New55();
      Push(GoTo(27), list);
        }
        break;
                    case 56:
        {
      ArrayList list = New56();
      Push(GoTo(28), list);
        }
        break;
                    case 57:
        {
      ArrayList list = New57();
      Push(GoTo(28), list);
        }
        break;
                    case 58:
        {
      ArrayList list = New58();
      Push(GoTo(28), list);
        }
        break;
                    case 59:
        {
      ArrayList list = New59();
      Push(GoTo(29), list);
        }
        break;
                    case 60:
        {
      ArrayList list = New60();
      Push(GoTo(29), list);
        }
        break;
                    case 61:
        {
      ArrayList list = New61();
      Push(GoTo(29), list);
        }
        break;
                    case 62:
        {
      ArrayList list = New62();
      Push(GoTo(30), list);
        }
        break;
                    case 63:
        {
      ArrayList list = New63();
      Push(GoTo(30), list);
        }
        break;
                    case 64:
        {
      ArrayList list = New64();
      Push(GoTo(31), list);
        }
        break;
                    case 65:
        {
      ArrayList list = New65();
      Push(GoTo(31), list);
        }
        break;
                    case 66:
        {
      ArrayList list = New66();
      Push(GoTo(31), list);
        }
        break;
                    case 67:
        {
      ArrayList list = New67();
      Push(GoTo(31), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProgram node1 = (PProgram) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstants pconstantsNode2 = (PConstants)nodeArrayList1[0];
        PFunctions pfunctionsNode3 = (PFunctions)nodeArrayList2[0];
        PMainFunction pmainfunctionNode4 = (PMainFunction)nodeArrayList3[0];
        AProgram pprogramNode1 = new AProgram (
              pconstantsNode2,
              pfunctionsNode3,
              pmainfunctionNode4
        );
        nodeList.Add(pprogramNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POneConstant poneconstantNode2 = (POneConstant)nodeArrayList1[0];
        PConstants pconstantsNode3 = (PConstants)nodeArrayList2[0];
        AMultipleConstants pconstantsNode1 = new AMultipleConstants (
              poneconstantNode2,
              pconstantsNode3
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ANoneConstants pconstantsNode1 = new ANoneConstants (
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TConstant tconstantNode2 = (TConstant)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TNum tnumNode4 = (TNum)nodeArrayList3[0];
        TEol teolNode5 = (TEol)nodeArrayList4[0];
        AIntegerOneConstant poneconstantNode1 = new AIntegerOneConstant (
              tconstantNode2,
              tidNode3,
              tnumNode4,
              teolNode5
        );
        nodeList.Add(poneconstantNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TConstant tconstantNode2 = (TConstant)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TFp tfpNode4 = (TFp)nodeArrayList3[0];
        TEol teolNode5 = (TEol)nodeArrayList4[0];
        AFloatsOneConstant poneconstantNode1 = new AFloatsOneConstant (
              tconstantNode2,
              tidNode3,
              tfpNode4,
              teolNode5
        );
        nodeList.Add(poneconstantNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunction pfunctionNode2 = (PFunction)nodeArrayList1[0];
        PFunctions pfunctionsNode3 = (PFunctions)nodeArrayList2[0];
        AMultipleFunctions pfunctionsNode1 = new AMultipleFunctions (
              pfunctionNode2,
              pfunctionsNode3
        );
        nodeList.Add(pfunctionsNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ANoneFunctions pfunctionsNode1 = new ANoneFunctions (
        );
        nodeList.Add(pfunctionsNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList9 = (ArrayList) Pop();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TDefine tdefineNode2 = (TDefine)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TOpenp topenpNode4 = (TOpenp)nodeArrayList3[0];
        PFunctionArguments pfunctionargumentsNode5 = (PFunctionArguments)nodeArrayList4[0];
        TClosep tclosepNode6 = (TClosep)nodeArrayList5[0];
        TOpenp topenpNode7 = (TOpenp)nodeArrayList6[0];
        PStatements pstatementsNode8 = (PStatements)nodeArrayList7[0];
        TClosep tclosepNode9 = (TClosep)nodeArrayList8[0];
        TEol teolNode10 = (TEol)nodeArrayList9[0];
        AFunction pfunctionNode1 = new AFunction (
              tdefineNode2,
              tidNode3,
              topenpNode4,
              pfunctionargumentsNode5,
              tclosepNode6,
              topenpNode7,
              pstatementsNode8,
              tclosepNode9,
              teolNode10
        );
        nodeList.Add(pfunctionNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PArguement parguementNode2 = (PArguement)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PFunctionArguments pfunctionargumentsNode4 = (PFunctionArguments)nodeArrayList3[0];
        AMultipleFunctionArguments pfunctionargumentsNode1 = new AMultipleFunctionArguments (
              parguementNode2,
              tcommaNode3,
              pfunctionargumentsNode4
        );
        nodeList.Add(pfunctionargumentsNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PArguement parguementNode2 = (PArguement)nodeArrayList1[0];
        ASingleFunctionArguments pfunctionargumentsNode1 = new ASingleFunctionArguments (
              parguementNode2
        );
        nodeList.Add(pfunctionargumentsNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ANoneFunctionArguments pfunctionargumentsNode1 = new ANoneFunctionArguments (
        );
        nodeList.Add(pfunctionargumentsNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        ADecArguement parguementNode1 = new ADecArguement (
              tidNode2,
              tidNode3
        );
        nodeList.Add(parguementNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMain tmainNode2 = (TMain)nodeArrayList1[0];
        TOpenp topenpNode3 = (TOpenp)nodeArrayList2[0];
        PStatements pstatementsNode4 = (PStatements)nodeArrayList3[0];
        TClosep tclosepNode5 = (TClosep)nodeArrayList4[0];
        TEol teolNode6 = (TEol)nodeArrayList5[0];
        AMainFunction pmainfunctionNode1 = new AMainFunction (
              tmainNode2,
              topenpNode3,
              pstatementsNode4,
              tclosepNode5,
              teolNode6
        );
        nodeList.Add(pmainfunctionNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStatement pstatementNode2 = (PStatement)nodeArrayList1[0];
        PStatements pstatementsNode3 = (PStatements)nodeArrayList2[0];
        AMultipleStatements pstatementsNode1 = new AMultipleStatements (
              pstatementNode2,
              pstatementsNode3
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStatement pstatementNode2 = (PStatement)nodeArrayList1[0];
        ASingleStatements pstatementsNode1 = new ASingleStatements (
              pstatementNode2
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclareStatement pdeclarestatementNode2 = (PDeclareStatement)nodeArrayList1[0];
        ADeclarationStatement pstatementNode1 = new ADeclarationStatement (
              pdeclarestatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignStatement passignstatementNode2 = (PAssignStatement)nodeArrayList1[0];
        AAssignmentStatement pstatementNode1 = new AAssignmentStatement (
              passignstatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctionCallStatement pfunctioncallstatementNode2 = (PFunctionCallStatement)nodeArrayList1[0];
        ACallStatement pstatementNode1 = new ACallStatement (
              pfunctioncallstatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PElifState pelifstateNode2 = (PElifState)nodeArrayList1[0];
        AIfElseStatement pstatementNode1 = new AIfElseStatement (
              pelifstateNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PWhileState pwhilestateNode2 = (PWhileState)nodeArrayList1[0];
        AWhileStatement pstatementNode1 = new AWhileStatement (
              pwhilestateNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TAssign tassignNode3 = (TAssign)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TEol teolNode5 = (TEol)nodeArrayList4[0];
        AAssignStatement passignstatementNode1 = new AAssignStatement (
              tidNode2,
              tassignNode3,
              pexpressionNode4,
              teolNode5
        );
        nodeList.Add(passignstatementNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TEol teolNode4 = (TEol)nodeArrayList3[0];
        ADeclareStatement pdeclarestatementNode1 = new ADeclareStatement (
              tidNode2,
              tidNode3,
              teolNode4
        );
        nodeList.Add(pdeclarestatementNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TOpenp topenpNode3 = (TOpenp)nodeArrayList2[0];
        PParameters pparametersNode4 = (PParameters)nodeArrayList3[0];
        TClosep tclosepNode5 = (TClosep)nodeArrayList4[0];
        TEol teolNode6 = (TEol)nodeArrayList5[0];
        AFunctionCallStatement pfunctioncallstatementNode1 = new AFunctionCallStatement (
              tidNode2,
              topenpNode3,
              pparametersNode4,
              tclosepNode5,
              teolNode6
        );
        nodeList.Add(pfunctioncallstatementNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunction pfunctionNode2 = (PFunction)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TOpenp topenpNode4 = (TOpenp)nodeArrayList3[0];
        PDefineParameters pdefineparametersNode5 = (PDefineParameters)nodeArrayList4[0];
        TClosep tclosepNode6 = (TClosep)nodeArrayList5[0];
        TOpenp topenpNode7 = (TOpenp)nodeArrayList6[0];
        PStatements pstatementsNode8 = (PStatements)nodeArrayList7[0];
        TClosep tclosepNode9 = (TClosep)nodeArrayList8[0];
        AFunctionDeclareStatement pfunctiondeclarestatementNode1 = new AFunctionDeclareStatement (
              pfunctionNode2,
              tidNode3,
              topenpNode4,
              pdefineparametersNode5,
              tclosepNode6,
              topenpNode7,
              pstatementsNode8,
              tclosepNode9
        );
        nodeList.Add(pfunctiondeclarestatementNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDefineParameter pdefineparameterNode2 = (PDefineParameter)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PDefineParameters pdefineparametersNode4 = (PDefineParameters)nodeArrayList3[0];
        AMultipleDefineParameters pdefineparametersNode1 = new AMultipleDefineParameters (
              pdefineparameterNode2,
              tcommaNode3,
              pdefineparametersNode4
        );
        nodeList.Add(pdefineparametersNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDefineParameter pdefineparameterNode2 = (PDefineParameter)nodeArrayList1[0];
        ASingleDefineParameters pdefineparametersNode1 = new ASingleDefineParameters (
              pdefineparameterNode2
        );
        nodeList.Add(pdefineparametersNode1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ANoParametersDefineParameters pdefineparametersNode1 = new ANoParametersDefineParameters (
        );
        nodeList.Add(pdefineparametersNode1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TNum tnumNode2 = (TNum)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        AIntDefineParameter pdefineparameterNode1 = new AIntDefineParameter (
              tnumNode2,
              tidNode3
        );
        nodeList.Add(pdefineparameterNode1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFp tfpNode2 = (TFp)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        AFloatDefineParameter pdefineparameterNode1 = new AFloatDefineParameter (
              tfpNode2,
              tidNode3
        );
        nodeList.Add(pdefineparameterNode1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TS tsNode2 = (TS)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        AStringDefineParameter pdefineparameterNode1 = new AStringDefineParameter (
              tsNode2,
              tidNode3
        );
        nodeList.Add(pdefineparameterNode1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfState pifstateNode2 = (PIfState)nodeArrayList1[0];
        AJustIfElifState pelifstateNode1 = new AJustIfElifState (
              pifstateNode2
        );
        nodeList.Add(pelifstateNode1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfState pifstateNode2 = (PIfState)nodeArrayList1[0];
        PElseState pelsestateNode3 = (PElseState)nodeArrayList2[0];
        AIfElseElifState pelifstateNode1 = new AIfElseElifState (
              pifstateNode2,
              pelsestateNode3
        );
        nodeList.Add(pelifstateNode1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TOpenp topenpNode3 = (TOpenp)nodeArrayList2[0];
        PConditional pconditionalNode4 = (PConditional)nodeArrayList3[0];
        TClosep tclosepNode5 = (TClosep)nodeArrayList4[0];
        TOpenp topenpNode6 = (TOpenp)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TClosep tclosepNode8 = (TClosep)nodeArrayList7[0];
        TEol teolNode9 = (TEol)nodeArrayList8[0];
        AIfState pifstateNode1 = new AIfState (
              tifNode2,
              topenpNode3,
              pconditionalNode4,
              tclosepNode5,
              topenpNode6,
              pstatementsNode7,
              tclosepNode8,
              teolNode9
        );
        nodeList.Add(pifstateNode1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TElse telseNode2 = (TElse)nodeArrayList1[0];
        TOpenp topenpNode3 = (TOpenp)nodeArrayList2[0];
        PStatements pstatementsNode4 = (PStatements)nodeArrayList3[0];
        TClosep tclosepNode5 = (TClosep)nodeArrayList4[0];
        TEol teolNode6 = (TEol)nodeArrayList5[0];
        AElseState pelsestateNode1 = new AElseState (
              telseNode2,
              topenpNode3,
              pstatementsNode4,
              tclosepNode5,
              teolNode6
        );
        nodeList.Add(pelsestateNode1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TWhile twhileNode2 = (TWhile)nodeArrayList1[0];
        TOpenp topenpNode3 = (TOpenp)nodeArrayList2[0];
        PConditional pconditionalNode4 = (PConditional)nodeArrayList3[0];
        TClosep tclosepNode5 = (TClosep)nodeArrayList4[0];
        TOpenp topenpNode6 = (TOpenp)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TClosep tclosepNode8 = (TClosep)nodeArrayList7[0];
        TEol teolNode9 = (TEol)nodeArrayList8[0];
        AWhileState pwhilestateNode1 = new AWhileState (
              twhileNode2,
              topenpNode3,
              pconditionalNode4,
              tclosepNode5,
              topenpNode6,
              pstatementsNode7,
              tclosepNode8,
              teolNode9
        );
        nodeList.Add(pwhilestateNode1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PParameter pparameterNode2 = (PParameter)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PParameters pparametersNode4 = (PParameters)nodeArrayList3[0];
        AMultipleParameters pparametersNode1 = new AMultipleParameters (
              pparameterNode2,
              tcommaNode3,
              pparametersNode4
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PParameter pparameterNode2 = (PParameter)nodeArrayList1[0];
        ASingleParameters pparametersNode1 = new ASingleParameters (
              pparameterNode2
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ANoParameterParameters pparametersNode1 = new ANoParameterParameters (
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        AParameter pparameterNode1 = new AParameter (
              pexpressionNode2
        );
        nodeList.Add(pparameterNode1);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        ASingleConditional pconditionalNode1 = new ASingleConditional (
              pexpressionNode2
        );
        nodeList.Add(pconditionalNode1);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ANoConditionalConditional pconditionalNode1 = new ANoConditionalConditional (
        );
        nodeList.Add(pconditionalNode1);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TOr torNode3 = (TOr)nodeArrayList2[0];
        PExpression1 pexpression1Node4 = (PExpression1)nodeArrayList3[0];
        AOrExpression pexpressionNode1 = new AOrExpression (
              pexpressionNode2,
              torNode3,
              pexpression1Node4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression1 pexpression1Node2 = (PExpression1)nodeArrayList1[0];
        APassExpression pexpressionNode1 = new APassExpression (
              pexpression1Node2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression1 pexpression1Node2 = (PExpression1)nodeArrayList1[0];
        TAnd tandNode3 = (TAnd)nodeArrayList2[0];
        PExpression2 pexpression2Node4 = (PExpression2)nodeArrayList3[0];
        AAndExpression1 pexpression1Node1 = new AAndExpression1 (
              pexpression1Node2,
              tandNode3,
              pexpression2Node4
        );
        nodeList.Add(pexpression1Node1);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        APassExpression1 pexpression1Node1 = new APassExpression1 (
              pexpression2Node2
        );
        nodeList.Add(pexpression1Node1);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TEquals tequalsNode3 = (TEquals)nodeArrayList2[0];
        PExpression3 pexpression3Node4 = (PExpression3)nodeArrayList3[0];
        AEqualsExpression2 pexpression2Node1 = new AEqualsExpression2 (
              pexpression2Node2,
              tequalsNode3,
              pexpression3Node4
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TNotEquals tnotequalsNode3 = (TNotEquals)nodeArrayList2[0];
        PExpression3 pexpression3Node4 = (PExpression3)nodeArrayList3[0];
        ANotEqualExpression2 pexpression2Node1 = new ANotEqualExpression2 (
              pexpression2Node2,
              tnotequalsNode3,
              pexpression3Node4
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        APassExpression2 pexpression2Node1 = new APassExpression2 (
              pexpression3Node2
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        TGreaterthanorequals tgreaterthanorequalsNode3 = (TGreaterthanorequals)nodeArrayList2[0];
        PExpression4 pexpression4Node4 = (PExpression4)nodeArrayList3[0];
        AGreaterThanOrEqualsExpression3 pexpression3Node1 = new AGreaterThanOrEqualsExpression3 (
              pexpression3Node2,
              tgreaterthanorequalsNode3,
              pexpression4Node4
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New49()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        TLessthanorequals tlessthanorequalsNode3 = (TLessthanorequals)nodeArrayList2[0];
        PExpression4 pexpression4Node4 = (PExpression4)nodeArrayList3[0];
        ALessThanOrEqualsExpression3 pexpression3Node1 = new ALessThanOrEqualsExpression3 (
              pexpression3Node2,
              tlessthanorequalsNode3,
              pexpression4Node4
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New50()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        TLessthan tlessthanNode3 = (TLessthan)nodeArrayList2[0];
        PExpression4 pexpression4Node4 = (PExpression4)nodeArrayList3[0];
        ALessThanExpression3 pexpression3Node1 = new ALessThanExpression3 (
              pexpression3Node2,
              tlessthanNode3,
              pexpression4Node4
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New51()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        TGreaterthan tgreaterthanNode3 = (TGreaterthan)nodeArrayList2[0];
        PExpression4 pexpression4Node4 = (PExpression4)nodeArrayList3[0];
        AGreaterThanExpression3 pexpression3Node1 = new AGreaterThanExpression3 (
              pexpression3Node2,
              tgreaterthanNode3,
              pexpression4Node4
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New52()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        APassExpression3 pexpression3Node1 = new APassExpression3 (
              pexpression4Node2
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New53()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        TPlus tplusNode3 = (TPlus)nodeArrayList2[0];
        PExpression5 pexpression5Node4 = (PExpression5)nodeArrayList3[0];
        AAddExpression4 pexpression4Node1 = new AAddExpression4 (
              pexpression4Node2,
              tplusNode3,
              pexpression5Node4
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New54()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        TMinus tminusNode3 = (TMinus)nodeArrayList2[0];
        PExpression5 pexpression5Node4 = (PExpression5)nodeArrayList3[0];
        ASubtractExpression4 pexpression4Node1 = new ASubtractExpression4 (
              pexpression4Node2,
              tminusNode3,
              pexpression5Node4
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New55()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression5 pexpression5Node2 = (PExpression5)nodeArrayList1[0];
        APassExpression4 pexpression4Node1 = new APassExpression4 (
              pexpression5Node2
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New56()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression5 pexpression5Node2 = (PExpression5)nodeArrayList1[0];
        TMultiply tmultiplyNode3 = (TMultiply)nodeArrayList2[0];
        PExpression6 pexpression6Node4 = (PExpression6)nodeArrayList3[0];
        AMultiplyExpression5 pexpression5Node1 = new AMultiplyExpression5 (
              pexpression5Node2,
              tmultiplyNode3,
              pexpression6Node4
        );
        nodeList.Add(pexpression5Node1);
        return nodeList;
    }
    ArrayList New57()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression5 pexpression5Node2 = (PExpression5)nodeArrayList1[0];
        TDivide tdivideNode3 = (TDivide)nodeArrayList2[0];
        PExpression6 pexpression6Node4 = (PExpression6)nodeArrayList3[0];
        ADivideExpression5 pexpression5Node1 = new ADivideExpression5 (
              pexpression5Node2,
              tdivideNode3,
              pexpression6Node4
        );
        nodeList.Add(pexpression5Node1);
        return nodeList;
    }
    ArrayList New58()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression6 pexpression6Node2 = (PExpression6)nodeArrayList1[0];
        APassExpression5 pexpression5Node1 = new APassExpression5 (
              pexpression6Node2
        );
        nodeList.Add(pexpression5Node1);
        return nodeList;
    }
    ArrayList New59()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMinus tminusNode2 = (TMinus)nodeArrayList1[0];
        PExpression7 pexpression7Node3 = (PExpression7)nodeArrayList2[0];
        ANegativeExpression6 pexpression6Node1 = new ANegativeExpression6 (
              tminusNode2,
              pexpression7Node3
        );
        nodeList.Add(pexpression6Node1);
        return nodeList;
    }
    ArrayList New60()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TNot tnotNode2 = (TNot)nodeArrayList1[0];
        PExpression7 pexpression7Node3 = (PExpression7)nodeArrayList2[0];
        ANotExpression6 pexpression6Node1 = new ANotExpression6 (
              tnotNode2,
              pexpression7Node3
        );
        nodeList.Add(pexpression6Node1);
        return nodeList;
    }
    ArrayList New61()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression7 pexpression7Node2 = (PExpression7)nodeArrayList1[0];
        APassExpression6 pexpression6Node1 = new APassExpression6 (
              pexpression7Node2
        );
        nodeList.Add(pexpression6Node1);
        return nodeList;
    }
    ArrayList New62()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TOpenp topenpNode2 = (TOpenp)nodeArrayList1[0];
        PExpression pexpressionNode3 = (PExpression)nodeArrayList2[0];
        TClosep tclosepNode4 = (TClosep)nodeArrayList3[0];
        AParenthesisExpression7 pexpression7Node1 = new AParenthesisExpression7 (
              topenpNode2,
              pexpressionNode3,
              tclosepNode4
        );
        nodeList.Add(pexpression7Node1);
        return nodeList;
    }
    ArrayList New63()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POperand poperandNode2 = (POperand)nodeArrayList1[0];
        APassExpression7 pexpression7Node1 = new APassExpression7 (
              poperandNode2
        );
        nodeList.Add(pexpression7Node1);
        return nodeList;
    }
    ArrayList New64()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TNum tnumNode2 = (TNum)nodeArrayList1[0];
        AIntOperand poperandNode1 = new AIntOperand (
              tnumNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New65()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFp tfpNode2 = (TFp)nodeArrayList1[0];
        AFloatOperand poperandNode1 = new AFloatOperand (
              tfpNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New66()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TS tsNode2 = (TS)nodeArrayList1[0];
        AStringOperand poperandNode1 = new AStringOperand (
              tsNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New67()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        AVariableOperand poperandNode1 = new AVariableOperand (
              tidNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {25, 0, 1},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {30, 0, 5},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {31, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {21, 0, 6},
      },
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {25, 0, 1},
      },
      new int[][] {
        new int[] {-1, 3, 5},
        new int[] {27, 0, 10},
        new int[] {28, 0, 11},
      },
      new int[][] {
        new int[] {-1, 3, 6},
        new int[] {30, 0, 12},
      },
      new int[][] {
        new int[] {-1, 3, 7},
        new int[] {26, 0, 13},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {21, 0, 6},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {20, 0, 16},
      },
      new int[][] {
        new int[] {-1, 3, 11},
        new int[] {20, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 12},
        new int[] {16, 0, 18},
      },
      new int[][] {
        new int[] {-1, 3, 13},
        new int[] {16, 0, 19},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 1, 10},
        new int[] {30, 0, 20},
      },
      new int[][] {
        new int[] {-1, 3, 19},
        new int[] {22, 0, 23},
        new int[] {24, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 20},
        new int[] {30, 0, 34},
      },
      new int[][] {
        new int[] {-1, 3, 21},
        new int[] {17, 0, 35},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {14, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 23},
        new int[] {16, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 24},
        new int[] {16, 0, 38},
      },
      new int[][] {
        new int[] {-1, 3, 25},
        new int[] {0, 0, 39},
        new int[] {16, 0, 40},
        new int[] {30, 0, 41},
      },
      new int[][] {
        new int[] {-1, 3, 26},
        new int[] {17, 0, 42},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {22, 0, 23},
        new int[] {24, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 1, 17},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 1, 30},
        new int[] {23, 0, 44},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 3, 35},
        new int[] {16, 0, 46},
      },
      new int[][] {
        new int[] {-1, 1, 10},
        new int[] {30, 0, 20},
      },
      new int[][] {
        new int[] {-1, 1, 40},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 40},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 39},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 37},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 41},
        new int[] {20, 0, 70},
      },
      new int[][] {
        new int[] {-1, 3, 42},
        new int[] {20, 0, 71},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 3, 44},
        new int[] {16, 0, 72},
      },
      new int[][] {
        new int[] {-1, 1, 31},
      },
      new int[][] {
        new int[] {-1, 3, 46},
        new int[] {22, 0, 23},
        new int[] {24, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 3, 48},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 50},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 64},
      },
      new int[][] {
        new int[] {-1, 1, 65},
      },
      new int[][] {
        new int[] {-1, 1, 66},
      },
      new int[][] {
        new int[] {-1, 1, 67},
      },
      new int[][] {
        new int[] {-1, 3, 55},
        new int[] {17, 0, 77},
      },
      new int[][] {
        new int[] {-1, 1, 39},
        new int[] {6, 0, 78},
      },
      new int[][] {
        new int[] {-1, 1, 42},
        new int[] {5, 0, 79},
      },
      new int[][] {
        new int[] {-1, 1, 44},
        new int[] {8, 0, 80},
        new int[] {9, 0, 81},
      },
      new int[][] {
        new int[] {-1, 1, 47},
        new int[] {10, 0, 82},
        new int[] {11, 0, 83},
        new int[] {12, 0, 84},
        new int[] {13, 0, 85},
      },
      new int[][] {
        new int[] {-1, 1, 52},
        new int[] {1, 0, 86},
        new int[] {3, 0, 87},
      },
      new int[][] {
        new int[] {-1, 1, 55},
        new int[] {2, 0, 88},
        new int[] {4, 0, 89},
      },
      new int[][] {
        new int[] {-1, 1, 58},
      },
      new int[][] {
        new int[] {-1, 1, 61},
      },
      new int[][] {
        new int[] {-1, 1, 63},
      },
      new int[][] {
        new int[] {-1, 3, 65},
        new int[] {17, 0, 90},
      },
      new int[][] {
        new int[] {-1, 3, 66},
        new int[] {6, 0, 78},
        new int[] {20, 0, 91},
      },
      new int[][] {
        new int[] {-1, 3, 67},
        new int[] {17, 0, 92},
      },
      new int[][] {
        new int[] {-1, 1, 36},
        new int[] {14, 0, 93},
      },
      new int[][] {
        new int[] {-1, 1, 38},
        new int[] {6, 0, 78},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 3, 72},
        new int[] {22, 0, 23},
        new int[] {24, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 73},
        new int[] {17, 0, 95},
      },
      new int[][] {
        new int[] {-1, 1, 59},
      },
      new int[][] {
        new int[] {-1, 1, 60},
      },
      new int[][] {
        new int[] {-1, 3, 76},
        new int[] {6, 0, 78},
        new int[] {17, 0, 96},
      },
      new int[][] {
        new int[] {-1, 3, 77},
        new int[] {16, 0, 97},
      },
      new int[][] {
        new int[] {-1, 3, 78},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 79},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 80},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 81},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 82},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 83},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 84},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 85},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 86},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 87},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 88},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 89},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 90},
        new int[] {16, 0, 110},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 3, 92},
        new int[] {20, 0, 111},
      },
      new int[][] {
        new int[] {-1, 1, 37},
        new int[] {3, 0, 48},
        new int[] {7, 0, 49},
        new int[] {16, 0, 50},
        new int[] {27, 0, 51},
        new int[] {28, 0, 52},
        new int[] {29, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 94},
        new int[] {17, 0, 113},
      },
      new int[][] {
        new int[] {-1, 3, 95},
        new int[] {20, 0, 114},
      },
      new int[][] {
        new int[] {-1, 1, 62},
      },
      new int[][] {
        new int[] {-1, 3, 97},
        new int[] {22, 0, 23},
        new int[] {24, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 1, 41},
        new int[] {5, 0, 79},
      },
      new int[][] {
        new int[] {-1, 1, 43},
        new int[] {8, 0, 80},
        new int[] {9, 0, 81},
      },
      new int[][] {
        new int[] {-1, 1, 45},
        new int[] {10, 0, 82},
        new int[] {11, 0, 83},
        new int[] {12, 0, 84},
        new int[] {13, 0, 85},
      },
      new int[][] {
        new int[] {-1, 1, 46},
        new int[] {10, 0, 82},
        new int[] {11, 0, 83},
        new int[] {12, 0, 84},
        new int[] {13, 0, 85},
      },
      new int[][] {
        new int[] {-1, 1, 50},
        new int[] {1, 0, 86},
        new int[] {3, 0, 87},
      },
      new int[][] {
        new int[] {-1, 1, 51},
        new int[] {1, 0, 86},
        new int[] {3, 0, 87},
      },
      new int[][] {
        new int[] {-1, 1, 49},
        new int[] {1, 0, 86},
        new int[] {3, 0, 87},
      },
      new int[][] {
        new int[] {-1, 1, 48},
        new int[] {1, 0, 86},
        new int[] {3, 0, 87},
      },
      new int[][] {
        new int[] {-1, 1, 53},
        new int[] {2, 0, 88},
        new int[] {4, 0, 89},
      },
      new int[][] {
        new int[] {-1, 1, 54},
        new int[] {2, 0, 88},
        new int[] {4, 0, 89},
      },
      new int[][] {
        new int[] {-1, 1, 56},
      },
      new int[][] {
        new int[] {-1, 1, 57},
      },
      new int[][] {
        new int[] {-1, 3, 110},
        new int[] {22, 0, 23},
        new int[] {24, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 1, 22},
      },
      new int[][] {
        new int[] {-1, 1, 35},
      },
      new int[][] {
        new int[] {-1, 3, 113},
        new int[] {20, 0, 117},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 3, 115},
        new int[] {17, 0, 118},
      },
      new int[][] {
        new int[] {-1, 3, 116},
        new int[] {17, 0, 119},
      },
      new int[][] {
        new int[] {-1, 1, 33},
      },
      new int[][] {
        new int[] {-1, 3, 118},
        new int[] {20, 0, 120},
      },
      new int[][] {
        new int[] {-1, 3, 119},
        new int[] {20, 0, 121},
      },
      new int[][] {
        new int[] {-1, 1, 32},
      },
      new int[][] {
        new int[] {-1, 1, 34},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 2},
      },
      new int[][] {
        new int[] {-1, 3},
        new int[] {4, 9},
      },
      new int[][] {
        new int[] {-1, 4},
      },
      new int[][] {
        new int[] {-1, 7},
        new int[] {8, 15},
      },
      new int[][] {
        new int[] {-1, 8},
      },
      new int[][] {
        new int[] {-1, 21},
        new int[] {36, 47},
      },
      new int[][] {
        new int[] {-1, 22},
      },
      new int[][] {
        new int[] {-1, 14},
      },
      new int[][] {
        new int[] {-1, 26},
        new int[] {27, 43},
        new int[] {46, 73},
        new int[] {72, 94},
        new int[] {97, 115},
        new int[] {110, 116},
      },
      new int[][] {
        new int[] {-1, 27},
      },
      new int[][] {
        new int[] {-1, 28},
      },
      new int[][] {
        new int[] {-1, 29},
      },
      new int[][] {
        new int[] {-1, 30},
      },
      new int[][] {
        new int[] {-1, -1},
      },
      new int[][] {
        new int[] {-1, -1},
      },
      new int[][] {
        new int[] {-1, -1},
      },
      new int[][] {
        new int[] {-1, 31},
      },
      new int[][] {
        new int[] {-1, 32},
      },
      new int[][] {
        new int[] {-1, 45},
      },
      new int[][] {
        new int[] {-1, 33},
      },
      new int[][] {
        new int[] {-1, 67},
        new int[] {93, 112},
      },
      new int[][] {
        new int[] {-1, 68},
      },
      new int[][] {
        new int[] {-1, 55},
        new int[] {38, 65},
      },
      new int[][] {
        new int[] {-1, 56},
        new int[] {39, 66},
        new int[] {40, 69},
        new int[] {50, 76},
        new int[] {93, 69},
      },
      new int[][] {
        new int[] {-1, 57},
        new int[] {78, 98},
      },
      new int[][] {
        new int[] {-1, 58},
        new int[] {79, 99},
      },
      new int[][] {
        new int[] {-1, 59},
        new int[] {80, 100},
        new int[] {81, 101},
      },
      new int[][] {
        new int[] {-1, 60},
        new int[] {82, 102},
        new int[] {83, 103},
        new int[] {84, 104},
        new int[] {85, 105},
      },
      new int[][] {
        new int[] {-1, 61},
        new int[] {86, 106},
        new int[] {87, 107},
      },
      new int[][] {
        new int[] {-1, 62},
        new int[] {88, 108},
        new int[] {89, 109},
      },
      new int[][] {
        new int[] {-1, 63},
        new int[] {48, 74},
        new int[] {49, 75},
      },
      new int[][] {
        new int[] {-1, 64},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'def', 'const', 'CODE'",
      "expecting: id",
      "expecting: EOF",
      "expecting: 'def', 'CODE'",
      "expecting: num, fp",
      "expecting: 'CODE'",
      "expecting: ';'",
      "expecting: '('",
      "expecting: ')', id",
      "expecting: 'if', 'while', id",
      "expecting: ')'",
      "expecting: ',', ')'",
      "expecting: '=', '(', id",
      "expecting: ')', 'if', 'while', id",
      "expecting: ')', 'if', 'else', 'while', id",
      "expecting: '-', 'NOT', '(', ')', num, fp, s, id",
      "expecting: '-', 'NOT', '(', num, fp, s, id",
      "expecting: '(', num, fp, s, id",
      "expecting: '+', '*', '-', '/', 'AND', 'OR', '==', '!=', '<', '>', '<=', '>=', ',', ')', ';'",
      "expecting: 'OR', ')'",
      "expecting: 'AND', 'OR', ',', ')', ';'",
      "expecting: 'AND', 'OR', '==', '!=', ',', ')', ';'",
      "expecting: 'AND', 'OR', '==', '!=', '<', '>', '<=', '>=', ',', ')', ';'",
      "expecting: '+', '-', 'AND', 'OR', '==', '!=', '<', '>', '<=', '>=', ',', ')', ';'",
      "expecting: 'OR', ';'",
      "expecting: 'OR', ',', ')'",
    };

    private static int[] errors = {
      0, 1, 2, 3, 0, 4, 1, 5, 3, 3, 6, 6, 7, 7, 2, 5, 
      0, 0, 8, 9, 1, 10, 11, 7, 7, 12, 10, 13, 13, 13, 13, 13, 
      14, 13, 11, 7, 8, 15, 15, 16, 15, 6, 6, 10, 7, 13, 9, 10, 
      17, 17, 16, 18, 18, 18, 18, 10, 19, 20, 21, 22, 23, 18, 18, 18, 
      18, 10, 24, 10, 11, 25, 13, 2, 9, 10, 18, 18, 19, 7, 16, 16, 
      16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 7, 13, 6, 15, 10, 6, 
      18, 9, 20, 21, 22, 22, 23, 23, 23, 23, 18, 18, 18, 18, 9, 13, 
      10, 6, 3, 10, 10, 13, 6, 6, 14, 13, 
    };
}
}
