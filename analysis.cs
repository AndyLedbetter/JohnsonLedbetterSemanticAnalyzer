/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAMultipleConstants(AMultipleConstants node);
    void CaseANoneConstants(ANoneConstants node);
    void CaseAIntegerOneConstant(AIntegerOneConstant node);
    void CaseAFloatsOneConstant(AFloatsOneConstant node);
    void CaseAMultipleFunctions(AMultipleFunctions node);
    void CaseANoneFunctions(ANoneFunctions node);
    void CaseAFunction(AFunction node);
    void CaseAMultipleFunctionParams(AMultipleFunctionParams node);
    void CaseASingleFunctionParams(ASingleFunctionParams node);
    void CaseANoneFunctionParams(ANoneFunctionParams node);
    void CaseADecArguements(ADecArguements node);
    void CaseAIntegerArguements(AIntegerArguements node);
    void CaseAFloatingPointArguements(AFloatingPointArguements node);
    void CaseAStringArguements(AStringArguements node);
    void CaseAMainFunction(AMainFunction node);
    void CaseAMultipleStatements(AMultipleStatements node);
    void CaseASingleStatements(ASingleStatements node);
    void CaseADeclarationStatement(ADeclarationStatement node);
    void CaseAAssignmentStatement(AAssignmentStatement node);
    void CaseACallStatement(ACallStatement node);
    void CaseAIfElseStatement(AIfElseStatement node);
    void CaseAWhileStatement(AWhileStatement node);
    void CaseAAssignStatement(AAssignStatement node);
    void CaseADeclareStatement(ADeclareStatement node);
    void CaseAFunctionCallStatement(AFunctionCallStatement node);
    void CaseAFunctionDeclareStatement(AFunctionDeclareStatement node);
    void CaseAMultipleDefineParameters(AMultipleDefineParameters node);
    void CaseASingleDefineParameters(ASingleDefineParameters node);
    void CaseANoParametersDefineParameters(ANoParametersDefineParameters node);
    void CaseAIntDefineParameter(AIntDefineParameter node);
    void CaseAFloatDefineParameter(AFloatDefineParameter node);
    void CaseAStringDefineParameter(AStringDefineParameter node);
    void CaseAJustIfElifState(AJustIfElifState node);
    void CaseAIfElseElifState(AIfElseElifState node);
    void CaseAIfState(AIfState node);
    void CaseAElseState(AElseState node);
    void CaseAWhileState(AWhileState node);
    void CaseAParameters(AParameters node);
    void CaseAOrExpression(AOrExpression node);
    void CaseAPassExpression(APassExpression node);
    void CaseAAndExpression1(AAndExpression1 node);
    void CaseAPassExpression1(APassExpression1 node);
    void CaseAEqualsExpression2(AEqualsExpression2 node);
    void CaseANotEqualExpression2(ANotEqualExpression2 node);
    void CaseAPassExpression2(APassExpression2 node);
    void CaseAGreaterThanOrEqualsExpression3(AGreaterThanOrEqualsExpression3 node);
    void CaseALessThanOrEqualsExpression3(ALessThanOrEqualsExpression3 node);
    void CaseALessThanExpression3(ALessThanExpression3 node);
    void CaseAGreaterThanExpression3(AGreaterThanExpression3 node);
    void CaseAPassExpression3(APassExpression3 node);
    void CaseAAddExpression4(AAddExpression4 node);
    void CaseASubtractExpression4(ASubtractExpression4 node);
    void CaseAPassExpression4(APassExpression4 node);
    void CaseAMultiplyExpression5(AMultiplyExpression5 node);
    void CaseADivideExpression5(ADivideExpression5 node);
    void CaseAPassExpression5(APassExpression5 node);
    void CaseANegativeExpression6(ANegativeExpression6 node);
    void CaseANotExpression6(ANotExpression6 node);
    void CaseAPassExpression6(APassExpression6 node);
    void CaseAParenthesisExpression7(AParenthesisExpression7 node);
    void CaseAPassExpression7(APassExpression7 node);
    void CaseAIntOperand(AIntOperand node);
    void CaseAFloatOperand(AFloatOperand node);
    void CaseAStringOperand(AStringOperand node);
    void CaseAVariableOperand(AVariableOperand node);

    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTMultiply(TMultiply node);
    void CaseTMinus(TMinus node);
    void CaseTDivide(TDivide node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTNot(TNot node);
    void CaseTEquals(TEquals node);
    void CaseTNotEquals(TNotEquals node);
    void CaseTLessthan(TLessthan node);
    void CaseTGreaterthan(TGreaterthan node);
    void CaseTLessthanorequals(TLessthanorequals node);
    void CaseTGreaterthanorequals(TGreaterthanorequals node);
    void CaseTComma(TComma node);
    void CaseTDot(TDot node);
    void CaseTOpenp(TOpenp node);
    void CaseTClosep(TClosep node);
    void CaseTQuote(TQuote node);
    void CaseTUnderscore(TUnderscore node);
    void CaseTEol(TEol node);
    void CaseTDefine(TDefine node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTWhile(TWhile node);
    void CaseTConstant(TConstant node);
    void CaseTMain(TMain node);
    void CaseTNum(TNum node);
    void CaseTFp(TFp node);
    void CaseTS(TS node);
    void CaseTId(TId node);
    void CaseTComment(TComment node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleConstants(AMultipleConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneConstants(ANoneConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntegerOneConstant(AIntegerOneConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatsOneConstant(AFloatsOneConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleFunctions(AMultipleFunctions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneFunctions(ANoneFunctions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunction(AFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleFunctionParams(AMultipleFunctionParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleFunctionParams(ASingleFunctionParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneFunctionParams(ANoneFunctionParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADecArguements(ADecArguements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntegerArguements(AIntegerArguements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatingPointArguements(AFloatingPointArguements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringArguements(AStringArguements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainFunction(AMainFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStatements(AMultipleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleStatements(ASingleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationStatement(ADeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallStatement(ACallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfElseStatement(AIfElseStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStatement(AWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignStatement(AAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclareStatement(ADeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionDeclareStatement(AFunctionDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleDefineParameters(ASingleDefineParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntDefineParameter(AIntDefineParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatDefineParameter(AFloatDefineParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringDefineParameter(AStringDefineParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAJustIfElifState(AJustIfElifState node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfElseElifState(AIfElseElifState node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfState(AIfState node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAElseState(AElseState node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileState(AWhileState node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParameters(AParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrExpression(AOrExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression(APassExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndExpression1(AAndExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression1(APassExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualsExpression2(AEqualsExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotEqualExpression2(ANotEqualExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression2(APassExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterThanOrEqualsExpression3(AGreaterThanOrEqualsExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessThanOrEqualsExpression3(ALessThanOrEqualsExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessThanExpression3(ALessThanExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterThanExpression3(AGreaterThanExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression3(APassExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddExpression4(AAddExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubtractExpression4(ASubtractExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression4(APassExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiplyExpression5(AMultiplyExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivideExpression5(ADivideExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression5(APassExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotExpression6(ANotExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression6(APassExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenthesisExpression7(AParenthesisExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression7(APassExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntOperand(AIntOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatOperand(AFloatOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringOperand(AStringOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMultiply(TMultiply node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivide(TDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquals(TEquals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNotEquals(TNotEquals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessthan(TLessthan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterthan(TGreaterthan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessthanorequals(TLessthanorequals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterthanorequals(TGreaterthanorequals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDot(TDot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenp(TOpenp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosep(TClosep node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTQuote(TQuote node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTUnderscore(TUnderscore node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDefine(TDefine node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstant(TConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNum(TNum node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFp(TFp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTS(TS node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        if(node.GetMainFunction() != null)
        {
            node.GetMainFunction().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleConstants(AMultipleConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleConstants(AMultipleConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleConstants(AMultipleConstants node)
    {
        InAMultipleConstants(node);
        if(node.GetOneConstant() != null)
        {
            node.GetOneConstant().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAMultipleConstants(node);
    }
    public virtual void InANoneConstants(ANoneConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneConstants(ANoneConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneConstants(ANoneConstants node)
    {
        InANoneConstants(node);
        OutANoneConstants(node);
    }
    public virtual void InAIntegerOneConstant(AIntegerOneConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerOneConstant(AIntegerOneConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerOneConstant(AIntegerOneConstant node)
    {
        InAIntegerOneConstant(node);
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetNum() != null)
        {
            node.GetNum().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAIntegerOneConstant(node);
    }
    public virtual void InAFloatsOneConstant(AFloatsOneConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatsOneConstant(AFloatsOneConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatsOneConstant(AFloatsOneConstant node)
    {
        InAFloatsOneConstant(node);
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetFp() != null)
        {
            node.GetFp().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFloatsOneConstant(node);
    }
    public virtual void InAMultipleFunctions(AMultipleFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFunctions(AMultipleFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFunctions(AMultipleFunctions node)
    {
        InAMultipleFunctions(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        OutAMultipleFunctions(node);
    }
    public virtual void InANoneFunctions(ANoneFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFunctions(ANoneFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFunctions(ANoneFunctions node)
    {
        InANoneFunctions(node);
        OutANoneFunctions(node);
    }
    public virtual void InAFunction(AFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunction(AFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunction(AFunction node)
    {
        InAFunction(node);
        if(node.GetDefine() != null)
        {
            node.GetDefine().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOone() != null)
        {
            node.GetOone().Apply(this);
        }
        if(node.GetFunctionParams() != null)
        {
            node.GetFunctionParams().Apply(this);
        }
        if(node.GetCone() != null)
        {
            node.GetCone().Apply(this);
        }
        if(node.GetOtwo() != null)
        {
            node.GetOtwo().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCtwo() != null)
        {
            node.GetCtwo().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunction(node);
    }
    public virtual void InAMultipleFunctionParams(AMultipleFunctionParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFunctionParams(AMultipleFunctionParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFunctionParams(AMultipleFunctionParams node)
    {
        InAMultipleFunctionParams(node);
        if(node.GetArguements() != null)
        {
            node.GetArguements().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFunctionParams() != null)
        {
            node.GetFunctionParams().Apply(this);
        }
        OutAMultipleFunctionParams(node);
    }
    public virtual void InASingleFunctionParams(ASingleFunctionParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleFunctionParams(ASingleFunctionParams node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleFunctionParams(ASingleFunctionParams node)
    {
        InASingleFunctionParams(node);
        if(node.GetArguements() != null)
        {
            node.GetArguements().Apply(this);
        }
        OutASingleFunctionParams(node);
    }
    public virtual void InANoneFunctionParams(ANoneFunctionParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFunctionParams(ANoneFunctionParams node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFunctionParams(ANoneFunctionParams node)
    {
        InANoneFunctionParams(node);
        OutANoneFunctionParams(node);
    }
    public virtual void InADecArguements(ADecArguements node)
    {
        DefaultIn(node);
    }

    public virtual void OutADecArguements(ADecArguements node)
    {
        DefaultOut(node);
    }

    public override void CaseADecArguements(ADecArguements node)
    {
        InADecArguements(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutADecArguements(node);
    }
    public virtual void InAIntegerArguements(AIntegerArguements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerArguements(AIntegerArguements node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerArguements(AIntegerArguements node)
    {
        InAIntegerArguements(node);
        if(node.GetNum() != null)
        {
            node.GetNum().Apply(this);
        }
        OutAIntegerArguements(node);
    }
    public virtual void InAFloatingPointArguements(AFloatingPointArguements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatingPointArguements(AFloatingPointArguements node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatingPointArguements(AFloatingPointArguements node)
    {
        InAFloatingPointArguements(node);
        if(node.GetFp() != null)
        {
            node.GetFp().Apply(this);
        }
        OutAFloatingPointArguements(node);
    }
    public virtual void InAStringArguements(AStringArguements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringArguements(AStringArguements node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringArguements(AStringArguements node)
    {
        InAStringArguements(node);
        if(node.GetS() != null)
        {
            node.GetS().Apply(this);
        }
        OutAStringArguements(node);
    }
    public virtual void InAMainFunction(AMainFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainFunction(AMainFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainFunction(AMainFunction node)
    {
        InAMainFunction(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAMainFunction(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutASingleStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAIfElseStatement(AIfElseStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElseStatement(AIfElseStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElseStatement(AIfElseStatement node)
    {
        InAIfElseStatement(node);
        if(node.GetElifState() != null)
        {
            node.GetElifState().Apply(this);
        }
        OutAIfElseStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetWhileState() != null)
        {
            node.GetWhileState().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InAFunctionDeclareStatement(AFunctionDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionDeclareStatement(AFunctionDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionDeclareStatement(AFunctionDeclareStatement node)
    {
        InAFunctionDeclareStatement(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOone() != null)
        {
            node.GetOone().Apply(this);
        }
        if(node.GetDefineParameters() != null)
        {
            node.GetDefineParameters().Apply(this);
        }
        if(node.GetCone() != null)
        {
            node.GetCone().Apply(this);
        }
        if(node.GetOtwo() != null)
        {
            node.GetOtwo().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCtwo() != null)
        {
            node.GetCtwo().Apply(this);
        }
        OutAFunctionDeclareStatement(node);
    }
    public virtual void InAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        InAMultipleDefineParameters(node);
        if(node.GetDefineParameter() != null)
        {
            node.GetDefineParameter().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetDefineParameters() != null)
        {
            node.GetDefineParameters().Apply(this);
        }
        OutAMultipleDefineParameters(node);
    }
    public virtual void InASingleDefineParameters(ASingleDefineParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleDefineParameters(ASingleDefineParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleDefineParameters(ASingleDefineParameters node)
    {
        InASingleDefineParameters(node);
        if(node.GetDefineParameter() != null)
        {
            node.GetDefineParameter().Apply(this);
        }
        OutASingleDefineParameters(node);
    }
    public virtual void InANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        InANoParametersDefineParameters(node);
        OutANoParametersDefineParameters(node);
    }
    public virtual void InAIntDefineParameter(AIntDefineParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntDefineParameter(AIntDefineParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntDefineParameter(AIntDefineParameter node)
    {
        InAIntDefineParameter(node);
        if(node.GetNum() != null)
        {
            node.GetNum().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIntDefineParameter(node);
    }
    public virtual void InAFloatDefineParameter(AFloatDefineParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatDefineParameter(AFloatDefineParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatDefineParameter(AFloatDefineParameter node)
    {
        InAFloatDefineParameter(node);
        if(node.GetFp() != null)
        {
            node.GetFp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFloatDefineParameter(node);
    }
    public virtual void InAStringDefineParameter(AStringDefineParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringDefineParameter(AStringDefineParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringDefineParameter(AStringDefineParameter node)
    {
        InAStringDefineParameter(node);
        if(node.GetS() != null)
        {
            node.GetS().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAStringDefineParameter(node);
    }
    public virtual void InAJustIfElifState(AJustIfElifState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAJustIfElifState(AJustIfElifState node)
    {
        DefaultOut(node);
    }

    public override void CaseAJustIfElifState(AJustIfElifState node)
    {
        InAJustIfElifState(node);
        if(node.GetIfState() != null)
        {
            node.GetIfState().Apply(this);
        }
        OutAJustIfElifState(node);
    }
    public virtual void InAIfElseElifState(AIfElseElifState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElseElifState(AIfElseElifState node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElseElifState(AIfElseElifState node)
    {
        InAIfElseElifState(node);
        if(node.GetIfState() != null)
        {
            node.GetIfState().Apply(this);
        }
        if(node.GetElseState() != null)
        {
            node.GetElseState().Apply(this);
        }
        OutAIfElseElifState(node);
    }
    public virtual void InAIfState(AIfState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfState(AIfState node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfState(AIfState node)
    {
        InAIfState(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetOone() != null)
        {
            node.GetOone().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetCone() != null)
        {
            node.GetCone().Apply(this);
        }
        if(node.GetOtwo() != null)
        {
            node.GetOtwo().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCtwo() != null)
        {
            node.GetCtwo().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAIfState(node);
    }
    public virtual void InAElseState(AElseState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElseState(AElseState node)
    {
        DefaultOut(node);
    }

    public override void CaseAElseState(AElseState node)
    {
        InAElseState(node);
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAElseState(node);
    }
    public virtual void InAWhileState(AWhileState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileState(AWhileState node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileState(AWhileState node)
    {
        InAWhileState(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetOone() != null)
        {
            node.GetOone().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetCone() != null)
        {
            node.GetCone().Apply(this);
        }
        if(node.GetOtwo() != null)
        {
            node.GetOtwo().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCtwo() != null)
        {
            node.GetCtwo().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAWhileState(node);
    }
    public virtual void InAParameters(AParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameters(AParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameters(AParameters node)
    {
        InAParameters(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAParameters(node);
    }
    public virtual void InAOrExpression(AOrExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrExpression(AOrExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrExpression(AOrExpression node)
    {
        InAOrExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        OutAOrExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAAndExpression1(AAndExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExpression1(AAndExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExpression1(AAndExpression1 node)
    {
        InAAndExpression1(node);
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAAndExpression1(node);
    }
    public virtual void InAPassExpression1(APassExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression1(APassExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression1(APassExpression1 node)
    {
        InAPassExpression1(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression1(node);
    }
    public virtual void InAEqualsExpression2(AEqualsExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualsExpression2(AEqualsExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualsExpression2(AEqualsExpression2 node)
    {
        InAEqualsExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAEqualsExpression2(node);
    }
    public virtual void InANotEqualExpression2(ANotEqualExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotEqualExpression2(ANotEqualExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotEqualExpression2(ANotEqualExpression2 node)
    {
        InANotEqualExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetNotEquals() != null)
        {
            node.GetNotEquals().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutANotEqualExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAGreaterThanOrEqualsExpression3(AGreaterThanOrEqualsExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanOrEqualsExpression3(AGreaterThanOrEqualsExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanOrEqualsExpression3(AGreaterThanOrEqualsExpression3 node)
    {
        InAGreaterThanOrEqualsExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetGreaterthanorequals() != null)
        {
            node.GetGreaterthanorequals().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAGreaterThanOrEqualsExpression3(node);
    }
    public virtual void InALessThanOrEqualsExpression3(ALessThanOrEqualsExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanOrEqualsExpression3(ALessThanOrEqualsExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanOrEqualsExpression3(ALessThanOrEqualsExpression3 node)
    {
        InALessThanOrEqualsExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetLessthanorequals() != null)
        {
            node.GetLessthanorequals().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutALessThanOrEqualsExpression3(node);
    }
    public virtual void InALessThanExpression3(ALessThanExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanExpression3(ALessThanExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanExpression3(ALessThanExpression3 node)
    {
        InALessThanExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetLessthan() != null)
        {
            node.GetLessthan().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutALessThanExpression3(node);
    }
    public virtual void InAGreaterThanExpression3(AGreaterThanExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanExpression3(AGreaterThanExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanExpression3(AGreaterThanExpression3 node)
    {
        InAGreaterThanExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetGreaterthan() != null)
        {
            node.GetGreaterthan().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAGreaterThanExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InAAddExpression4(AAddExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression4(AAddExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression4(AAddExpression4 node)
    {
        InAAddExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAAddExpression4(node);
    }
    public virtual void InASubtractExpression4(ASubtractExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpression4(ASubtractExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpression4(ASubtractExpression4 node)
    {
        InASubtractExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutASubtractExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAMultiplyExpression5(AMultiplyExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression5(AMultiplyExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression5(AMultiplyExpression5 node)
    {
        InAMultiplyExpression5(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetMultiply() != null)
        {
            node.GetMultiply().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAMultiplyExpression5(node);
    }
    public virtual void InADivideExpression5(ADivideExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpression5(ADivideExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpression5(ADivideExpression5 node)
    {
        InADivideExpression5(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutADivideExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression6(ANegativeExpression6 node)
    {
        InANegativeExpression6(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutANegativeExpression6(node);
    }
    public virtual void InANotExpression6(ANotExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotExpression6(ANotExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotExpression6(ANotExpression6 node)
    {
        InANotExpression6(node);
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutANotExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InAParenthesisExpression7(AParenthesisExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisExpression7(AParenthesisExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisExpression7(AParenthesisExpression7 node)
    {
        InAParenthesisExpression7(node);
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        OutAParenthesisExpression7(node);
    }
    public virtual void InAPassExpression7(APassExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression7(APassExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression7(APassExpression7 node)
    {
        InAPassExpression7(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression7(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetNum() != null)
        {
            node.GetNum().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFp() != null)
        {
            node.GetFp().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetS() != null)
        {
            node.GetS().Apply(this);
        }
        OutAStringOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainFunction() != null)
        {
            node.GetMainFunction().Apply(this);
        }
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleConstants(AMultipleConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleConstants(AMultipleConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleConstants(AMultipleConstants node)
    {
        InAMultipleConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetOneConstant() != null)
        {
            node.GetOneConstant().Apply(this);
        }
        OutAMultipleConstants(node);
    }
    public virtual void InANoneConstants(ANoneConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneConstants(ANoneConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneConstants(ANoneConstants node)
    {
        InANoneConstants(node);
        OutANoneConstants(node);
    }
    public virtual void InAIntegerOneConstant(AIntegerOneConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerOneConstant(AIntegerOneConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerOneConstant(AIntegerOneConstant node)
    {
        InAIntegerOneConstant(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetNum() != null)
        {
            node.GetNum().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        OutAIntegerOneConstant(node);
    }
    public virtual void InAFloatsOneConstant(AFloatsOneConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatsOneConstant(AFloatsOneConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatsOneConstant(AFloatsOneConstant node)
    {
        InAFloatsOneConstant(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetFp() != null)
        {
            node.GetFp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        OutAFloatsOneConstant(node);
    }
    public virtual void InAMultipleFunctions(AMultipleFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFunctions(AMultipleFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFunctions(AMultipleFunctions node)
    {
        InAMultipleFunctions(node);
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutAMultipleFunctions(node);
    }
    public virtual void InANoneFunctions(ANoneFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFunctions(ANoneFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFunctions(ANoneFunctions node)
    {
        InANoneFunctions(node);
        OutANoneFunctions(node);
    }
    public virtual void InAFunction(AFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunction(AFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunction(AFunction node)
    {
        InAFunction(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCtwo() != null)
        {
            node.GetCtwo().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOtwo() != null)
        {
            node.GetOtwo().Apply(this);
        }
        if(node.GetCone() != null)
        {
            node.GetCone().Apply(this);
        }
        if(node.GetFunctionParams() != null)
        {
            node.GetFunctionParams().Apply(this);
        }
        if(node.GetOone() != null)
        {
            node.GetOone().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetDefine() != null)
        {
            node.GetDefine().Apply(this);
        }
        OutAFunction(node);
    }
    public virtual void InAMultipleFunctionParams(AMultipleFunctionParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFunctionParams(AMultipleFunctionParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFunctionParams(AMultipleFunctionParams node)
    {
        InAMultipleFunctionParams(node);
        if(node.GetFunctionParams() != null)
        {
            node.GetFunctionParams().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetArguements() != null)
        {
            node.GetArguements().Apply(this);
        }
        OutAMultipleFunctionParams(node);
    }
    public virtual void InASingleFunctionParams(ASingleFunctionParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleFunctionParams(ASingleFunctionParams node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleFunctionParams(ASingleFunctionParams node)
    {
        InASingleFunctionParams(node);
        if(node.GetArguements() != null)
        {
            node.GetArguements().Apply(this);
        }
        OutASingleFunctionParams(node);
    }
    public virtual void InANoneFunctionParams(ANoneFunctionParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFunctionParams(ANoneFunctionParams node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFunctionParams(ANoneFunctionParams node)
    {
        InANoneFunctionParams(node);
        OutANoneFunctionParams(node);
    }
    public virtual void InADecArguements(ADecArguements node)
    {
        DefaultIn(node);
    }

    public virtual void OutADecArguements(ADecArguements node)
    {
        DefaultOut(node);
    }

    public override void CaseADecArguements(ADecArguements node)
    {
        InADecArguements(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADecArguements(node);
    }
    public virtual void InAIntegerArguements(AIntegerArguements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerArguements(AIntegerArguements node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerArguements(AIntegerArguements node)
    {
        InAIntegerArguements(node);
        if(node.GetNum() != null)
        {
            node.GetNum().Apply(this);
        }
        OutAIntegerArguements(node);
    }
    public virtual void InAFloatingPointArguements(AFloatingPointArguements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatingPointArguements(AFloatingPointArguements node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatingPointArguements(AFloatingPointArguements node)
    {
        InAFloatingPointArguements(node);
        if(node.GetFp() != null)
        {
            node.GetFp().Apply(this);
        }
        OutAFloatingPointArguements(node);
    }
    public virtual void InAStringArguements(AStringArguements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringArguements(AStringArguements node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringArguements(AStringArguements node)
    {
        InAStringArguements(node);
        if(node.GetS() != null)
        {
            node.GetS().Apply(this);
        }
        OutAStringArguements(node);
    }
    public virtual void InAMainFunction(AMainFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainFunction(AMainFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainFunction(AMainFunction node)
    {
        InAMainFunction(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAMainFunction(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutASingleStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAIfElseStatement(AIfElseStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElseStatement(AIfElseStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElseStatement(AIfElseStatement node)
    {
        InAIfElseStatement(node);
        if(node.GetElifState() != null)
        {
            node.GetElifState().Apply(this);
        }
        OutAIfElseStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetWhileState() != null)
        {
            node.GetWhileState().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InAFunctionDeclareStatement(AFunctionDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionDeclareStatement(AFunctionDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionDeclareStatement(AFunctionDeclareStatement node)
    {
        InAFunctionDeclareStatement(node);
        if(node.GetCtwo() != null)
        {
            node.GetCtwo().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOtwo() != null)
        {
            node.GetOtwo().Apply(this);
        }
        if(node.GetCone() != null)
        {
            node.GetCone().Apply(this);
        }
        if(node.GetDefineParameters() != null)
        {
            node.GetDefineParameters().Apply(this);
        }
        if(node.GetOone() != null)
        {
            node.GetOone().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutAFunctionDeclareStatement(node);
    }
    public virtual void InAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        InAMultipleDefineParameters(node);
        if(node.GetDefineParameters() != null)
        {
            node.GetDefineParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetDefineParameter() != null)
        {
            node.GetDefineParameter().Apply(this);
        }
        OutAMultipleDefineParameters(node);
    }
    public virtual void InASingleDefineParameters(ASingleDefineParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleDefineParameters(ASingleDefineParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleDefineParameters(ASingleDefineParameters node)
    {
        InASingleDefineParameters(node);
        if(node.GetDefineParameter() != null)
        {
            node.GetDefineParameter().Apply(this);
        }
        OutASingleDefineParameters(node);
    }
    public virtual void InANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        InANoParametersDefineParameters(node);
        OutANoParametersDefineParameters(node);
    }
    public virtual void InAIntDefineParameter(AIntDefineParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntDefineParameter(AIntDefineParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntDefineParameter(AIntDefineParameter node)
    {
        InAIntDefineParameter(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetNum() != null)
        {
            node.GetNum().Apply(this);
        }
        OutAIntDefineParameter(node);
    }
    public virtual void InAFloatDefineParameter(AFloatDefineParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatDefineParameter(AFloatDefineParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatDefineParameter(AFloatDefineParameter node)
    {
        InAFloatDefineParameter(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetFp() != null)
        {
            node.GetFp().Apply(this);
        }
        OutAFloatDefineParameter(node);
    }
    public virtual void InAStringDefineParameter(AStringDefineParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringDefineParameter(AStringDefineParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringDefineParameter(AStringDefineParameter node)
    {
        InAStringDefineParameter(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetS() != null)
        {
            node.GetS().Apply(this);
        }
        OutAStringDefineParameter(node);
    }
    public virtual void InAJustIfElifState(AJustIfElifState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAJustIfElifState(AJustIfElifState node)
    {
        DefaultOut(node);
    }

    public override void CaseAJustIfElifState(AJustIfElifState node)
    {
        InAJustIfElifState(node);
        if(node.GetIfState() != null)
        {
            node.GetIfState().Apply(this);
        }
        OutAJustIfElifState(node);
    }
    public virtual void InAIfElseElifState(AIfElseElifState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElseElifState(AIfElseElifState node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElseElifState(AIfElseElifState node)
    {
        InAIfElseElifState(node);
        if(node.GetElseState() != null)
        {
            node.GetElseState().Apply(this);
        }
        if(node.GetIfState() != null)
        {
            node.GetIfState().Apply(this);
        }
        OutAIfElseElifState(node);
    }
    public virtual void InAIfState(AIfState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfState(AIfState node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfState(AIfState node)
    {
        InAIfState(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCtwo() != null)
        {
            node.GetCtwo().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOtwo() != null)
        {
            node.GetOtwo().Apply(this);
        }
        if(node.GetCone() != null)
        {
            node.GetCone().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetOone() != null)
        {
            node.GetOone().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAIfState(node);
    }
    public virtual void InAElseState(AElseState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElseState(AElseState node)
    {
        DefaultOut(node);
    }

    public override void CaseAElseState(AElseState node)
    {
        InAElseState(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        OutAElseState(node);
    }
    public virtual void InAWhileState(AWhileState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileState(AWhileState node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileState(AWhileState node)
    {
        InAWhileState(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCtwo() != null)
        {
            node.GetCtwo().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOtwo() != null)
        {
            node.GetOtwo().Apply(this);
        }
        if(node.GetCone() != null)
        {
            node.GetCone().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetOone() != null)
        {
            node.GetOone().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhileState(node);
    }
    public virtual void InAParameters(AParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameters(AParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameters(AParameters node)
    {
        InAParameters(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAParameters(node);
    }
    public virtual void InAOrExpression(AOrExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrExpression(AOrExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrExpression(AOrExpression node)
    {
        InAOrExpression(node);
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAOrExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAAndExpression1(AAndExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExpression1(AAndExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExpression1(AAndExpression1 node)
    {
        InAAndExpression1(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        OutAAndExpression1(node);
    }
    public virtual void InAPassExpression1(APassExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression1(APassExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression1(APassExpression1 node)
    {
        InAPassExpression1(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression1(node);
    }
    public virtual void InAEqualsExpression2(AEqualsExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualsExpression2(AEqualsExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualsExpression2(AEqualsExpression2 node)
    {
        InAEqualsExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAEqualsExpression2(node);
    }
    public virtual void InANotEqualExpression2(ANotEqualExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotEqualExpression2(ANotEqualExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotEqualExpression2(ANotEqualExpression2 node)
    {
        InANotEqualExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetNotEquals() != null)
        {
            node.GetNotEquals().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutANotEqualExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAGreaterThanOrEqualsExpression3(AGreaterThanOrEqualsExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanOrEqualsExpression3(AGreaterThanOrEqualsExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanOrEqualsExpression3(AGreaterThanOrEqualsExpression3 node)
    {
        InAGreaterThanOrEqualsExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetGreaterthanorequals() != null)
        {
            node.GetGreaterthanorequals().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAGreaterThanOrEqualsExpression3(node);
    }
    public virtual void InALessThanOrEqualsExpression3(ALessThanOrEqualsExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanOrEqualsExpression3(ALessThanOrEqualsExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanOrEqualsExpression3(ALessThanOrEqualsExpression3 node)
    {
        InALessThanOrEqualsExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetLessthanorequals() != null)
        {
            node.GetLessthanorequals().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutALessThanOrEqualsExpression3(node);
    }
    public virtual void InALessThanExpression3(ALessThanExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanExpression3(ALessThanExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanExpression3(ALessThanExpression3 node)
    {
        InALessThanExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetLessthan() != null)
        {
            node.GetLessthan().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutALessThanExpression3(node);
    }
    public virtual void InAGreaterThanExpression3(AGreaterThanExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanExpression3(AGreaterThanExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanExpression3(AGreaterThanExpression3 node)
    {
        InAGreaterThanExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetGreaterthan() != null)
        {
            node.GetGreaterthan().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAGreaterThanExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InAAddExpression4(AAddExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression4(AAddExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression4(AAddExpression4 node)
    {
        InAAddExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAAddExpression4(node);
    }
    public virtual void InASubtractExpression4(ASubtractExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpression4(ASubtractExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpression4(ASubtractExpression4 node)
    {
        InASubtractExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutASubtractExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAMultiplyExpression5(AMultiplyExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression5(AMultiplyExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression5(AMultiplyExpression5 node)
    {
        InAMultiplyExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetMultiply() != null)
        {
            node.GetMultiply().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAMultiplyExpression5(node);
    }
    public virtual void InADivideExpression5(ADivideExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpression5(ADivideExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpression5(ADivideExpression5 node)
    {
        InADivideExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutADivideExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression6(ANegativeExpression6 node)
    {
        InANegativeExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegativeExpression6(node);
    }
    public virtual void InANotExpression6(ANotExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotExpression6(ANotExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotExpression6(ANotExpression6 node)
    {
        InANotExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        OutANotExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InAParenthesisExpression7(AParenthesisExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisExpression7(AParenthesisExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisExpression7(AParenthesisExpression7 node)
    {
        InAParenthesisExpression7(node);
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        OutAParenthesisExpression7(node);
    }
    public virtual void InAPassExpression7(APassExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression7(APassExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression7(APassExpression7 node)
    {
        InAPassExpression7(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression7(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetNum() != null)
        {
            node.GetNum().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFp() != null)
        {
            node.GetFp().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetS() != null)
        {
            node.GetS().Apply(this);
        }
        OutAStringOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
}
} // namespace CS426.analysis
