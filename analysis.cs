/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAMultipleStatements(AMultipleStatements node);
    void CaseASingleStatements(ASingleStatements node);
    void CaseAAssignmentStatement(AAssignmentStatement node);
    void CaseADeclarationStatement(ADeclarationStatement node);
    void CaseACallStatement(ACallStatement node);
    void CaseADefineStatement(ADefineStatement node);
    void CaseAConstantStatement(AConstantStatement node);
    void CaseAIfStatement(AIfStatement node);
    void CaseAWhileStatement(AWhileStatement node);
    void CaseAMainFunction(AMainFunction node);
    void CaseAFunctionCallStatement(AFunctionCallStatement node);
    void CaseAFunctionDefineStatement(AFunctionDefineStatement node);
    void CaseAMultipleDefineParameters(AMultipleDefineParameters node);
    void CaseASingleDefineParameters(ASingleDefineParameters node);
    void CaseANoParametersDefineParameters(ANoParametersDefineParameters node);
    void CaseAIntDefineParameter(AIntDefineParameter node);
    void CaseAFloatDefineParameter(AFloatDefineParameter node);
    void CaseACharDefineParameter(ACharDefineParameter node);
    void CaseAIntAndFloatDeclareDeclareStatement(AIntAndFloatDeclareDeclareStatement node);
    void CaseACharDeclareDeclareStatement(ACharDeclareDeclareStatement node);
    void CaseAIntTypeId(AIntTypeId node);
    void CaseAFloatTypeId(AFloatTypeId node);
    void CaseACharTypeId(ACharTypeId node);
    void CaseAIntAndFloatDeclareConstantDeclaration(AIntAndFloatDeclareConstantDeclaration node);
    void CaseACharDeclareConstantDeclaration(ACharDeclareConstantDeclaration node);
    void CaseAIntConstTypeId(AIntConstTypeId node);
    void CaseAFloatConstTypeId(AFloatConstTypeId node);
    void CaseACharConstTypeId(ACharConstTypeId node);
    void CaseAMultipleParameters(AMultipleParameters node);
    void CaseASingleParameters(ASingleParameters node);
    void CaseANoParameterParameters(ANoParameterParameters node);
    void CaseAParameter(AParameter node);
    void CaseAIfElseConditional(AIfElseConditional node);
    void CaseAWhileLoop(AWhileLoop node);
    void CaseAMultipleConditionals(AMultipleConditionals node);
    void CaseASingleConditionals(ASingleConditionals node);
    void CaseAConditional(AConditional node);
    void CaseAEqualConditionalToken(AEqualConditionalToken node);
    void CaseANotConditionalToken(ANotConditionalToken node);
    void CaseAGreaterConditionalToken(AGreaterConditionalToken node);
    void CaseALessConditionalToken(ALessConditionalToken node);
    void CaseAGreaterOrEqualConditionalToken(AGreaterOrEqualConditionalToken node);
    void CaseALessOrEqualConditionalToken(ALessOrEqualConditionalToken node);
    void CaseAAndtokenBooleanToken(AAndtokenBooleanToken node);
    void CaseAOrtokenBooleanToken(AOrtokenBooleanToken node);
    void CaseAIntAndFloatAssignAssignStatement(AIntAndFloatAssignAssignStatement node);
    void CaseAStringAssignAssignStatement(AStringAssignAssignStatement node);
    void CaseALogicalorExpression(ALogicalorExpression node);
    void CaseAPassExpression(APassExpression node);
    void CaseALogicalandExpression2(ALogicalandExpression2 node);
    void CaseAPassExpression2(APassExpression2 node);
    void CaseAEqualExpression3(AEqualExpression3 node);
    void CaseANotequalExpression3(ANotequalExpression3 node);
    void CaseAPassExpression3(APassExpression3 node);
    void CaseALessthanExpression4(ALessthanExpression4 node);
    void CaseAGreaterthanExpression4(AGreaterthanExpression4 node);
    void CaseAPassExpression4(APassExpression4 node);
    void CaseAAddExpression5(AAddExpression5 node);
    void CaseAPassExpression5(APassExpression5 node);
    void CaseAMinusExpression6(AMinusExpression6 node);
    void CaseAPassExpression6(APassExpression6 node);
    void CaseAMultiplyExpression7(AMultiplyExpression7 node);
    void CaseAPassExpression7(APassExpression7 node);
    void CaseADivisionExpression8(ADivisionExpression8 node);
    void CaseAPassExpression8(APassExpression8 node);
    void CaseAExponentialExpression9(AExponentialExpression9 node);
    void CaseAPassExpression9(APassExpression9 node);
    void CaseAParanthesisExpression10(AParanthesisExpression10 node);
    void CaseAPassExpression10(APassExpression10 node);
    void CaseANegativeExpression11(ANegativeExpression11 node);
    void CaseAPassExpression11(APassExpression11 node);
    void CaseAIntOperand(AIntOperand node);
    void CaseAFloatOperand(AFloatOperand node);
    void CaseAVariableOperand(AVariableOperand node);

    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTMult(TMult node);
    void CaseTDivision(TDivision node);
    void CaseTExponent(TExponent node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTNottoken(TNottoken node);
    void CaseTEquivalence(TEquivalence node);
    void CaseTGreater(TGreater node);
    void CaseTLess(TLess node);
    void CaseTGreaterequal(TGreaterequal node);
    void CaseTLessequal(TLessequal node);
    void CaseTEol(TEol node);
    void CaseTOpenparanthesis(TOpenparanthesis node);
    void CaseTCloseparanthesis(TCloseparanthesis node);
    void CaseTOpenbracket(TOpenbracket node);
    void CaseTClosebracket(TClosebracket node);
    void CaseTOpencurly(TOpencurly node);
    void CaseTClosecurly(TClosecurly node);
    void CaseTComma(TComma node);
    void CaseTUnderscore(TUnderscore node);
    void CaseTInttype(TInttype node);
    void CaseTConstint(TConstint node);
    void CaseTFloattype(TFloattype node);
    void CaseTConstfloat(TConstfloat node);
    void CaseTChartype(TChartype node);
    void CaseTConstchar(TConstchar node);
    void CaseTId(TId node);
    void CaseTComment(TComment node);
    void CaseTInteger(TInteger node);
    void CaseTFloat(TFloat node);
    void CaseTString(TString node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTWhile(TWhile node);
    void CaseTFunction(TFunction node);
    void CaseTMain(TMain node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStatements(AMultipleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleStatements(ASingleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationStatement(ADeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallStatement(ACallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADefineStatement(ADefineStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantStatement(AConstantStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStatement(AIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStatement(AWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainFunction(AMainFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionDefineStatement(AFunctionDefineStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleDefineParameters(ASingleDefineParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntDefineParameter(AIntDefineParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatDefineParameter(AFloatDefineParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACharDefineParameter(ACharDefineParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntAndFloatDeclareDeclareStatement(AIntAndFloatDeclareDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACharDeclareDeclareStatement(ACharDeclareDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntTypeId(AIntTypeId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatTypeId(AFloatTypeId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACharTypeId(ACharTypeId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntAndFloatDeclareConstantDeclaration(AIntAndFloatDeclareConstantDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACharDeclareConstantDeclaration(ACharDeclareConstantDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntConstTypeId(AIntConstTypeId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatConstTypeId(AFloatConstTypeId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACharConstTypeId(ACharConstTypeId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleParameters(AMultipleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleParameters(ASingleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoParameterParameters(ANoParameterParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParameter(AParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfElseConditional(AIfElseConditional node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileLoop(AWhileLoop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleConditionals(AMultipleConditionals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleConditionals(ASingleConditionals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConditional(AConditional node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualConditionalToken(AEqualConditionalToken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotConditionalToken(ANotConditionalToken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterConditionalToken(AGreaterConditionalToken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessConditionalToken(ALessConditionalToken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterOrEqualConditionalToken(AGreaterOrEqualConditionalToken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessOrEqualConditionalToken(ALessOrEqualConditionalToken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndtokenBooleanToken(AAndtokenBooleanToken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrtokenBooleanToken(AOrtokenBooleanToken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntAndFloatAssignAssignStatement(AIntAndFloatAssignAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringAssignAssignStatement(AStringAssignAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALogicalorExpression(ALogicalorExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression(APassExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALogicalandExpression2(ALogicalandExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression2(APassExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualExpression3(AEqualExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotequalExpression3(ANotequalExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression3(APassExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessthanExpression4(ALessthanExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterthanExpression4(AGreaterthanExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression4(APassExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddExpression5(AAddExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression5(APassExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMinusExpression6(AMinusExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression6(APassExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiplyExpression7(AMultiplyExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression7(APassExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivisionExpression8(ADivisionExpression8 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression8(APassExpression8 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExponentialExpression9(AExponentialExpression9 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression9(APassExpression9 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParanthesisExpression10(AParanthesisExpression10 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression10(APassExpression10 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegativeExpression11(ANegativeExpression11 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression11(APassExpression11 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntOperand(AIntOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatOperand(AFloatOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivision(TDivision node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTExponent(TExponent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNottoken(TNottoken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquivalence(TEquivalence node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreater(TGreater node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLess(TLess node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterequal(TGreaterequal node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessequal(TLessequal node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenparanthesis(TOpenparanthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCloseparanthesis(TCloseparanthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenbracket(TOpenbracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosebracket(TClosebracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpencurly(TOpencurly node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosecurly(TClosecurly node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTUnderscore(TUnderscore node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInttype(TInttype node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstint(TConstint node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloattype(TFloattype node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstfloat(TConstfloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTChartype(TChartype node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstchar(TConstchar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFunction(TFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetMainFunction() != null)
        {
            node.GetMainFunction().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutASingleStatements(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InADefineStatement(ADefineStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADefineStatement(ADefineStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADefineStatement(ADefineStatement node)
    {
        InADefineStatement(node);
        if(node.GetFunctionDefineStatement() != null)
        {
            node.GetFunctionDefineStatement().Apply(this);
        }
        OutADefineStatement(node);
    }
    public virtual void InAConstantStatement(AConstantStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantStatement(AConstantStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantStatement(AConstantStatement node)
    {
        InAConstantStatement(node);
        if(node.GetConstantDeclaration() != null)
        {
            node.GetConstantDeclaration().Apply(this);
        }
        OutAConstantStatement(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetIfElseConditional() != null)
        {
            node.GetIfElseConditional().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetWhileLoop() != null)
        {
            node.GetWhileLoop().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAMainFunction(AMainFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainFunction(AMainFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainFunction(AMainFunction node)
    {
        InAMainFunction(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetOpenparanthesis() != null)
        {
            node.GetOpenparanthesis().Apply(this);
        }
        if(node.GetCloseparanthesis() != null)
        {
            node.GetCloseparanthesis().Apply(this);
        }
        if(node.GetOpencurly() != null)
        {
            node.GetOpencurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosecurly() != null)
        {
            node.GetClosecurly().Apply(this);
        }
        OutAMainFunction(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenparanthesis() != null)
        {
            node.GetOpenparanthesis().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetCloseparanthesis() != null)
        {
            node.GetCloseparanthesis().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InAFunctionDefineStatement(AFunctionDefineStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionDefineStatement(AFunctionDefineStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionDefineStatement(AFunctionDefineStatement node)
    {
        InAFunctionDefineStatement(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenparanthesis() != null)
        {
            node.GetOpenparanthesis().Apply(this);
        }
        if(node.GetDefineParameters() != null)
        {
            node.GetDefineParameters().Apply(this);
        }
        if(node.GetCloseparanthesis() != null)
        {
            node.GetCloseparanthesis().Apply(this);
        }
        if(node.GetOpencurly() != null)
        {
            node.GetOpencurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosecurly() != null)
        {
            node.GetClosecurly().Apply(this);
        }
        OutAFunctionDefineStatement(node);
    }
    public virtual void InAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        InAMultipleDefineParameters(node);
        if(node.GetDefineParameter() != null)
        {
            node.GetDefineParameter().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetDefineParameters() != null)
        {
            node.GetDefineParameters().Apply(this);
        }
        OutAMultipleDefineParameters(node);
    }
    public virtual void InASingleDefineParameters(ASingleDefineParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleDefineParameters(ASingleDefineParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleDefineParameters(ASingleDefineParameters node)
    {
        InASingleDefineParameters(node);
        if(node.GetDefineParameter() != null)
        {
            node.GetDefineParameter().Apply(this);
        }
        OutASingleDefineParameters(node);
    }
    public virtual void InANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        InANoParametersDefineParameters(node);
        OutANoParametersDefineParameters(node);
    }
    public virtual void InAIntDefineParameter(AIntDefineParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntDefineParameter(AIntDefineParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntDefineParameter(AIntDefineParameter node)
    {
        InAIntDefineParameter(node);
        if(node.GetInttype() != null)
        {
            node.GetInttype().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIntDefineParameter(node);
    }
    public virtual void InAFloatDefineParameter(AFloatDefineParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatDefineParameter(AFloatDefineParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatDefineParameter(AFloatDefineParameter node)
    {
        InAFloatDefineParameter(node);
        if(node.GetFloattype() != null)
        {
            node.GetFloattype().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFloatDefineParameter(node);
    }
    public virtual void InACharDefineParameter(ACharDefineParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharDefineParameter(ACharDefineParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseACharDefineParameter(ACharDefineParameter node)
    {
        InACharDefineParameter(node);
        if(node.GetChartype() != null)
        {
            node.GetChartype().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutACharDefineParameter(node);
    }
    public virtual void InAIntAndFloatDeclareDeclareStatement(AIntAndFloatDeclareDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntAndFloatDeclareDeclareStatement(AIntAndFloatDeclareDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntAndFloatDeclareDeclareStatement(AIntAndFloatDeclareDeclareStatement node)
    {
        InAIntAndFloatDeclareDeclareStatement(node);
        if(node.GetTypeId() != null)
        {
            node.GetTypeId().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAIntAndFloatDeclareDeclareStatement(node);
    }
    public virtual void InACharDeclareDeclareStatement(ACharDeclareDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharDeclareDeclareStatement(ACharDeclareDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACharDeclareDeclareStatement(ACharDeclareDeclareStatement node)
    {
        InACharDeclareDeclareStatement(node);
        if(node.GetTypeId() != null)
        {
            node.GetTypeId().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutACharDeclareDeclareStatement(node);
    }
    public virtual void InAIntTypeId(AIntTypeId node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntTypeId(AIntTypeId node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntTypeId(AIntTypeId node)
    {
        InAIntTypeId(node);
        if(node.GetInttype() != null)
        {
            node.GetInttype().Apply(this);
        }
        OutAIntTypeId(node);
    }
    public virtual void InAFloatTypeId(AFloatTypeId node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatTypeId(AFloatTypeId node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatTypeId(AFloatTypeId node)
    {
        InAFloatTypeId(node);
        if(node.GetFloattype() != null)
        {
            node.GetFloattype().Apply(this);
        }
        OutAFloatTypeId(node);
    }
    public virtual void InACharTypeId(ACharTypeId node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharTypeId(ACharTypeId node)
    {
        DefaultOut(node);
    }

    public override void CaseACharTypeId(ACharTypeId node)
    {
        InACharTypeId(node);
        if(node.GetChartype() != null)
        {
            node.GetChartype().Apply(this);
        }
        OutACharTypeId(node);
    }
    public virtual void InAIntAndFloatDeclareConstantDeclaration(AIntAndFloatDeclareConstantDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntAndFloatDeclareConstantDeclaration(AIntAndFloatDeclareConstantDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntAndFloatDeclareConstantDeclaration(AIntAndFloatDeclareConstantDeclaration node)
    {
        InAIntAndFloatDeclareConstantDeclaration(node);
        if(node.GetConstTypeId() != null)
        {
            node.GetConstTypeId().Apply(this);
        }
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAIntAndFloatDeclareConstantDeclaration(node);
    }
    public virtual void InACharDeclareConstantDeclaration(ACharDeclareConstantDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharDeclareConstantDeclaration(ACharDeclareConstantDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseACharDeclareConstantDeclaration(ACharDeclareConstantDeclaration node)
    {
        InACharDeclareConstantDeclaration(node);
        if(node.GetConstTypeId() != null)
        {
            node.GetConstTypeId().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutACharDeclareConstantDeclaration(node);
    }
    public virtual void InAIntConstTypeId(AIntConstTypeId node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntConstTypeId(AIntConstTypeId node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntConstTypeId(AIntConstTypeId node)
    {
        InAIntConstTypeId(node);
        if(node.GetConstint() != null)
        {
            node.GetConstint().Apply(this);
        }
        OutAIntConstTypeId(node);
    }
    public virtual void InAFloatConstTypeId(AFloatConstTypeId node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatConstTypeId(AFloatConstTypeId node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatConstTypeId(AFloatConstTypeId node)
    {
        InAFloatConstTypeId(node);
        if(node.GetConstfloat() != null)
        {
            node.GetConstfloat().Apply(this);
        }
        OutAFloatConstTypeId(node);
    }
    public virtual void InACharConstTypeId(ACharConstTypeId node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharConstTypeId(ACharConstTypeId node)
    {
        DefaultOut(node);
    }

    public override void CaseACharConstTypeId(ACharConstTypeId node)
    {
        InACharConstTypeId(node);
        if(node.GetConstchar() != null)
        {
            node.GetConstchar().Apply(this);
        }
        OutACharConstTypeId(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InANoParameterParameters(ANoParameterParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParameterParameters(ANoParameterParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParameterParameters(ANoParameterParameters node)
    {
        InANoParameterParameters(node);
        OutANoParameterParameters(node);
    }
    public virtual void InAParameter(AParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameter(AParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameter(AParameter node)
    {
        InAParameter(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAParameter(node);
    }
    public virtual void InAIfElseConditional(AIfElseConditional node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElseConditional(AIfElseConditional node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElseConditional(AIfElseConditional node)
    {
        InAIfElseConditional(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetConditionals() != null)
        {
            node.GetConditionals().Apply(this);
        }
        if(node.GetIfopen() != null)
        {
            node.GetIfopen().Apply(this);
        }
        if(node.GetIfstatements() != null)
        {
            node.GetIfstatements().Apply(this);
        }
        if(node.GetIfclose() != null)
        {
            node.GetIfclose().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetElseopen() != null)
        {
            node.GetElseopen().Apply(this);
        }
        if(node.GetElsestatements() != null)
        {
            node.GetElsestatements().Apply(this);
        }
        if(node.GetElseclose() != null)
        {
            node.GetElseclose().Apply(this);
        }
        OutAIfElseConditional(node);
    }
    public virtual void InAWhileLoop(AWhileLoop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileLoop(AWhileLoop node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileLoop(AWhileLoop node)
    {
        InAWhileLoop(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetConditionals() != null)
        {
            node.GetConditionals().Apply(this);
        }
        if(node.GetOpencurly() != null)
        {
            node.GetOpencurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosecurly() != null)
        {
            node.GetClosecurly().Apply(this);
        }
        OutAWhileLoop(node);
    }
    public virtual void InAMultipleConditionals(AMultipleConditionals node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleConditionals(AMultipleConditionals node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleConditionals(AMultipleConditionals node)
    {
        InAMultipleConditionals(node);
        if(node.GetOpenparanthesis() != null)
        {
            node.GetOpenparanthesis().Apply(this);
        }
        if(node.GetConditional() != null)
        {
            node.GetConditional().Apply(this);
        }
        if(node.GetBooleanToken() != null)
        {
            node.GetBooleanToken().Apply(this);
        }
        if(node.GetConditionals() != null)
        {
            node.GetConditionals().Apply(this);
        }
        if(node.GetCloseparanthesis() != null)
        {
            node.GetCloseparanthesis().Apply(this);
        }
        OutAMultipleConditionals(node);
    }
    public virtual void InASingleConditionals(ASingleConditionals node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleConditionals(ASingleConditionals node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleConditionals(ASingleConditionals node)
    {
        InASingleConditionals(node);
        if(node.GetConditional() != null)
        {
            node.GetConditional().Apply(this);
        }
        OutASingleConditionals(node);
    }
    public virtual void InAConditional(AConditional node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConditional(AConditional node)
    {
        DefaultOut(node);
    }

    public override void CaseAConditional(AConditional node)
    {
        InAConditional(node);
        if(node.GetOpenparanthesis() != null)
        {
            node.GetOpenparanthesis().Apply(this);
        }
        if(node.GetVar1() != null)
        {
            node.GetVar1().Apply(this);
        }
        if(node.GetConditionalToken() != null)
        {
            node.GetConditionalToken().Apply(this);
        }
        if(node.GetVar2() != null)
        {
            node.GetVar2().Apply(this);
        }
        if(node.GetCloseparanthesis() != null)
        {
            node.GetCloseparanthesis().Apply(this);
        }
        OutAConditional(node);
    }
    public virtual void InAEqualConditionalToken(AEqualConditionalToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualConditionalToken(AEqualConditionalToken node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualConditionalToken(AEqualConditionalToken node)
    {
        InAEqualConditionalToken(node);
        if(node.GetEquivalence() != null)
        {
            node.GetEquivalence().Apply(this);
        }
        OutAEqualConditionalToken(node);
    }
    public virtual void InANotConditionalToken(ANotConditionalToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotConditionalToken(ANotConditionalToken node)
    {
        DefaultOut(node);
    }

    public override void CaseANotConditionalToken(ANotConditionalToken node)
    {
        InANotConditionalToken(node);
        if(node.GetNottoken() != null)
        {
            node.GetNottoken().Apply(this);
        }
        OutANotConditionalToken(node);
    }
    public virtual void InAGreaterConditionalToken(AGreaterConditionalToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterConditionalToken(AGreaterConditionalToken node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterConditionalToken(AGreaterConditionalToken node)
    {
        InAGreaterConditionalToken(node);
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        OutAGreaterConditionalToken(node);
    }
    public virtual void InALessConditionalToken(ALessConditionalToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessConditionalToken(ALessConditionalToken node)
    {
        DefaultOut(node);
    }

    public override void CaseALessConditionalToken(ALessConditionalToken node)
    {
        InALessConditionalToken(node);
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        OutALessConditionalToken(node);
    }
    public virtual void InAGreaterOrEqualConditionalToken(AGreaterOrEqualConditionalToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterOrEqualConditionalToken(AGreaterOrEqualConditionalToken node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterOrEqualConditionalToken(AGreaterOrEqualConditionalToken node)
    {
        InAGreaterOrEqualConditionalToken(node);
        if(node.GetGreaterequal() != null)
        {
            node.GetGreaterequal().Apply(this);
        }
        OutAGreaterOrEqualConditionalToken(node);
    }
    public virtual void InALessOrEqualConditionalToken(ALessOrEqualConditionalToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessOrEqualConditionalToken(ALessOrEqualConditionalToken node)
    {
        DefaultOut(node);
    }

    public override void CaseALessOrEqualConditionalToken(ALessOrEqualConditionalToken node)
    {
        InALessOrEqualConditionalToken(node);
        if(node.GetLessequal() != null)
        {
            node.GetLessequal().Apply(this);
        }
        OutALessOrEqualConditionalToken(node);
    }
    public virtual void InAAndtokenBooleanToken(AAndtokenBooleanToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndtokenBooleanToken(AAndtokenBooleanToken node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndtokenBooleanToken(AAndtokenBooleanToken node)
    {
        InAAndtokenBooleanToken(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAAndtokenBooleanToken(node);
    }
    public virtual void InAOrtokenBooleanToken(AOrtokenBooleanToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrtokenBooleanToken(AOrtokenBooleanToken node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrtokenBooleanToken(AOrtokenBooleanToken node)
    {
        InAOrtokenBooleanToken(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutAOrtokenBooleanToken(node);
    }
    public virtual void InAIntAndFloatAssignAssignStatement(AIntAndFloatAssignAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntAndFloatAssignAssignStatement(AIntAndFloatAssignAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntAndFloatAssignAssignStatement(AIntAndFloatAssignAssignStatement node)
    {
        InAIntAndFloatAssignAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAIntAndFloatAssignAssignStatement(node);
    }
    public virtual void InAStringAssignAssignStatement(AStringAssignAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringAssignAssignStatement(AStringAssignAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringAssignAssignStatement(AStringAssignAssignStatement node)
    {
        InAStringAssignAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAStringAssignAssignStatement(node);
    }
    public virtual void InALogicalorExpression(ALogicalorExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutALogicalorExpression(ALogicalorExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseALogicalorExpression(ALogicalorExpression node)
    {
        InALogicalorExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutALogicalorExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InALogicalandExpression2(ALogicalandExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALogicalandExpression2(ALogicalandExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseALogicalandExpression2(ALogicalandExpression2 node)
    {
        InALogicalandExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutALogicalandExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAEqualExpression3(AEqualExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualExpression3(AEqualExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualExpression3(AEqualExpression3 node)
    {
        InAEqualExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetEquivalence() != null)
        {
            node.GetEquivalence().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAEqualExpression3(node);
    }
    public virtual void InANotequalExpression3(ANotequalExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotequalExpression3(ANotequalExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotequalExpression3(ANotequalExpression3 node)
    {
        InANotequalExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetNottoken() != null)
        {
            node.GetNottoken().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutANotequalExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InALessthanExpression4(ALessthanExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessthanExpression4(ALessthanExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessthanExpression4(ALessthanExpression4 node)
    {
        InALessthanExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutALessthanExpression4(node);
    }
    public virtual void InAGreaterthanExpression4(AGreaterthanExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterthanExpression4(AGreaterthanExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterthanExpression4(AGreaterthanExpression4 node)
    {
        InAGreaterthanExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAGreaterthanExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAAddExpression5(AAddExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression5(AAddExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression5(AAddExpression5 node)
    {
        InAAddExpression5(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAAddExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InAMinusExpression6(AMinusExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusExpression6(AMinusExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusExpression6(AMinusExpression6 node)
    {
        InAMinusExpression6(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAMinusExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InAMultiplyExpression7(AMultiplyExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression7(AMultiplyExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression7(AMultiplyExpression7 node)
    {
        InAMultiplyExpression7(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression8() != null)
        {
            node.GetExpression8().Apply(this);
        }
        OutAMultiplyExpression7(node);
    }
    public virtual void InAPassExpression7(APassExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression7(APassExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression7(APassExpression7 node)
    {
        InAPassExpression7(node);
        if(node.GetExpression8() != null)
        {
            node.GetExpression8().Apply(this);
        }
        OutAPassExpression7(node);
    }
    public virtual void InADivisionExpression8(ADivisionExpression8 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivisionExpression8(ADivisionExpression8 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivisionExpression8(ADivisionExpression8 node)
    {
        InADivisionExpression8(node);
        if(node.GetExpression8() != null)
        {
            node.GetExpression8().Apply(this);
        }
        if(node.GetDivision() != null)
        {
            node.GetDivision().Apply(this);
        }
        if(node.GetExpression9() != null)
        {
            node.GetExpression9().Apply(this);
        }
        OutADivisionExpression8(node);
    }
    public virtual void InAPassExpression8(APassExpression8 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression8(APassExpression8 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression8(APassExpression8 node)
    {
        InAPassExpression8(node);
        if(node.GetExpression9() != null)
        {
            node.GetExpression9().Apply(this);
        }
        OutAPassExpression8(node);
    }
    public virtual void InAExponentialExpression9(AExponentialExpression9 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExponentialExpression9(AExponentialExpression9 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExponentialExpression9(AExponentialExpression9 node)
    {
        InAExponentialExpression9(node);
        if(node.GetExpression9() != null)
        {
            node.GetExpression9().Apply(this);
        }
        if(node.GetExponent() != null)
        {
            node.GetExponent().Apply(this);
        }
        if(node.GetExpression10() != null)
        {
            node.GetExpression10().Apply(this);
        }
        OutAExponentialExpression9(node);
    }
    public virtual void InAPassExpression9(APassExpression9 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression9(APassExpression9 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression9(APassExpression9 node)
    {
        InAPassExpression9(node);
        if(node.GetExpression10() != null)
        {
            node.GetExpression10().Apply(this);
        }
        OutAPassExpression9(node);
    }
    public virtual void InAParanthesisExpression10(AParanthesisExpression10 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParanthesisExpression10(AParanthesisExpression10 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParanthesisExpression10(AParanthesisExpression10 node)
    {
        InAParanthesisExpression10(node);
        if(node.GetOpenparanthesis() != null)
        {
            node.GetOpenparanthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetCloseparanthesis() != null)
        {
            node.GetCloseparanthesis().Apply(this);
        }
        OutAParanthesisExpression10(node);
    }
    public virtual void InAPassExpression10(APassExpression10 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression10(APassExpression10 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression10(APassExpression10 node)
    {
        InAPassExpression10(node);
        if(node.GetExpression11() != null)
        {
            node.GetExpression11().Apply(this);
        }
        OutAPassExpression10(node);
    }
    public virtual void InANegativeExpression11(ANegativeExpression11 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression11(ANegativeExpression11 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression11(ANegativeExpression11 node)
    {
        InANegativeExpression11(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutANegativeExpression11(node);
    }
    public virtual void InAPassExpression11(APassExpression11 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression11(APassExpression11 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression11(APassExpression11 node)
    {
        InAPassExpression11(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression11(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainFunction() != null)
        {
            node.GetMainFunction().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutASingleStatements(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InADefineStatement(ADefineStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADefineStatement(ADefineStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADefineStatement(ADefineStatement node)
    {
        InADefineStatement(node);
        if(node.GetFunctionDefineStatement() != null)
        {
            node.GetFunctionDefineStatement().Apply(this);
        }
        OutADefineStatement(node);
    }
    public virtual void InAConstantStatement(AConstantStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantStatement(AConstantStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantStatement(AConstantStatement node)
    {
        InAConstantStatement(node);
        if(node.GetConstantDeclaration() != null)
        {
            node.GetConstantDeclaration().Apply(this);
        }
        OutAConstantStatement(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetIfElseConditional() != null)
        {
            node.GetIfElseConditional().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetWhileLoop() != null)
        {
            node.GetWhileLoop().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAMainFunction(AMainFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainFunction(AMainFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainFunction(AMainFunction node)
    {
        InAMainFunction(node);
        if(node.GetClosecurly() != null)
        {
            node.GetClosecurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpencurly() != null)
        {
            node.GetOpencurly().Apply(this);
        }
        if(node.GetCloseparanthesis() != null)
        {
            node.GetCloseparanthesis().Apply(this);
        }
        if(node.GetOpenparanthesis() != null)
        {
            node.GetOpenparanthesis().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAMainFunction(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCloseparanthesis() != null)
        {
            node.GetCloseparanthesis().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetOpenparanthesis() != null)
        {
            node.GetOpenparanthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InAFunctionDefineStatement(AFunctionDefineStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionDefineStatement(AFunctionDefineStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionDefineStatement(AFunctionDefineStatement node)
    {
        InAFunctionDefineStatement(node);
        if(node.GetClosecurly() != null)
        {
            node.GetClosecurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpencurly() != null)
        {
            node.GetOpencurly().Apply(this);
        }
        if(node.GetCloseparanthesis() != null)
        {
            node.GetCloseparanthesis().Apply(this);
        }
        if(node.GetDefineParameters() != null)
        {
            node.GetDefineParameters().Apply(this);
        }
        if(node.GetOpenparanthesis() != null)
        {
            node.GetOpenparanthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutAFunctionDefineStatement(node);
    }
    public virtual void InAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleDefineParameters(AMultipleDefineParameters node)
    {
        InAMultipleDefineParameters(node);
        if(node.GetDefineParameters() != null)
        {
            node.GetDefineParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetDefineParameter() != null)
        {
            node.GetDefineParameter().Apply(this);
        }
        OutAMultipleDefineParameters(node);
    }
    public virtual void InASingleDefineParameters(ASingleDefineParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleDefineParameters(ASingleDefineParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleDefineParameters(ASingleDefineParameters node)
    {
        InASingleDefineParameters(node);
        if(node.GetDefineParameter() != null)
        {
            node.GetDefineParameter().Apply(this);
        }
        OutASingleDefineParameters(node);
    }
    public virtual void InANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParametersDefineParameters(ANoParametersDefineParameters node)
    {
        InANoParametersDefineParameters(node);
        OutANoParametersDefineParameters(node);
    }
    public virtual void InAIntDefineParameter(AIntDefineParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntDefineParameter(AIntDefineParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntDefineParameter(AIntDefineParameter node)
    {
        InAIntDefineParameter(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetInttype() != null)
        {
            node.GetInttype().Apply(this);
        }
        OutAIntDefineParameter(node);
    }
    public virtual void InAFloatDefineParameter(AFloatDefineParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatDefineParameter(AFloatDefineParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatDefineParameter(AFloatDefineParameter node)
    {
        InAFloatDefineParameter(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetFloattype() != null)
        {
            node.GetFloattype().Apply(this);
        }
        OutAFloatDefineParameter(node);
    }
    public virtual void InACharDefineParameter(ACharDefineParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharDefineParameter(ACharDefineParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseACharDefineParameter(ACharDefineParameter node)
    {
        InACharDefineParameter(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetChartype() != null)
        {
            node.GetChartype().Apply(this);
        }
        OutACharDefineParameter(node);
    }
    public virtual void InAIntAndFloatDeclareDeclareStatement(AIntAndFloatDeclareDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntAndFloatDeclareDeclareStatement(AIntAndFloatDeclareDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntAndFloatDeclareDeclareStatement(AIntAndFloatDeclareDeclareStatement node)
    {
        InAIntAndFloatDeclareDeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetTypeId() != null)
        {
            node.GetTypeId().Apply(this);
        }
        OutAIntAndFloatDeclareDeclareStatement(node);
    }
    public virtual void InACharDeclareDeclareStatement(ACharDeclareDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharDeclareDeclareStatement(ACharDeclareDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACharDeclareDeclareStatement(ACharDeclareDeclareStatement node)
    {
        InACharDeclareDeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetTypeId() != null)
        {
            node.GetTypeId().Apply(this);
        }
        OutACharDeclareDeclareStatement(node);
    }
    public virtual void InAIntTypeId(AIntTypeId node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntTypeId(AIntTypeId node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntTypeId(AIntTypeId node)
    {
        InAIntTypeId(node);
        if(node.GetInttype() != null)
        {
            node.GetInttype().Apply(this);
        }
        OutAIntTypeId(node);
    }
    public virtual void InAFloatTypeId(AFloatTypeId node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatTypeId(AFloatTypeId node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatTypeId(AFloatTypeId node)
    {
        InAFloatTypeId(node);
        if(node.GetFloattype() != null)
        {
            node.GetFloattype().Apply(this);
        }
        OutAFloatTypeId(node);
    }
    public virtual void InACharTypeId(ACharTypeId node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharTypeId(ACharTypeId node)
    {
        DefaultOut(node);
    }

    public override void CaseACharTypeId(ACharTypeId node)
    {
        InACharTypeId(node);
        if(node.GetChartype() != null)
        {
            node.GetChartype().Apply(this);
        }
        OutACharTypeId(node);
    }
    public virtual void InAIntAndFloatDeclareConstantDeclaration(AIntAndFloatDeclareConstantDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntAndFloatDeclareConstantDeclaration(AIntAndFloatDeclareConstantDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntAndFloatDeclareConstantDeclaration(AIntAndFloatDeclareConstantDeclaration node)
    {
        InAIntAndFloatDeclareConstantDeclaration(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        if(node.GetConstTypeId() != null)
        {
            node.GetConstTypeId().Apply(this);
        }
        OutAIntAndFloatDeclareConstantDeclaration(node);
    }
    public virtual void InACharDeclareConstantDeclaration(ACharDeclareConstantDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharDeclareConstantDeclaration(ACharDeclareConstantDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseACharDeclareConstantDeclaration(ACharDeclareConstantDeclaration node)
    {
        InACharDeclareConstantDeclaration(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetConstTypeId() != null)
        {
            node.GetConstTypeId().Apply(this);
        }
        OutACharDeclareConstantDeclaration(node);
    }
    public virtual void InAIntConstTypeId(AIntConstTypeId node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntConstTypeId(AIntConstTypeId node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntConstTypeId(AIntConstTypeId node)
    {
        InAIntConstTypeId(node);
        if(node.GetConstint() != null)
        {
            node.GetConstint().Apply(this);
        }
        OutAIntConstTypeId(node);
    }
    public virtual void InAFloatConstTypeId(AFloatConstTypeId node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatConstTypeId(AFloatConstTypeId node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatConstTypeId(AFloatConstTypeId node)
    {
        InAFloatConstTypeId(node);
        if(node.GetConstfloat() != null)
        {
            node.GetConstfloat().Apply(this);
        }
        OutAFloatConstTypeId(node);
    }
    public virtual void InACharConstTypeId(ACharConstTypeId node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharConstTypeId(ACharConstTypeId node)
    {
        DefaultOut(node);
    }

    public override void CaseACharConstTypeId(ACharConstTypeId node)
    {
        InACharConstTypeId(node);
        if(node.GetConstchar() != null)
        {
            node.GetConstchar().Apply(this);
        }
        OutACharConstTypeId(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InANoParameterParameters(ANoParameterParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParameterParameters(ANoParameterParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParameterParameters(ANoParameterParameters node)
    {
        InANoParameterParameters(node);
        OutANoParameterParameters(node);
    }
    public virtual void InAParameter(AParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameter(AParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameter(AParameter node)
    {
        InAParameter(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAParameter(node);
    }
    public virtual void InAIfElseConditional(AIfElseConditional node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElseConditional(AIfElseConditional node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElseConditional(AIfElseConditional node)
    {
        InAIfElseConditional(node);
        if(node.GetElseclose() != null)
        {
            node.GetElseclose().Apply(this);
        }
        if(node.GetElsestatements() != null)
        {
            node.GetElsestatements().Apply(this);
        }
        if(node.GetElseopen() != null)
        {
            node.GetElseopen().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetIfclose() != null)
        {
            node.GetIfclose().Apply(this);
        }
        if(node.GetIfstatements() != null)
        {
            node.GetIfstatements().Apply(this);
        }
        if(node.GetIfopen() != null)
        {
            node.GetIfopen().Apply(this);
        }
        if(node.GetConditionals() != null)
        {
            node.GetConditionals().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAIfElseConditional(node);
    }
    public virtual void InAWhileLoop(AWhileLoop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileLoop(AWhileLoop node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileLoop(AWhileLoop node)
    {
        InAWhileLoop(node);
        if(node.GetClosecurly() != null)
        {
            node.GetClosecurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpencurly() != null)
        {
            node.GetOpencurly().Apply(this);
        }
        if(node.GetConditionals() != null)
        {
            node.GetConditionals().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhileLoop(node);
    }
    public virtual void InAMultipleConditionals(AMultipleConditionals node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleConditionals(AMultipleConditionals node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleConditionals(AMultipleConditionals node)
    {
        InAMultipleConditionals(node);
        if(node.GetCloseparanthesis() != null)
        {
            node.GetCloseparanthesis().Apply(this);
        }
        if(node.GetConditionals() != null)
        {
            node.GetConditionals().Apply(this);
        }
        if(node.GetBooleanToken() != null)
        {
            node.GetBooleanToken().Apply(this);
        }
        if(node.GetConditional() != null)
        {
            node.GetConditional().Apply(this);
        }
        if(node.GetOpenparanthesis() != null)
        {
            node.GetOpenparanthesis().Apply(this);
        }
        OutAMultipleConditionals(node);
    }
    public virtual void InASingleConditionals(ASingleConditionals node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleConditionals(ASingleConditionals node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleConditionals(ASingleConditionals node)
    {
        InASingleConditionals(node);
        if(node.GetConditional() != null)
        {
            node.GetConditional().Apply(this);
        }
        OutASingleConditionals(node);
    }
    public virtual void InAConditional(AConditional node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConditional(AConditional node)
    {
        DefaultOut(node);
    }

    public override void CaseAConditional(AConditional node)
    {
        InAConditional(node);
        if(node.GetCloseparanthesis() != null)
        {
            node.GetCloseparanthesis().Apply(this);
        }
        if(node.GetVar2() != null)
        {
            node.GetVar2().Apply(this);
        }
        if(node.GetConditionalToken() != null)
        {
            node.GetConditionalToken().Apply(this);
        }
        if(node.GetVar1() != null)
        {
            node.GetVar1().Apply(this);
        }
        if(node.GetOpenparanthesis() != null)
        {
            node.GetOpenparanthesis().Apply(this);
        }
        OutAConditional(node);
    }
    public virtual void InAEqualConditionalToken(AEqualConditionalToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualConditionalToken(AEqualConditionalToken node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualConditionalToken(AEqualConditionalToken node)
    {
        InAEqualConditionalToken(node);
        if(node.GetEquivalence() != null)
        {
            node.GetEquivalence().Apply(this);
        }
        OutAEqualConditionalToken(node);
    }
    public virtual void InANotConditionalToken(ANotConditionalToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotConditionalToken(ANotConditionalToken node)
    {
        DefaultOut(node);
    }

    public override void CaseANotConditionalToken(ANotConditionalToken node)
    {
        InANotConditionalToken(node);
        if(node.GetNottoken() != null)
        {
            node.GetNottoken().Apply(this);
        }
        OutANotConditionalToken(node);
    }
    public virtual void InAGreaterConditionalToken(AGreaterConditionalToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterConditionalToken(AGreaterConditionalToken node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterConditionalToken(AGreaterConditionalToken node)
    {
        InAGreaterConditionalToken(node);
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        OutAGreaterConditionalToken(node);
    }
    public virtual void InALessConditionalToken(ALessConditionalToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessConditionalToken(ALessConditionalToken node)
    {
        DefaultOut(node);
    }

    public override void CaseALessConditionalToken(ALessConditionalToken node)
    {
        InALessConditionalToken(node);
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        OutALessConditionalToken(node);
    }
    public virtual void InAGreaterOrEqualConditionalToken(AGreaterOrEqualConditionalToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterOrEqualConditionalToken(AGreaterOrEqualConditionalToken node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterOrEqualConditionalToken(AGreaterOrEqualConditionalToken node)
    {
        InAGreaterOrEqualConditionalToken(node);
        if(node.GetGreaterequal() != null)
        {
            node.GetGreaterequal().Apply(this);
        }
        OutAGreaterOrEqualConditionalToken(node);
    }
    public virtual void InALessOrEqualConditionalToken(ALessOrEqualConditionalToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessOrEqualConditionalToken(ALessOrEqualConditionalToken node)
    {
        DefaultOut(node);
    }

    public override void CaseALessOrEqualConditionalToken(ALessOrEqualConditionalToken node)
    {
        InALessOrEqualConditionalToken(node);
        if(node.GetLessequal() != null)
        {
            node.GetLessequal().Apply(this);
        }
        OutALessOrEqualConditionalToken(node);
    }
    public virtual void InAAndtokenBooleanToken(AAndtokenBooleanToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndtokenBooleanToken(AAndtokenBooleanToken node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndtokenBooleanToken(AAndtokenBooleanToken node)
    {
        InAAndtokenBooleanToken(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAAndtokenBooleanToken(node);
    }
    public virtual void InAOrtokenBooleanToken(AOrtokenBooleanToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrtokenBooleanToken(AOrtokenBooleanToken node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrtokenBooleanToken(AOrtokenBooleanToken node)
    {
        InAOrtokenBooleanToken(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutAOrtokenBooleanToken(node);
    }
    public virtual void InAIntAndFloatAssignAssignStatement(AIntAndFloatAssignAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntAndFloatAssignAssignStatement(AIntAndFloatAssignAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntAndFloatAssignAssignStatement(AIntAndFloatAssignAssignStatement node)
    {
        InAIntAndFloatAssignAssignStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIntAndFloatAssignAssignStatement(node);
    }
    public virtual void InAStringAssignAssignStatement(AStringAssignAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringAssignAssignStatement(AStringAssignAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringAssignAssignStatement(AStringAssignAssignStatement node)
    {
        InAStringAssignAssignStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAStringAssignAssignStatement(node);
    }
    public virtual void InALogicalorExpression(ALogicalorExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutALogicalorExpression(ALogicalorExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseALogicalorExpression(ALogicalorExpression node)
    {
        InALogicalorExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutALogicalorExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InALogicalandExpression2(ALogicalandExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALogicalandExpression2(ALogicalandExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseALogicalandExpression2(ALogicalandExpression2 node)
    {
        InALogicalandExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutALogicalandExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAEqualExpression3(AEqualExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualExpression3(AEqualExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualExpression3(AEqualExpression3 node)
    {
        InAEqualExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetEquivalence() != null)
        {
            node.GetEquivalence().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAEqualExpression3(node);
    }
    public virtual void InANotequalExpression3(ANotequalExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotequalExpression3(ANotequalExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotequalExpression3(ANotequalExpression3 node)
    {
        InANotequalExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetNottoken() != null)
        {
            node.GetNottoken().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutANotequalExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InALessthanExpression4(ALessthanExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessthanExpression4(ALessthanExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessthanExpression4(ALessthanExpression4 node)
    {
        InALessthanExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutALessthanExpression4(node);
    }
    public virtual void InAGreaterthanExpression4(AGreaterthanExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterthanExpression4(AGreaterthanExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterthanExpression4(AGreaterthanExpression4 node)
    {
        InAGreaterthanExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAGreaterthanExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAAddExpression5(AAddExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression5(AAddExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression5(AAddExpression5 node)
    {
        InAAddExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAAddExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InAMinusExpression6(AMinusExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusExpression6(AMinusExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusExpression6(AMinusExpression6 node)
    {
        InAMinusExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAMinusExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InAMultiplyExpression7(AMultiplyExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression7(AMultiplyExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression7(AMultiplyExpression7 node)
    {
        InAMultiplyExpression7(node);
        if(node.GetExpression8() != null)
        {
            node.GetExpression8().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAMultiplyExpression7(node);
    }
    public virtual void InAPassExpression7(APassExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression7(APassExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression7(APassExpression7 node)
    {
        InAPassExpression7(node);
        if(node.GetExpression8() != null)
        {
            node.GetExpression8().Apply(this);
        }
        OutAPassExpression7(node);
    }
    public virtual void InADivisionExpression8(ADivisionExpression8 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivisionExpression8(ADivisionExpression8 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivisionExpression8(ADivisionExpression8 node)
    {
        InADivisionExpression8(node);
        if(node.GetExpression9() != null)
        {
            node.GetExpression9().Apply(this);
        }
        if(node.GetDivision() != null)
        {
            node.GetDivision().Apply(this);
        }
        if(node.GetExpression8() != null)
        {
            node.GetExpression8().Apply(this);
        }
        OutADivisionExpression8(node);
    }
    public virtual void InAPassExpression8(APassExpression8 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression8(APassExpression8 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression8(APassExpression8 node)
    {
        InAPassExpression8(node);
        if(node.GetExpression9() != null)
        {
            node.GetExpression9().Apply(this);
        }
        OutAPassExpression8(node);
    }
    public virtual void InAExponentialExpression9(AExponentialExpression9 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExponentialExpression9(AExponentialExpression9 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExponentialExpression9(AExponentialExpression9 node)
    {
        InAExponentialExpression9(node);
        if(node.GetExpression10() != null)
        {
            node.GetExpression10().Apply(this);
        }
        if(node.GetExponent() != null)
        {
            node.GetExponent().Apply(this);
        }
        if(node.GetExpression9() != null)
        {
            node.GetExpression9().Apply(this);
        }
        OutAExponentialExpression9(node);
    }
    public virtual void InAPassExpression9(APassExpression9 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression9(APassExpression9 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression9(APassExpression9 node)
    {
        InAPassExpression9(node);
        if(node.GetExpression10() != null)
        {
            node.GetExpression10().Apply(this);
        }
        OutAPassExpression9(node);
    }
    public virtual void InAParanthesisExpression10(AParanthesisExpression10 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParanthesisExpression10(AParanthesisExpression10 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParanthesisExpression10(AParanthesisExpression10 node)
    {
        InAParanthesisExpression10(node);
        if(node.GetCloseparanthesis() != null)
        {
            node.GetCloseparanthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOpenparanthesis() != null)
        {
            node.GetOpenparanthesis().Apply(this);
        }
        OutAParanthesisExpression10(node);
    }
    public virtual void InAPassExpression10(APassExpression10 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression10(APassExpression10 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression10(APassExpression10 node)
    {
        InAPassExpression10(node);
        if(node.GetExpression11() != null)
        {
            node.GetExpression11().Apply(this);
        }
        OutAPassExpression10(node);
    }
    public virtual void InANegativeExpression11(ANegativeExpression11 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression11(ANegativeExpression11 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression11(ANegativeExpression11 node)
    {
        InANegativeExpression11(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegativeExpression11(node);
    }
    public virtual void InAPassExpression11(APassExpression11 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression11(APassExpression11 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression11(APassExpression11 node)
    {
        InAPassExpression11(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression11(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
}
} // namespace CS426.analysis
