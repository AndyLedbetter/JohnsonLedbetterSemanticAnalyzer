// This tells SableCC to put all of the code in a package called CS426
Package CS426;

// Helpers are sets that let you talk about multiple characters in the same way
Helpers
	whitespaces = ' ' | 9 | 10 | 13;
	natural = ['1' .. '9'];
	whole = ['0' + natural];
	letter = [['a' .. 'z'] + ['A' .. 'Z']];
	underscore = '_';
	comma = ',';
	quote = '"';
	new_line = 10;
	cr = 13; //carraige return
	all_newline = [new_line + cr];
	any_char = [0 .. 0xffff]; //All characters
	word_char = [[[any_char - '"'] - '\'] - all_newline];

// PEX 1 - Lexer Portion
Tokens

	//Operations
	assign = '=';
	plus = '+';
	multiply = '*';
	minus = '-';
	divide = '/';
	and = 'AND';
	or = 'OR';
	not = 'NOT';
	equals = '==';
	not_equals = '!=';
	lessthan = '<';
	greaterthan = '>';
	lessthanorequals = '<=';
	greaterthanorequals = '>=';
	comma = ',';
	dot = '.';
	openp = '(';
	closep = ')';
	quote = '"';
	underscore = '_';
	eol = ';';
	
	//Keywords
	define = 'def'; //define
	if = 'if'; //if
	else = 'else'; //else
	while = 'while'; //while (as long as)
	constant = 'const'; //constant
	main = 'CODE'; //main
	
	// Literals
	num = '0' | natural whole*; //integer
	fp = whole* '.' whole* (('e' | 'E') natural whole*)?; //floating point
	s = quote (word_char* | ('\' ('\' | '"')))* quote; //string

	//Identifiers
	id = underscore? letter+ underscore? letter* whole*;

	// Comments
	comment = '--' ([[0..0xffff] - [10 + 13]])*;

	// Whitespace
	blank = whitespaces+;

Ignored Tokens
	blank,  comment;


// PEX 2 - Parser Portion
Productions

	program = constants functions main_function;

	//Constants

	constants = {multiple} one_constant constants | {none};
	
	one_constant = {integer} constant id num eol | {floats} constant id fp eol; //declare constants

	//Functions

	functions = {multiple} function functions | {none};

	function = define id [oone]:openp function_arguments [cone]:closep [otwo]:openp statements [ctwo]:closep eol;

	function_arguments = {multiple} arguement comma function_arguments | {single} arguement | {none};

	arguement = {dec} [type]:id [varname]:id;

	//Main

	main_function = main openp statements closep eol;

	//Statements

	statements = {multiple} statement statements | {single} statement;

	statement = {declaration} declare_statement | {assignment} assign_statement | {call} function_call_statement | {if_else} elif_state | {while} while_state;

	assign_statement = id assign expression eol;

	declare_statement = [type]:id [varname]:id eol;

	function_call_statement = id openp parameters closep eol;

	function_declare_statement = function id [oone]:openp define_parameters [cone]:closep [otwo]:openp statements [ctwo]:closep;
	define_parameters = {multiple} define_parameter comma define_parameters | {single} define_parameter | {no_parameters};
	define_parameter = {int} num id | {float} fp id | {string} s id;
	
	elif_state = {just_if} if_state | {if_else} if_state else_state;

	if_state = if [oone]:openp conditional [cone]:closep [otwo]:openp statements [ctwo]:closep eol;

	else_state = else openp statements closep eol;

	while_state = while [oone]:openp conditional [cone]:closep [otwo]:openp statements [ctwo]:closep eol;

	parameters = {multiple} parameter comma parameters | {single} parameter | {no_parameter};
	parameter = expression;

	conditional = {single} expression | {no_conditional};

	//Expressions

	expression = {or} expression or expression1 | {pass} expression1;

	expression1 = {and} expression1 and expression2 | {pass} expression2;

	expression2 = {equals} expression2 equals expression3 | {not_equal} expression2 not_equals expression3 | {pass} expression3;

	expression3 = {greater_than_or_equals} expression3 greaterthanorequals expression4 | {less_than_or_equals} expression3 lessthanorequals expression4 | {less_than} expression3 lessthan expression4 | {greater_than} expression3 greaterthan expression4 | {pass} expression4;

	expression4 = {add} expression4 plus expression5 | {subtract} expression4 minus expression5 | {pass} expression5;

	expression5 = {multiply} expression5 multiply expression6 | {divide} expression5 divide expression6 | {pass} expression6;

	expression6 = {negative} minus expression7 | {not} not expression7 | {pass} expression7;

	expression7 = {parenthesis} openp expression closep | {pass} operand;

	operand = {int} num | {float} fp | {string} s | {variable} id;