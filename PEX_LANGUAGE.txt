// This tells SableCC to put all of the code in a package called CS426
Package CS426;

// Helpers are sets that let you talk about multiple characters in the same way
Helpers
	whitespaces = ' ' | 9 | 10 | 13;
	natural = ['1'..'9'];
	whole = ['0' + natural];
	letters = [['a'..'z'] + ['A'..'Z']];

// PEX 1 - Lexer Portion
Tokens
	assign = '=';
	plus = '+';
	minus = '-';
	// negation = '-'(natural whole*); //Professor said not to worry about negation rn
	mult = '*';
	division = '/';
	exponent = '^';
	and = '&&';
	or = '||';
	nottoken = '!=';
	equivalence = '==';
	greater = '>';
	less = '<';
	greaterequal = '>=';
	lessequal = '<=';
	eol = ';';
	openparanthesis = '(';
	closeparanthesis = ')';
	openbracket = '[';
	closebracket = ']';
	opencurly = '{';
	closecurly = '}';
	comma = ',';

	underscore = '_';

	//Types
	inttype = '$int';
	constint = '$const int';

	floattype = '$float';
	constfloat = '$const float';

	chartype = '$char';
	constchar = '$const char';

	//Identifiers
	id = (letters+)('_'?)(whole*);

	//Comments
	comment = '//' ([[0..0xffff] - [10+13]])*;

	//Literals
	integer = '0' | (natural whole*);
	float = (whole*)('.')(whole*)(('e') natural whole*)?;
	string = ('"')(letters* '/"'* ' '*)*('"');

	//Conditional
	if = '$if';
	else = '$else';

	//Iterativee
	while = '$while';

	//Function
	function = '$function';

	//Main
	main = '$main';

	// Whitespace
	blank = whitespaces+;

Ignored Tokens
	blank, comment;


// PEX 2 - Parser Portion
Productions
	program = statements main_function;

	statements = {multiple} statement statements | {single} statement;
	statement = {assignment} assign_statement | {declaration} declare_statement | {call} function_call_statement | {define} function_define_statement | {constant} constant_declaration | {if} if_else_conditional | {while} while_loop;

	main_function = main openparanthesis closeparanthesis opencurly statements closecurly;

	function_call_statement = id openparanthesis parameters closeparanthesis eol;

	function_define_statement = function id openparanthesis define_parameters closeparanthesis opencurly statements closecurly;
	define_parameters = {multiple} define_parameter comma define_parameters | {single} define_parameter | {no_parameters};
	define_parameter = {int} inttype id | {float} floattype id | {char} chartype openbracket integer closebracket id;

	declare_statement = {int_and_float_declare} type_id id eol | {char_declare} type_id id openbracket integer closebracket eol;
	type_id = {int} inttype | {float} floattype | {char} chartype;

	constant_declaration = {int_and_float_declare} const_type_id assign_statement | {char_declare} const_type_id id openbracket integer closebracket assign string eol;
	const_type_id = {int} constint | {float} constfloat | {char} constchar;

	parameters = {multiple} parameter comma parameters | {single} parameter | {no_parameter} ;
	parameter = operand;

	if_else_conditional = if conditionals [ifopen]:opencurly [ifstatements]:statements [ifclose]:closecurly else [elseopen]:opencurly [elsestatements]:statements [elseclose]:closecurly;
	while_loop = while conditionals opencurly statements closecurly;
	conditionals = {multiple} openparanthesis conditional boolean_token conditionals closeparanthesis| {single} conditional;
	conditional = openparanthesis [var1]:operand conditional_token [var2]:operand closeparanthesis;
	conditional_token = {equal} equivalence |{not} nottoken | {greater} greater | {less} less | {greater_or_equal} greaterequal | {less_or_equal} lessequal;
	boolean_token = {andtoken} and | {ortoken} or;
	assign_statement = {int_and_float_assign} id assign expression eol | {string_assign} id assign string eol;

	expression = {logicalor} expression or expression2 | {pass} expression2;
	expression2 = {logicaland} expression2 and expression3 | {pass} expression3;
	expression3 = {equal} expression3 equivalence expression4 | {notequal} expression3 nottoken expression4 | {pass} expression4;
	expression4 = {lessthan} expression4 less expression5 | {greaterthan} expression4 greater expression5 | {pass} expression5;
	expression5 = {add} expression5 plus expression6 | {pass} expression6;
	expression6 = {minus} expression6 minus expression7 | {pass} expression7;
	expression7 = {multiply} expression7 mult expression8 | {pass} expression8;
	expression8 = {division} expression8 division expression9 | {pass} expression9;
	expression9 = {exponential} expression9 exponent expression10 | {pass} expression10;
	expression10 = {paranthesis} openparanthesis expression closeparanthesis | {pass} expression11;
	expression11 = {negative} minus operand | {pass} operand;
	operand = {int} integer | {float} float | {variable} id;

