/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  CS426.analysis;

namespace CS426.node {

public abstract class PProgram : Node
{
}

public abstract class PConstants : Node
{
}

public abstract class POneConstant : Node
{
}

public abstract class PFunctions : Node
{
}

public abstract class PFunction : Node
{
}

public abstract class PFunctionArguments : Node
{
}

public abstract class PArguement : Node
{
}

public abstract class PMainFunction : Node
{
}

public abstract class PStatements : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PAssignStatement : Node
{
}

public abstract class PDeclareStatement : Node
{
}

public abstract class PFunctionCallStatement : Node
{
}

public abstract class PFunctionDeclareStatement : Node
{
}

public abstract class PDefineParameters : Node
{
}

public abstract class PDefineParameter : Node
{
}

public abstract class PElifState : Node
{
}

public abstract class PIfState : Node
{
}

public abstract class PElseState : Node
{
}

public abstract class PWhileState : Node
{
}

public abstract class PParameters : Node
{
}

public abstract class PParameter : Node
{
}

public abstract class PConditional : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PExpression1 : Node
{
}

public abstract class PExpression2 : Node
{
}

public abstract class PExpression3 : Node
{
}

public abstract class PExpression4 : Node
{
}

public abstract class PExpression5 : Node
{
}

public abstract class PExpression6 : Node
{
}

public abstract class PExpression7 : Node
{
}

public abstract class POperand : Node
{
}


public sealed class AProgram : PProgram
{
    private PConstants _constants_;
    private PFunctions _functions_;
    private PMainFunction _main_function_;

    public AProgram ()
    {
    }

    public AProgram (
            PConstants _constants_,
            PFunctions _functions_,
            PMainFunction _main_function_
    )
    {
        SetConstants (_constants_);
        SetFunctions (_functions_);
        SetMainFunction (_main_function_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PConstants)CloneNode (_constants_),
            (PFunctions)CloneNode (_functions_),
            (PMainFunction)CloneNode (_main_function_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public PFunctions GetFunctions ()
    {
        return _functions_;
    }

    public void SetFunctions (PFunctions node)
    {
        if(_functions_ != null)
        {
            _functions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functions_ = node;
    }
    public PMainFunction GetMainFunction ()
    {
        return _main_function_;
    }

    public void SetMainFunction (PMainFunction node)
    {
        if(_main_function_ != null)
        {
            _main_function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_function_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_functions_)
            + ToString (_main_function_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _functions_ == child )
        {
            _functions_ = null;
            return;
        }
        if ( _main_function_ == child )
        {
            _main_function_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _functions_ == oldChild )
        {
            SetFunctions ((PFunctions) newChild);
            return;
        }
        if ( _main_function_ == oldChild )
        {
            SetMainFunction ((PMainFunction) newChild);
            return;
        }
    }

}
public sealed class AMultipleConstants : PConstants
{
    private POneConstant _one_constant_;
    private PConstants _constants_;

    public AMultipleConstants ()
    {
    }

    public AMultipleConstants (
            POneConstant _one_constant_,
            PConstants _constants_
    )
    {
        SetOneConstant (_one_constant_);
        SetConstants (_constants_);
    }

    public override Object Clone()
    {
        return new AMultipleConstants (
            (POneConstant)CloneNode (_one_constant_),
            (PConstants)CloneNode (_constants_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleConstants(this);
    }

    public POneConstant GetOneConstant ()
    {
        return _one_constant_;
    }

    public void SetOneConstant (POneConstant node)
    {
        if(_one_constant_ != null)
        {
            _one_constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_constant_ = node;
    }
    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_constant_)
            + ToString (_constants_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_constant_ == child )
        {
            _one_constant_ = null;
            return;
        }
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_constant_ == oldChild )
        {
            SetOneConstant ((POneConstant) newChild);
            return;
        }
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
    }

}
public sealed class ANoneConstants : PConstants
{


    public ANoneConstants (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneConstants (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneConstants(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AIntegerOneConstant : POneConstant
{
    private TConstant _constant_;
    private TId _id_;
    private TNum _num_;
    private TEol _eol_;

    public AIntegerOneConstant ()
    {
    }

    public AIntegerOneConstant (
            TConstant _constant_,
            TId _id_,
            TNum _num_,
            TEol _eol_
    )
    {
        SetConstant (_constant_);
        SetId (_id_);
        SetNum (_num_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AIntegerOneConstant (
            (TConstant)CloneNode (_constant_),
            (TId)CloneNode (_id_),
            (TNum)CloneNode (_num_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntegerOneConstant(this);
    }

    public TConstant GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (TConstant node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TNum GetNum ()
    {
        return _num_;
    }

    public void SetNum (TNum node)
    {
        if(_num_ != null)
        {
            _num_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _num_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_)
            + ToString (_id_)
            + ToString (_num_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _num_ == child )
        {
            _num_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_ == oldChild )
        {
            SetConstant ((TConstant) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _num_ == oldChild )
        {
            SetNum ((TNum) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AFloatsOneConstant : POneConstant
{
    private TConstant _constant_;
    private TId _id_;
    private TFp _fp_;
    private TEol _eol_;

    public AFloatsOneConstant ()
    {
    }

    public AFloatsOneConstant (
            TConstant _constant_,
            TId _id_,
            TFp _fp_,
            TEol _eol_
    )
    {
        SetConstant (_constant_);
        SetId (_id_);
        SetFp (_fp_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFloatsOneConstant (
            (TConstant)CloneNode (_constant_),
            (TId)CloneNode (_id_),
            (TFp)CloneNode (_fp_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatsOneConstant(this);
    }

    public TConstant GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (TConstant node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TFp GetFp ()
    {
        return _fp_;
    }

    public void SetFp (TFp node)
    {
        if(_fp_ != null)
        {
            _fp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fp_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_)
            + ToString (_id_)
            + ToString (_fp_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _fp_ == child )
        {
            _fp_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_ == oldChild )
        {
            SetConstant ((TConstant) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _fp_ == oldChild )
        {
            SetFp ((TFp) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AMultipleFunctions : PFunctions
{
    private PFunction _function_;
    private PFunctions _functions_;

    public AMultipleFunctions ()
    {
    }

    public AMultipleFunctions (
            PFunction _function_,
            PFunctions _functions_
    )
    {
        SetFunction (_function_);
        SetFunctions (_functions_);
    }

    public override Object Clone()
    {
        return new AMultipleFunctions (
            (PFunction)CloneNode (_function_),
            (PFunctions)CloneNode (_functions_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleFunctions(this);
    }

    public PFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (PFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }
    public PFunctions GetFunctions ()
    {
        return _functions_;
    }

    public void SetFunctions (PFunctions node)
    {
        if(_functions_ != null)
        {
            _functions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functions_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_)
            + ToString (_functions_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
        if ( _functions_ == child )
        {
            _functions_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_ == oldChild )
        {
            SetFunction ((PFunction) newChild);
            return;
        }
        if ( _functions_ == oldChild )
        {
            SetFunctions ((PFunctions) newChild);
            return;
        }
    }

}
public sealed class ANoneFunctions : PFunctions
{


    public ANoneFunctions (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneFunctions (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneFunctions(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFunction : PFunction
{
    private TDefine _define_;
    private TId _id_;
    private TOpenp _oone_;
    private PFunctionArguments _function_arguments_;
    private TClosep _cone_;
    private TOpenp _otwo_;
    private PStatements _statements_;
    private TClosep _ctwo_;
    private TEol _eol_;

    public AFunction ()
    {
    }

    public AFunction (
            TDefine _define_,
            TId _id_,
            TOpenp _oone_,
            PFunctionArguments _function_arguments_,
            TClosep _cone_,
            TOpenp _otwo_,
            PStatements _statements_,
            TClosep _ctwo_,
            TEol _eol_
    )
    {
        SetDefine (_define_);
        SetId (_id_);
        SetOone (_oone_);
        SetFunctionArguments (_function_arguments_);
        SetCone (_cone_);
        SetOtwo (_otwo_);
        SetStatements (_statements_);
        SetCtwo (_ctwo_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunction (
            (TDefine)CloneNode (_define_),
            (TId)CloneNode (_id_),
            (TOpenp)CloneNode (_oone_),
            (PFunctionArguments)CloneNode (_function_arguments_),
            (TClosep)CloneNode (_cone_),
            (TOpenp)CloneNode (_otwo_),
            (PStatements)CloneNode (_statements_),
            (TClosep)CloneNode (_ctwo_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunction(this);
    }

    public TDefine GetDefine ()
    {
        return _define_;
    }

    public void SetDefine (TDefine node)
    {
        if(_define_ != null)
        {
            _define_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _define_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenp GetOone ()
    {
        return _oone_;
    }

    public void SetOone (TOpenp node)
    {
        if(_oone_ != null)
        {
            _oone_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _oone_ = node;
    }
    public PFunctionArguments GetFunctionArguments ()
    {
        return _function_arguments_;
    }

    public void SetFunctionArguments (PFunctionArguments node)
    {
        if(_function_arguments_ != null)
        {
            _function_arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_arguments_ = node;
    }
    public TClosep GetCone ()
    {
        return _cone_;
    }

    public void SetCone (TClosep node)
    {
        if(_cone_ != null)
        {
            _cone_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cone_ = node;
    }
    public TOpenp GetOtwo ()
    {
        return _otwo_;
    }

    public void SetOtwo (TOpenp node)
    {
        if(_otwo_ != null)
        {
            _otwo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _otwo_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosep GetCtwo ()
    {
        return _ctwo_;
    }

    public void SetCtwo (TClosep node)
    {
        if(_ctwo_ != null)
        {
            _ctwo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ctwo_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_define_)
            + ToString (_id_)
            + ToString (_oone_)
            + ToString (_function_arguments_)
            + ToString (_cone_)
            + ToString (_otwo_)
            + ToString (_statements_)
            + ToString (_ctwo_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _define_ == child )
        {
            _define_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _oone_ == child )
        {
            _oone_ = null;
            return;
        }
        if ( _function_arguments_ == child )
        {
            _function_arguments_ = null;
            return;
        }
        if ( _cone_ == child )
        {
            _cone_ = null;
            return;
        }
        if ( _otwo_ == child )
        {
            _otwo_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _ctwo_ == child )
        {
            _ctwo_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _define_ == oldChild )
        {
            SetDefine ((TDefine) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _oone_ == oldChild )
        {
            SetOone ((TOpenp) newChild);
            return;
        }
        if ( _function_arguments_ == oldChild )
        {
            SetFunctionArguments ((PFunctionArguments) newChild);
            return;
        }
        if ( _cone_ == oldChild )
        {
            SetCone ((TClosep) newChild);
            return;
        }
        if ( _otwo_ == oldChild )
        {
            SetOtwo ((TOpenp) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _ctwo_ == oldChild )
        {
            SetCtwo ((TClosep) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AMultipleFunctionArguments : PFunctionArguments
{
    private PArguement _arguement_;
    private TComma _comma_;
    private PFunctionArguments _function_arguments_;

    public AMultipleFunctionArguments ()
    {
    }

    public AMultipleFunctionArguments (
            PArguement _arguement_,
            TComma _comma_,
            PFunctionArguments _function_arguments_
    )
    {
        SetArguement (_arguement_);
        SetComma (_comma_);
        SetFunctionArguments (_function_arguments_);
    }

    public override Object Clone()
    {
        return new AMultipleFunctionArguments (
            (PArguement)CloneNode (_arguement_),
            (TComma)CloneNode (_comma_),
            (PFunctionArguments)CloneNode (_function_arguments_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleFunctionArguments(this);
    }

    public PArguement GetArguement ()
    {
        return _arguement_;
    }

    public void SetArguement (PArguement node)
    {
        if(_arguement_ != null)
        {
            _arguement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguement_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PFunctionArguments GetFunctionArguments ()
    {
        return _function_arguments_;
    }

    public void SetFunctionArguments (PFunctionArguments node)
    {
        if(_function_arguments_ != null)
        {
            _function_arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_arguments_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_arguement_)
            + ToString (_comma_)
            + ToString (_function_arguments_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _arguement_ == child )
        {
            _arguement_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _function_arguments_ == child )
        {
            _function_arguments_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _arguement_ == oldChild )
        {
            SetArguement ((PArguement) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _function_arguments_ == oldChild )
        {
            SetFunctionArguments ((PFunctionArguments) newChild);
            return;
        }
    }

}
public sealed class ASingleFunctionArguments : PFunctionArguments
{
    private PArguement _arguement_;

    public ASingleFunctionArguments ()
    {
    }

    public ASingleFunctionArguments (
            PArguement _arguement_
    )
    {
        SetArguement (_arguement_);
    }

    public override Object Clone()
    {
        return new ASingleFunctionArguments (
            (PArguement)CloneNode (_arguement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleFunctionArguments(this);
    }

    public PArguement GetArguement ()
    {
        return _arguement_;
    }

    public void SetArguement (PArguement node)
    {
        if(_arguement_ != null)
        {
            _arguement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_arguement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _arguement_ == child )
        {
            _arguement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _arguement_ == oldChild )
        {
            SetArguement ((PArguement) newChild);
            return;
        }
    }

}
public sealed class ANoneFunctionArguments : PFunctionArguments
{


    public ANoneFunctionArguments (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneFunctionArguments (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneFunctionArguments(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ADecArguement : PArguement
{
    private TId _type_;
    private TId _varname_;

    public ADecArguement ()
    {
    }

    public ADecArguement (
            TId _type_,
            TId _varname_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
    }

    public override Object Clone()
    {
        return new ADecArguement (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADecArguement(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
    }

}
public sealed class AMainFunction : PMainFunction
{
    private TMain _main_;
    private TOpenp _openp_;
    private PStatements _statements_;
    private TClosep _closep_;
    private TEol _eol_;

    public AMainFunction ()
    {
    }

    public AMainFunction (
            TMain _main_,
            TOpenp _openp_,
            PStatements _statements_,
            TClosep _closep_,
            TEol _eol_
    )
    {
        SetMain (_main_);
        SetOpenp (_openp_);
        SetStatements (_statements_);
        SetClosep (_closep_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AMainFunction (
            (TMain)CloneNode (_main_),
            (TOpenp)CloneNode (_openp_),
            (PStatements)CloneNode (_statements_),
            (TClosep)CloneNode (_closep_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainFunction(this);
    }

    public TMain GetMain ()
    {
        return _main_;
    }

    public void SetMain (TMain node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }
    public TOpenp GetOpenp ()
    {
        return _openp_;
    }

    public void SetOpenp (TOpenp node)
    {
        if(_openp_ != null)
        {
            _openp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openp_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosep GetClosep ()
    {
        return _closep_;
    }

    public void SetClosep (TClosep node)
    {
        if(_closep_ != null)
        {
            _closep_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closep_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_)
            + ToString (_openp_)
            + ToString (_statements_)
            + ToString (_closep_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
        if ( _openp_ == child )
        {
            _openp_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closep_ == child )
        {
            _closep_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_ == oldChild )
        {
            SetMain ((TMain) newChild);
            return;
        }
        if ( _openp_ == oldChild )
        {
            SetOpenp ((TOpenp) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closep_ == oldChild )
        {
            SetClosep ((TClosep) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AMultipleStatements : PStatements
{
    private PStatement _statement_;
    private PStatements _statements_;

    public AMultipleStatements ()
    {
    }

    public AMultipleStatements (
            PStatement _statement_,
            PStatements _statements_
    )
    {
        SetStatement (_statement_);
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AMultipleStatements (
            (PStatement)CloneNode (_statement_),
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class ASingleStatements : PStatements
{
    private PStatement _statement_;

    public ASingleStatements ()
    {
    }

    public ASingleStatements (
            PStatement _statement_
    )
    {
        SetStatement (_statement_);
    }

    public override Object Clone()
    {
        return new ASingleStatements (
            (PStatement)CloneNode (_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
    }

}
public sealed class ADeclarationStatement : PStatement
{
    private PDeclareStatement _declare_statement_;

    public ADeclarationStatement ()
    {
    }

    public ADeclarationStatement (
            PDeclareStatement _declare_statement_
    )
    {
        SetDeclareStatement (_declare_statement_);
    }

    public override Object Clone()
    {
        return new ADeclarationStatement (
            (PDeclareStatement)CloneNode (_declare_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationStatement(this);
    }

    public PDeclareStatement GetDeclareStatement ()
    {
        return _declare_statement_;
    }

    public void SetDeclareStatement (PDeclareStatement node)
    {
        if(_declare_statement_ != null)
        {
            _declare_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declare_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declare_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declare_statement_ == child )
        {
            _declare_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declare_statement_ == oldChild )
        {
            SetDeclareStatement ((PDeclareStatement) newChild);
            return;
        }
    }

}
public sealed class AAssignmentStatement : PStatement
{
    private PAssignStatement _assign_statement_;

    public AAssignmentStatement ()
    {
    }

    public AAssignmentStatement (
            PAssignStatement _assign_statement_
    )
    {
        SetAssignStatement (_assign_statement_);
    }

    public override Object Clone()
    {
        return new AAssignmentStatement (
            (PAssignStatement)CloneNode (_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentStatement(this);
    }

    public PAssignStatement GetAssignStatement ()
    {
        return _assign_statement_;
    }

    public void SetAssignStatement (PAssignStatement node)
    {
        if(_assign_statement_ != null)
        {
            _assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_statement_ == child )
        {
            _assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_statement_ == oldChild )
        {
            SetAssignStatement ((PAssignStatement) newChild);
            return;
        }
    }

}
public sealed class ACallStatement : PStatement
{
    private PFunctionCallStatement _function_call_statement_;

    public ACallStatement ()
    {
    }

    public ACallStatement (
            PFunctionCallStatement _function_call_statement_
    )
    {
        SetFunctionCallStatement (_function_call_statement_);
    }

    public override Object Clone()
    {
        return new ACallStatement (
            (PFunctionCallStatement)CloneNode (_function_call_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallStatement(this);
    }

    public PFunctionCallStatement GetFunctionCallStatement ()
    {
        return _function_call_statement_;
    }

    public void SetFunctionCallStatement (PFunctionCallStatement node)
    {
        if(_function_call_statement_ != null)
        {
            _function_call_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_call_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_call_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_call_statement_ == child )
        {
            _function_call_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_call_statement_ == oldChild )
        {
            SetFunctionCallStatement ((PFunctionCallStatement) newChild);
            return;
        }
    }

}
public sealed class AIfElseStatement : PStatement
{
    private PElifState _elif_state_;

    public AIfElseStatement ()
    {
    }

    public AIfElseStatement (
            PElifState _elif_state_
    )
    {
        SetElifState (_elif_state_);
    }

    public override Object Clone()
    {
        return new AIfElseStatement (
            (PElifState)CloneNode (_elif_state_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfElseStatement(this);
    }

    public PElifState GetElifState ()
    {
        return _elif_state_;
    }

    public void SetElifState (PElifState node)
    {
        if(_elif_state_ != null)
        {
            _elif_state_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elif_state_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_elif_state_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _elif_state_ == child )
        {
            _elif_state_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _elif_state_ == oldChild )
        {
            SetElifState ((PElifState) newChild);
            return;
        }
    }

}
public sealed class AWhileStatement : PStatement
{
    private PWhileState _while_state_;

    public AWhileStatement ()
    {
    }

    public AWhileStatement (
            PWhileState _while_state_
    )
    {
        SetWhileState (_while_state_);
    }

    public override Object Clone()
    {
        return new AWhileStatement (
            (PWhileState)CloneNode (_while_state_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStatement(this);
    }

    public PWhileState GetWhileState ()
    {
        return _while_state_;
    }

    public void SetWhileState (PWhileState node)
    {
        if(_while_state_ != null)
        {
            _while_state_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_state_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_state_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_state_ == child )
        {
            _while_state_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_state_ == oldChild )
        {
            SetWhileState ((PWhileState) newChild);
            return;
        }
    }

}
public sealed class AAssignStatement : PAssignStatement
{
    private TId _id_;
    private TAssign _assign_;
    private PExpression _expression_;
    private TEol _eol_;

    public AAssignStatement ()
    {
    }

    public AAssignStatement (
            TId _id_,
            TAssign _assign_,
            PExpression _expression_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetExpression (_expression_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AAssignStatement (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expression_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ADeclareStatement : PDeclareStatement
{
    private TId _type_;
    private TId _varname_;
    private TEol _eol_;

    public ADeclareStatement ()
    {
    }

    public ADeclareStatement (
            TId _type_,
            TId _varname_,
            TEol _eol_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ADeclareStatement (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclareStatement(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AFunctionCallStatement : PFunctionCallStatement
{
    private TId _id_;
    private TOpenp _openp_;
    private PParameters _parameters_;
    private TClosep _closep_;
    private TEol _eol_;

    public AFunctionCallStatement ()
    {
    }

    public AFunctionCallStatement (
            TId _id_,
            TOpenp _openp_,
            PParameters _parameters_,
            TClosep _closep_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetOpenp (_openp_);
        SetParameters (_parameters_);
        SetClosep (_closep_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunctionCallStatement (
            (TId)CloneNode (_id_),
            (TOpenp)CloneNode (_openp_),
            (PParameters)CloneNode (_parameters_),
            (TClosep)CloneNode (_closep_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionCallStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenp GetOpenp ()
    {
        return _openp_;
    }

    public void SetOpenp (TOpenp node)
    {
        if(_openp_ != null)
        {
            _openp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openp_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }
    public TClosep GetClosep ()
    {
        return _closep_;
    }

    public void SetClosep (TClosep node)
    {
        if(_closep_ != null)
        {
            _closep_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closep_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_openp_)
            + ToString (_parameters_)
            + ToString (_closep_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _openp_ == child )
        {
            _openp_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
        if ( _closep_ == child )
        {
            _closep_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _openp_ == oldChild )
        {
            SetOpenp ((TOpenp) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
        if ( _closep_ == oldChild )
        {
            SetClosep ((TClosep) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AFunctionDeclareStatement : PFunctionDeclareStatement
{
    private PFunction _function_;
    private TId _id_;
    private TOpenp _oone_;
    private PDefineParameters _define_parameters_;
    private TClosep _cone_;
    private TOpenp _otwo_;
    private PStatements _statements_;
    private TClosep _ctwo_;

    public AFunctionDeclareStatement ()
    {
    }

    public AFunctionDeclareStatement (
            PFunction _function_,
            TId _id_,
            TOpenp _oone_,
            PDefineParameters _define_parameters_,
            TClosep _cone_,
            TOpenp _otwo_,
            PStatements _statements_,
            TClosep _ctwo_
    )
    {
        SetFunction (_function_);
        SetId (_id_);
        SetOone (_oone_);
        SetDefineParameters (_define_parameters_);
        SetCone (_cone_);
        SetOtwo (_otwo_);
        SetStatements (_statements_);
        SetCtwo (_ctwo_);
    }

    public override Object Clone()
    {
        return new AFunctionDeclareStatement (
            (PFunction)CloneNode (_function_),
            (TId)CloneNode (_id_),
            (TOpenp)CloneNode (_oone_),
            (PDefineParameters)CloneNode (_define_parameters_),
            (TClosep)CloneNode (_cone_),
            (TOpenp)CloneNode (_otwo_),
            (PStatements)CloneNode (_statements_),
            (TClosep)CloneNode (_ctwo_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionDeclareStatement(this);
    }

    public PFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (PFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenp GetOone ()
    {
        return _oone_;
    }

    public void SetOone (TOpenp node)
    {
        if(_oone_ != null)
        {
            _oone_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _oone_ = node;
    }
    public PDefineParameters GetDefineParameters ()
    {
        return _define_parameters_;
    }

    public void SetDefineParameters (PDefineParameters node)
    {
        if(_define_parameters_ != null)
        {
            _define_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _define_parameters_ = node;
    }
    public TClosep GetCone ()
    {
        return _cone_;
    }

    public void SetCone (TClosep node)
    {
        if(_cone_ != null)
        {
            _cone_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cone_ = node;
    }
    public TOpenp GetOtwo ()
    {
        return _otwo_;
    }

    public void SetOtwo (TOpenp node)
    {
        if(_otwo_ != null)
        {
            _otwo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _otwo_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosep GetCtwo ()
    {
        return _ctwo_;
    }

    public void SetCtwo (TClosep node)
    {
        if(_ctwo_ != null)
        {
            _ctwo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ctwo_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_)
            + ToString (_id_)
            + ToString (_oone_)
            + ToString (_define_parameters_)
            + ToString (_cone_)
            + ToString (_otwo_)
            + ToString (_statements_)
            + ToString (_ctwo_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _oone_ == child )
        {
            _oone_ = null;
            return;
        }
        if ( _define_parameters_ == child )
        {
            _define_parameters_ = null;
            return;
        }
        if ( _cone_ == child )
        {
            _cone_ = null;
            return;
        }
        if ( _otwo_ == child )
        {
            _otwo_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _ctwo_ == child )
        {
            _ctwo_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_ == oldChild )
        {
            SetFunction ((PFunction) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _oone_ == oldChild )
        {
            SetOone ((TOpenp) newChild);
            return;
        }
        if ( _define_parameters_ == oldChild )
        {
            SetDefineParameters ((PDefineParameters) newChild);
            return;
        }
        if ( _cone_ == oldChild )
        {
            SetCone ((TClosep) newChild);
            return;
        }
        if ( _otwo_ == oldChild )
        {
            SetOtwo ((TOpenp) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _ctwo_ == oldChild )
        {
            SetCtwo ((TClosep) newChild);
            return;
        }
    }

}
public sealed class AMultipleDefineParameters : PDefineParameters
{
    private PDefineParameter _define_parameter_;
    private TComma _comma_;
    private PDefineParameters _define_parameters_;

    public AMultipleDefineParameters ()
    {
    }

    public AMultipleDefineParameters (
            PDefineParameter _define_parameter_,
            TComma _comma_,
            PDefineParameters _define_parameters_
    )
    {
        SetDefineParameter (_define_parameter_);
        SetComma (_comma_);
        SetDefineParameters (_define_parameters_);
    }

    public override Object Clone()
    {
        return new AMultipleDefineParameters (
            (PDefineParameter)CloneNode (_define_parameter_),
            (TComma)CloneNode (_comma_),
            (PDefineParameters)CloneNode (_define_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleDefineParameters(this);
    }

    public PDefineParameter GetDefineParameter ()
    {
        return _define_parameter_;
    }

    public void SetDefineParameter (PDefineParameter node)
    {
        if(_define_parameter_ != null)
        {
            _define_parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _define_parameter_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PDefineParameters GetDefineParameters ()
    {
        return _define_parameters_;
    }

    public void SetDefineParameters (PDefineParameters node)
    {
        if(_define_parameters_ != null)
        {
            _define_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _define_parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_define_parameter_)
            + ToString (_comma_)
            + ToString (_define_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _define_parameter_ == child )
        {
            _define_parameter_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _define_parameters_ == child )
        {
            _define_parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _define_parameter_ == oldChild )
        {
            SetDefineParameter ((PDefineParameter) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _define_parameters_ == oldChild )
        {
            SetDefineParameters ((PDefineParameters) newChild);
            return;
        }
    }

}
public sealed class ASingleDefineParameters : PDefineParameters
{
    private PDefineParameter _define_parameter_;

    public ASingleDefineParameters ()
    {
    }

    public ASingleDefineParameters (
            PDefineParameter _define_parameter_
    )
    {
        SetDefineParameter (_define_parameter_);
    }

    public override Object Clone()
    {
        return new ASingleDefineParameters (
            (PDefineParameter)CloneNode (_define_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleDefineParameters(this);
    }

    public PDefineParameter GetDefineParameter ()
    {
        return _define_parameter_;
    }

    public void SetDefineParameter (PDefineParameter node)
    {
        if(_define_parameter_ != null)
        {
            _define_parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _define_parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_define_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _define_parameter_ == child )
        {
            _define_parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _define_parameter_ == oldChild )
        {
            SetDefineParameter ((PDefineParameter) newChild);
            return;
        }
    }

}
public sealed class ANoParametersDefineParameters : PDefineParameters
{


    public ANoParametersDefineParameters (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoParametersDefineParameters (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoParametersDefineParameters(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AIntDefineParameter : PDefineParameter
{
    private TNum _num_;
    private TId _id_;

    public AIntDefineParameter ()
    {
    }

    public AIntDefineParameter (
            TNum _num_,
            TId _id_
    )
    {
        SetNum (_num_);
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AIntDefineParameter (
            (TNum)CloneNode (_num_),
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntDefineParameter(this);
    }

    public TNum GetNum ()
    {
        return _num_;
    }

    public void SetNum (TNum node)
    {
        if(_num_ != null)
        {
            _num_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _num_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_num_)
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _num_ == child )
        {
            _num_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _num_ == oldChild )
        {
            SetNum ((TNum) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AFloatDefineParameter : PDefineParameter
{
    private TFp _fp_;
    private TId _id_;

    public AFloatDefineParameter ()
    {
    }

    public AFloatDefineParameter (
            TFp _fp_,
            TId _id_
    )
    {
        SetFp (_fp_);
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AFloatDefineParameter (
            (TFp)CloneNode (_fp_),
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatDefineParameter(this);
    }

    public TFp GetFp ()
    {
        return _fp_;
    }

    public void SetFp (TFp node)
    {
        if(_fp_ != null)
        {
            _fp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fp_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_fp_)
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _fp_ == child )
        {
            _fp_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _fp_ == oldChild )
        {
            SetFp ((TFp) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AStringDefineParameter : PDefineParameter
{
    private TS _s_;
    private TId _id_;

    public AStringDefineParameter ()
    {
    }

    public AStringDefineParameter (
            TS _s_,
            TId _id_
    )
    {
        SetS (_s_);
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AStringDefineParameter (
            (TS)CloneNode (_s_),
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringDefineParameter(this);
    }

    public TS GetS ()
    {
        return _s_;
    }

    public void SetS (TS node)
    {
        if(_s_ != null)
        {
            _s_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _s_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_s_)
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _s_ == child )
        {
            _s_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _s_ == oldChild )
        {
            SetS ((TS) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AJustIfElifState : PElifState
{
    private PIfState _if_state_;

    public AJustIfElifState ()
    {
    }

    public AJustIfElifState (
            PIfState _if_state_
    )
    {
        SetIfState (_if_state_);
    }

    public override Object Clone()
    {
        return new AJustIfElifState (
            (PIfState)CloneNode (_if_state_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAJustIfElifState(this);
    }

    public PIfState GetIfState ()
    {
        return _if_state_;
    }

    public void SetIfState (PIfState node)
    {
        if(_if_state_ != null)
        {
            _if_state_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_state_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_state_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_state_ == child )
        {
            _if_state_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_state_ == oldChild )
        {
            SetIfState ((PIfState) newChild);
            return;
        }
    }

}
public sealed class AIfElseElifState : PElifState
{
    private PIfState _if_state_;
    private PElseState _else_state_;

    public AIfElseElifState ()
    {
    }

    public AIfElseElifState (
            PIfState _if_state_,
            PElseState _else_state_
    )
    {
        SetIfState (_if_state_);
        SetElseState (_else_state_);
    }

    public override Object Clone()
    {
        return new AIfElseElifState (
            (PIfState)CloneNode (_if_state_),
            (PElseState)CloneNode (_else_state_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfElseElifState(this);
    }

    public PIfState GetIfState ()
    {
        return _if_state_;
    }

    public void SetIfState (PIfState node)
    {
        if(_if_state_ != null)
        {
            _if_state_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_state_ = node;
    }
    public PElseState GetElseState ()
    {
        return _else_state_;
    }

    public void SetElseState (PElseState node)
    {
        if(_else_state_ != null)
        {
            _else_state_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_state_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_state_)
            + ToString (_else_state_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_state_ == child )
        {
            _if_state_ = null;
            return;
        }
        if ( _else_state_ == child )
        {
            _else_state_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_state_ == oldChild )
        {
            SetIfState ((PIfState) newChild);
            return;
        }
        if ( _else_state_ == oldChild )
        {
            SetElseState ((PElseState) newChild);
            return;
        }
    }

}
public sealed class AIfState : PIfState
{
    private TIf _if_;
    private TOpenp _oone_;
    private PConditional _conditional_;
    private TClosep _cone_;
    private TOpenp _otwo_;
    private PStatements _statements_;
    private TClosep _ctwo_;
    private TEol _eol_;

    public AIfState ()
    {
    }

    public AIfState (
            TIf _if_,
            TOpenp _oone_,
            PConditional _conditional_,
            TClosep _cone_,
            TOpenp _otwo_,
            PStatements _statements_,
            TClosep _ctwo_,
            TEol _eol_
    )
    {
        SetIf (_if_);
        SetOone (_oone_);
        SetConditional (_conditional_);
        SetCone (_cone_);
        SetOtwo (_otwo_);
        SetStatements (_statements_);
        SetCtwo (_ctwo_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AIfState (
            (TIf)CloneNode (_if_),
            (TOpenp)CloneNode (_oone_),
            (PConditional)CloneNode (_conditional_),
            (TClosep)CloneNode (_cone_),
            (TOpenp)CloneNode (_otwo_),
            (PStatements)CloneNode (_statements_),
            (TClosep)CloneNode (_ctwo_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfState(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TOpenp GetOone ()
    {
        return _oone_;
    }

    public void SetOone (TOpenp node)
    {
        if(_oone_ != null)
        {
            _oone_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _oone_ = node;
    }
    public PConditional GetConditional ()
    {
        return _conditional_;
    }

    public void SetConditional (PConditional node)
    {
        if(_conditional_ != null)
        {
            _conditional_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditional_ = node;
    }
    public TClosep GetCone ()
    {
        return _cone_;
    }

    public void SetCone (TClosep node)
    {
        if(_cone_ != null)
        {
            _cone_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cone_ = node;
    }
    public TOpenp GetOtwo ()
    {
        return _otwo_;
    }

    public void SetOtwo (TOpenp node)
    {
        if(_otwo_ != null)
        {
            _otwo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _otwo_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosep GetCtwo ()
    {
        return _ctwo_;
    }

    public void SetCtwo (TClosep node)
    {
        if(_ctwo_ != null)
        {
            _ctwo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ctwo_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_oone_)
            + ToString (_conditional_)
            + ToString (_cone_)
            + ToString (_otwo_)
            + ToString (_statements_)
            + ToString (_ctwo_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _oone_ == child )
        {
            _oone_ = null;
            return;
        }
        if ( _conditional_ == child )
        {
            _conditional_ = null;
            return;
        }
        if ( _cone_ == child )
        {
            _cone_ = null;
            return;
        }
        if ( _otwo_ == child )
        {
            _otwo_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _ctwo_ == child )
        {
            _ctwo_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _oone_ == oldChild )
        {
            SetOone ((TOpenp) newChild);
            return;
        }
        if ( _conditional_ == oldChild )
        {
            SetConditional ((PConditional) newChild);
            return;
        }
        if ( _cone_ == oldChild )
        {
            SetCone ((TClosep) newChild);
            return;
        }
        if ( _otwo_ == oldChild )
        {
            SetOtwo ((TOpenp) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _ctwo_ == oldChild )
        {
            SetCtwo ((TClosep) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AElseState : PElseState
{
    private TElse _else_;
    private TOpenp _openp_;
    private PStatements _statements_;
    private TClosep _closep_;
    private TEol _eol_;

    public AElseState ()
    {
    }

    public AElseState (
            TElse _else_,
            TOpenp _openp_,
            PStatements _statements_,
            TClosep _closep_,
            TEol _eol_
    )
    {
        SetElse (_else_);
        SetOpenp (_openp_);
        SetStatements (_statements_);
        SetClosep (_closep_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AElseState (
            (TElse)CloneNode (_else_),
            (TOpenp)CloneNode (_openp_),
            (PStatements)CloneNode (_statements_),
            (TClosep)CloneNode (_closep_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAElseState(this);
    }

    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public TOpenp GetOpenp ()
    {
        return _openp_;
    }

    public void SetOpenp (TOpenp node)
    {
        if(_openp_ != null)
        {
            _openp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openp_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosep GetClosep ()
    {
        return _closep_;
    }

    public void SetClosep (TClosep node)
    {
        if(_closep_ != null)
        {
            _closep_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closep_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_else_)
            + ToString (_openp_)
            + ToString (_statements_)
            + ToString (_closep_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _openp_ == child )
        {
            _openp_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closep_ == child )
        {
            _closep_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        if ( _openp_ == oldChild )
        {
            SetOpenp ((TOpenp) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closep_ == oldChild )
        {
            SetClosep ((TClosep) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AWhileState : PWhileState
{
    private TWhile _while_;
    private TOpenp _oone_;
    private PConditional _conditional_;
    private TClosep _cone_;
    private TOpenp _otwo_;
    private PStatements _statements_;
    private TClosep _ctwo_;
    private TEol _eol_;

    public AWhileState ()
    {
    }

    public AWhileState (
            TWhile _while_,
            TOpenp _oone_,
            PConditional _conditional_,
            TClosep _cone_,
            TOpenp _otwo_,
            PStatements _statements_,
            TClosep _ctwo_,
            TEol _eol_
    )
    {
        SetWhile (_while_);
        SetOone (_oone_);
        SetConditional (_conditional_);
        SetCone (_cone_);
        SetOtwo (_otwo_);
        SetStatements (_statements_);
        SetCtwo (_ctwo_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AWhileState (
            (TWhile)CloneNode (_while_),
            (TOpenp)CloneNode (_oone_),
            (PConditional)CloneNode (_conditional_),
            (TClosep)CloneNode (_cone_),
            (TOpenp)CloneNode (_otwo_),
            (PStatements)CloneNode (_statements_),
            (TClosep)CloneNode (_ctwo_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileState(this);
    }

    public TWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (TWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }
    public TOpenp GetOone ()
    {
        return _oone_;
    }

    public void SetOone (TOpenp node)
    {
        if(_oone_ != null)
        {
            _oone_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _oone_ = node;
    }
    public PConditional GetConditional ()
    {
        return _conditional_;
    }

    public void SetConditional (PConditional node)
    {
        if(_conditional_ != null)
        {
            _conditional_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditional_ = node;
    }
    public TClosep GetCone ()
    {
        return _cone_;
    }

    public void SetCone (TClosep node)
    {
        if(_cone_ != null)
        {
            _cone_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cone_ = node;
    }
    public TOpenp GetOtwo ()
    {
        return _otwo_;
    }

    public void SetOtwo (TOpenp node)
    {
        if(_otwo_ != null)
        {
            _otwo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _otwo_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosep GetCtwo ()
    {
        return _ctwo_;
    }

    public void SetCtwo (TClosep node)
    {
        if(_ctwo_ != null)
        {
            _ctwo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ctwo_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
            + ToString (_oone_)
            + ToString (_conditional_)
            + ToString (_cone_)
            + ToString (_otwo_)
            + ToString (_statements_)
            + ToString (_ctwo_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
        if ( _oone_ == child )
        {
            _oone_ = null;
            return;
        }
        if ( _conditional_ == child )
        {
            _conditional_ = null;
            return;
        }
        if ( _cone_ == child )
        {
            _cone_ = null;
            return;
        }
        if ( _otwo_ == child )
        {
            _otwo_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _ctwo_ == child )
        {
            _ctwo_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((TWhile) newChild);
            return;
        }
        if ( _oone_ == oldChild )
        {
            SetOone ((TOpenp) newChild);
            return;
        }
        if ( _conditional_ == oldChild )
        {
            SetConditional ((PConditional) newChild);
            return;
        }
        if ( _cone_ == oldChild )
        {
            SetCone ((TClosep) newChild);
            return;
        }
        if ( _otwo_ == oldChild )
        {
            SetOtwo ((TOpenp) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _ctwo_ == oldChild )
        {
            SetCtwo ((TClosep) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AMultipleParameters : PParameters
{
    private PParameter _parameter_;
    private TComma _comma_;
    private PParameters _parameters_;

    public AMultipleParameters ()
    {
    }

    public AMultipleParameters (
            PParameter _parameter_,
            TComma _comma_,
            PParameters _parameters_
    )
    {
        SetParameter (_parameter_);
        SetComma (_comma_);
        SetParameters (_parameters_);
    }

    public override Object Clone()
    {
        return new AMultipleParameters (
            (PParameter)CloneNode (_parameter_),
            (TComma)CloneNode (_comma_),
            (PParameters)CloneNode (_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleParameters(this);
    }

    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameter_)
            + ToString (_comma_)
            + ToString (_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
    }

}
public sealed class ASingleParameters : PParameters
{
    private PParameter _parameter_;

    public ASingleParameters ()
    {
    }

    public ASingleParameters (
            PParameter _parameter_
    )
    {
        SetParameter (_parameter_);
    }

    public override Object Clone()
    {
        return new ASingleParameters (
            (PParameter)CloneNode (_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleParameters(this);
    }

    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
    }

}
public sealed class ANoParameterParameters : PParameters
{


    public ANoParameterParameters (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoParameterParameters (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoParameterParameters(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AParameter : PParameter
{
    private PExpression _expression_;

    public AParameter ()
    {
    }

    public AParameter (
            PExpression _expression_
    )
    {
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new AParameter (
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParameter(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ASingleConditional : PConditional
{
    private PExpression _expression_;

    public ASingleConditional ()
    {
    }

    public ASingleConditional (
            PExpression _expression_
    )
    {
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new ASingleConditional (
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleConditional(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ANoConditionalConditional : PConditional
{


    public ANoConditionalConditional (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoConditionalConditional (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoConditionalConditional(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AOrExpression : PExpression
{
    private PExpression _expression_;
    private TOr _or_;
    private PExpression1 _expression1_;

    public AOrExpression ()
    {
    }

    public AOrExpression (
            PExpression _expression_,
            TOr _or_,
            PExpression1 _expression1_
    )
    {
        SetExpression (_expression_);
        SetOr (_or_);
        SetExpression1 (_expression1_);
    }

    public override Object Clone()
    {
        return new AOrExpression (
            (PExpression)CloneNode (_expression_),
            (TOr)CloneNode (_or_),
            (PExpression1)CloneNode (_expression1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }
    public PExpression1 GetExpression1 ()
    {
        return _expression1_;
    }

    public void SetExpression1 (PExpression1 node)
    {
        if(_expression1_ != null)
        {
            _expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_or_)
            + ToString (_expression1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
        if ( _expression1_ == child )
        {
            _expression1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
        if ( _expression1_ == oldChild )
        {
            SetExpression1 ((PExpression1) newChild);
            return;
        }
    }

}
public sealed class APassExpression : PExpression
{
    private PExpression1 _expression1_;

    public APassExpression ()
    {
    }

    public APassExpression (
            PExpression1 _expression1_
    )
    {
        SetExpression1 (_expression1_);
    }

    public override Object Clone()
    {
        return new APassExpression (
            (PExpression1)CloneNode (_expression1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression(this);
    }

    public PExpression1 GetExpression1 ()
    {
        return _expression1_;
    }

    public void SetExpression1 (PExpression1 node)
    {
        if(_expression1_ != null)
        {
            _expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression1_ == child )
        {
            _expression1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression1_ == oldChild )
        {
            SetExpression1 ((PExpression1) newChild);
            return;
        }
    }

}
public sealed class AAndExpression1 : PExpression1
{
    private PExpression1 _expression1_;
    private TAnd _and_;
    private PExpression2 _expression2_;

    public AAndExpression1 ()
    {
    }

    public AAndExpression1 (
            PExpression1 _expression1_,
            TAnd _and_,
            PExpression2 _expression2_
    )
    {
        SetExpression1 (_expression1_);
        SetAnd (_and_);
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new AAndExpression1 (
            (PExpression1)CloneNode (_expression1_),
            (TAnd)CloneNode (_and_),
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndExpression1(this);
    }

    public PExpression1 GetExpression1 ()
    {
        return _expression1_;
    }

    public void SetExpression1 (PExpression1 node)
    {
        if(_expression1_ != null)
        {
            _expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression1_ = node;
    }
    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }
    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression1_)
            + ToString (_and_)
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression1_ == child )
        {
            _expression1_ = null;
            return;
        }
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression1_ == oldChild )
        {
            SetExpression1 ((PExpression1) newChild);
            return;
        }
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class APassExpression1 : PExpression1
{
    private PExpression2 _expression2_;

    public APassExpression1 ()
    {
    }

    public APassExpression1 (
            PExpression2 _expression2_
    )
    {
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new APassExpression1 (
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression1(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class AEqualsExpression2 : PExpression2
{
    private PExpression2 _expression2_;
    private TEquals _equals_;
    private PExpression3 _expression3_;

    public AEqualsExpression2 ()
    {
    }

    public AEqualsExpression2 (
            PExpression2 _expression2_,
            TEquals _equals_,
            PExpression3 _expression3_
    )
    {
        SetExpression2 (_expression2_);
        SetEquals (_equals_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new AEqualsExpression2 (
            (PExpression2)CloneNode (_expression2_),
            (TEquals)CloneNode (_equals_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualsExpression2(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }
    public TEquals GetEquals ()
    {
        return _equals_;
    }

    public void SetEquals (TEquals node)
    {
        if(_equals_ != null)
        {
            _equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equals_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
            + ToString (_equals_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
        if ( _equals_ == child )
        {
            _equals_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
        if ( _equals_ == oldChild )
        {
            SetEquals ((TEquals) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class ANotEqualExpression2 : PExpression2
{
    private PExpression2 _expression2_;
    private TNotEquals _not_equals_;
    private PExpression3 _expression3_;

    public ANotEqualExpression2 ()
    {
    }

    public ANotEqualExpression2 (
            PExpression2 _expression2_,
            TNotEquals _not_equals_,
            PExpression3 _expression3_
    )
    {
        SetExpression2 (_expression2_);
        SetNotEquals (_not_equals_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new ANotEqualExpression2 (
            (PExpression2)CloneNode (_expression2_),
            (TNotEquals)CloneNode (_not_equals_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotEqualExpression2(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }
    public TNotEquals GetNotEquals ()
    {
        return _not_equals_;
    }

    public void SetNotEquals (TNotEquals node)
    {
        if(_not_equals_ != null)
        {
            _not_equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_equals_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
            + ToString (_not_equals_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
        if ( _not_equals_ == child )
        {
            _not_equals_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
        if ( _not_equals_ == oldChild )
        {
            SetNotEquals ((TNotEquals) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class APassExpression2 : PExpression2
{
    private PExpression3 _expression3_;

    public APassExpression2 ()
    {
    }

    public APassExpression2 (
            PExpression3 _expression3_
    )
    {
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new APassExpression2 (
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression2(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class AGreaterThanOrEqualsExpression3 : PExpression3
{
    private PExpression3 _expression3_;
    private TGreaterthanorequals _greaterthanorequals_;
    private PExpression4 _expression4_;

    public AGreaterThanOrEqualsExpression3 ()
    {
    }

    public AGreaterThanOrEqualsExpression3 (
            PExpression3 _expression3_,
            TGreaterthanorequals _greaterthanorequals_,
            PExpression4 _expression4_
    )
    {
        SetExpression3 (_expression3_);
        SetGreaterthanorequals (_greaterthanorequals_);
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new AGreaterThanOrEqualsExpression3 (
            (PExpression3)CloneNode (_expression3_),
            (TGreaterthanorequals)CloneNode (_greaterthanorequals_),
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterThanOrEqualsExpression3(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }
    public TGreaterthanorequals GetGreaterthanorequals ()
    {
        return _greaterthanorequals_;
    }

    public void SetGreaterthanorequals (TGreaterthanorequals node)
    {
        if(_greaterthanorequals_ != null)
        {
            _greaterthanorequals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greaterthanorequals_ = node;
    }
    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
            + ToString (_greaterthanorequals_)
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
        if ( _greaterthanorequals_ == child )
        {
            _greaterthanorequals_ = null;
            return;
        }
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
        if ( _greaterthanorequals_ == oldChild )
        {
            SetGreaterthanorequals ((TGreaterthanorequals) newChild);
            return;
        }
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class ALessThanOrEqualsExpression3 : PExpression3
{
    private PExpression3 _expression3_;
    private TLessthanorequals _lessthanorequals_;
    private PExpression4 _expression4_;

    public ALessThanOrEqualsExpression3 ()
    {
    }

    public ALessThanOrEqualsExpression3 (
            PExpression3 _expression3_,
            TLessthanorequals _lessthanorequals_,
            PExpression4 _expression4_
    )
    {
        SetExpression3 (_expression3_);
        SetLessthanorequals (_lessthanorequals_);
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new ALessThanOrEqualsExpression3 (
            (PExpression3)CloneNode (_expression3_),
            (TLessthanorequals)CloneNode (_lessthanorequals_),
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessThanOrEqualsExpression3(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }
    public TLessthanorequals GetLessthanorequals ()
    {
        return _lessthanorequals_;
    }

    public void SetLessthanorequals (TLessthanorequals node)
    {
        if(_lessthanorequals_ != null)
        {
            _lessthanorequals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lessthanorequals_ = node;
    }
    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
            + ToString (_lessthanorequals_)
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
        if ( _lessthanorequals_ == child )
        {
            _lessthanorequals_ = null;
            return;
        }
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
        if ( _lessthanorequals_ == oldChild )
        {
            SetLessthanorequals ((TLessthanorequals) newChild);
            return;
        }
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class ALessThanExpression3 : PExpression3
{
    private PExpression3 _expression3_;
    private TLessthan _lessthan_;
    private PExpression4 _expression4_;

    public ALessThanExpression3 ()
    {
    }

    public ALessThanExpression3 (
            PExpression3 _expression3_,
            TLessthan _lessthan_,
            PExpression4 _expression4_
    )
    {
        SetExpression3 (_expression3_);
        SetLessthan (_lessthan_);
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new ALessThanExpression3 (
            (PExpression3)CloneNode (_expression3_),
            (TLessthan)CloneNode (_lessthan_),
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessThanExpression3(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }
    public TLessthan GetLessthan ()
    {
        return _lessthan_;
    }

    public void SetLessthan (TLessthan node)
    {
        if(_lessthan_ != null)
        {
            _lessthan_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lessthan_ = node;
    }
    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
            + ToString (_lessthan_)
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
        if ( _lessthan_ == child )
        {
            _lessthan_ = null;
            return;
        }
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
        if ( _lessthan_ == oldChild )
        {
            SetLessthan ((TLessthan) newChild);
            return;
        }
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class AGreaterThanExpression3 : PExpression3
{
    private PExpression3 _expression3_;
    private TGreaterthan _greaterthan_;
    private PExpression4 _expression4_;

    public AGreaterThanExpression3 ()
    {
    }

    public AGreaterThanExpression3 (
            PExpression3 _expression3_,
            TGreaterthan _greaterthan_,
            PExpression4 _expression4_
    )
    {
        SetExpression3 (_expression3_);
        SetGreaterthan (_greaterthan_);
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new AGreaterThanExpression3 (
            (PExpression3)CloneNode (_expression3_),
            (TGreaterthan)CloneNode (_greaterthan_),
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterThanExpression3(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }
    public TGreaterthan GetGreaterthan ()
    {
        return _greaterthan_;
    }

    public void SetGreaterthan (TGreaterthan node)
    {
        if(_greaterthan_ != null)
        {
            _greaterthan_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greaterthan_ = node;
    }
    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
            + ToString (_greaterthan_)
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
        if ( _greaterthan_ == child )
        {
            _greaterthan_ = null;
            return;
        }
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
        if ( _greaterthan_ == oldChild )
        {
            SetGreaterthan ((TGreaterthan) newChild);
            return;
        }
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class APassExpression3 : PExpression3
{
    private PExpression4 _expression4_;

    public APassExpression3 ()
    {
    }

    public APassExpression3 (
            PExpression4 _expression4_
    )
    {
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new APassExpression3 (
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression3(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class AAddExpression4 : PExpression4
{
    private PExpression4 _expression4_;
    private TPlus _plus_;
    private PExpression5 _expression5_;

    public AAddExpression4 ()
    {
    }

    public AAddExpression4 (
            PExpression4 _expression4_,
            TPlus _plus_,
            PExpression5 _expression5_
    )
    {
        SetExpression4 (_expression4_);
        SetPlus (_plus_);
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new AAddExpression4 (
            (PExpression4)CloneNode (_expression4_),
            (TPlus)CloneNode (_plus_),
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddExpression4(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
            + ToString (_plus_)
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class ASubtractExpression4 : PExpression4
{
    private PExpression4 _expression4_;
    private TMinus _minus_;
    private PExpression5 _expression5_;

    public ASubtractExpression4 ()
    {
    }

    public ASubtractExpression4 (
            PExpression4 _expression4_,
            TMinus _minus_,
            PExpression5 _expression5_
    )
    {
        SetExpression4 (_expression4_);
        SetMinus (_minus_);
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new ASubtractExpression4 (
            (PExpression4)CloneNode (_expression4_),
            (TMinus)CloneNode (_minus_),
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubtractExpression4(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
            + ToString (_minus_)
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class APassExpression4 : PExpression4
{
    private PExpression5 _expression5_;

    public APassExpression4 ()
    {
    }

    public APassExpression4 (
            PExpression5 _expression5_
    )
    {
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new APassExpression4 (
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression4(this);
    }

    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class AMultiplyExpression5 : PExpression5
{
    private PExpression5 _expression5_;
    private TMultiply _multiply_;
    private PExpression6 _expression6_;

    public AMultiplyExpression5 ()
    {
    }

    public AMultiplyExpression5 (
            PExpression5 _expression5_,
            TMultiply _multiply_,
            PExpression6 _expression6_
    )
    {
        SetExpression5 (_expression5_);
        SetMultiply (_multiply_);
        SetExpression6 (_expression6_);
    }

    public override Object Clone()
    {
        return new AMultiplyExpression5 (
            (PExpression5)CloneNode (_expression5_),
            (TMultiply)CloneNode (_multiply_),
            (PExpression6)CloneNode (_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiplyExpression5(this);
    }

    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }
    public TMultiply GetMultiply ()
    {
        return _multiply_;
    }

    public void SetMultiply (TMultiply node)
    {
        if(_multiply_ != null)
        {
            _multiply_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multiply_ = node;
    }
    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression5_)
            + ToString (_multiply_)
            + ToString (_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
        if ( _multiply_ == child )
        {
            _multiply_ = null;
            return;
        }
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
        if ( _multiply_ == oldChild )
        {
            SetMultiply ((TMultiply) newChild);
            return;
        }
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
    }

}
public sealed class ADivideExpression5 : PExpression5
{
    private PExpression5 _expression5_;
    private TDivide _divide_;
    private PExpression6 _expression6_;

    public ADivideExpression5 ()
    {
    }

    public ADivideExpression5 (
            PExpression5 _expression5_,
            TDivide _divide_,
            PExpression6 _expression6_
    )
    {
        SetExpression5 (_expression5_);
        SetDivide (_divide_);
        SetExpression6 (_expression6_);
    }

    public override Object Clone()
    {
        return new ADivideExpression5 (
            (PExpression5)CloneNode (_expression5_),
            (TDivide)CloneNode (_divide_),
            (PExpression6)CloneNode (_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivideExpression5(this);
    }

    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }
    public TDivide GetDivide ()
    {
        return _divide_;
    }

    public void SetDivide (TDivide node)
    {
        if(_divide_ != null)
        {
            _divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _divide_ = node;
    }
    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression5_)
            + ToString (_divide_)
            + ToString (_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
        if ( _divide_ == child )
        {
            _divide_ = null;
            return;
        }
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
        if ( _divide_ == oldChild )
        {
            SetDivide ((TDivide) newChild);
            return;
        }
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
    }

}
public sealed class APassExpression5 : PExpression5
{
    private PExpression6 _expression6_;

    public APassExpression5 ()
    {
    }

    public APassExpression5 (
            PExpression6 _expression6_
    )
    {
        SetExpression6 (_expression6_);
    }

    public override Object Clone()
    {
        return new APassExpression5 (
            (PExpression6)CloneNode (_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression5(this);
    }

    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
    }

}
public sealed class ANegativeExpression6 : PExpression6
{
    private TMinus _minus_;
    private PExpression7 _expression7_;

    public ANegativeExpression6 ()
    {
    }

    public ANegativeExpression6 (
            TMinus _minus_,
            PExpression7 _expression7_
    )
    {
        SetMinus (_minus_);
        SetExpression7 (_expression7_);
    }

    public override Object Clone()
    {
        return new ANegativeExpression6 (
            (TMinus)CloneNode (_minus_),
            (PExpression7)CloneNode (_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegativeExpression6(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PExpression7 GetExpression7 ()
    {
        return _expression7_;
    }

    public void SetExpression7 (PExpression7 node)
    {
        if(_expression7_ != null)
        {
            _expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _expression7_ == child )
        {
            _expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _expression7_ == oldChild )
        {
            SetExpression7 ((PExpression7) newChild);
            return;
        }
    }

}
public sealed class ANotExpression6 : PExpression6
{
    private TNot _not_;
    private PExpression7 _expression7_;

    public ANotExpression6 ()
    {
    }

    public ANotExpression6 (
            TNot _not_,
            PExpression7 _expression7_
    )
    {
        SetNot (_not_);
        SetExpression7 (_expression7_);
    }

    public override Object Clone()
    {
        return new ANotExpression6 (
            (TNot)CloneNode (_not_),
            (PExpression7)CloneNode (_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotExpression6(this);
    }

    public TNot GetNot ()
    {
        return _not_;
    }

    public void SetNot (TNot node)
    {
        if(_not_ != null)
        {
            _not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_ = node;
    }
    public PExpression7 GetExpression7 ()
    {
        return _expression7_;
    }

    public void SetExpression7 (PExpression7 node)
    {
        if(_expression7_ != null)
        {
            _expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_not_)
            + ToString (_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _not_ == child )
        {
            _not_ = null;
            return;
        }
        if ( _expression7_ == child )
        {
            _expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _not_ == oldChild )
        {
            SetNot ((TNot) newChild);
            return;
        }
        if ( _expression7_ == oldChild )
        {
            SetExpression7 ((PExpression7) newChild);
            return;
        }
    }

}
public sealed class APassExpression6 : PExpression6
{
    private PExpression7 _expression7_;

    public APassExpression6 ()
    {
    }

    public APassExpression6 (
            PExpression7 _expression7_
    )
    {
        SetExpression7 (_expression7_);
    }

    public override Object Clone()
    {
        return new APassExpression6 (
            (PExpression7)CloneNode (_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression6(this);
    }

    public PExpression7 GetExpression7 ()
    {
        return _expression7_;
    }

    public void SetExpression7 (PExpression7 node)
    {
        if(_expression7_ != null)
        {
            _expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression7_ == child )
        {
            _expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression7_ == oldChild )
        {
            SetExpression7 ((PExpression7) newChild);
            return;
        }
    }

}
public sealed class AParenthesisExpression7 : PExpression7
{
    private TOpenp _openp_;
    private PExpression _expression_;
    private TClosep _closep_;

    public AParenthesisExpression7 ()
    {
    }

    public AParenthesisExpression7 (
            TOpenp _openp_,
            PExpression _expression_,
            TClosep _closep_
    )
    {
        SetOpenp (_openp_);
        SetExpression (_expression_);
        SetClosep (_closep_);
    }

    public override Object Clone()
    {
        return new AParenthesisExpression7 (
            (TOpenp)CloneNode (_openp_),
            (PExpression)CloneNode (_expression_),
            (TClosep)CloneNode (_closep_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenthesisExpression7(this);
    }

    public TOpenp GetOpenp ()
    {
        return _openp_;
    }

    public void SetOpenp (TOpenp node)
    {
        if(_openp_ != null)
        {
            _openp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openp_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TClosep GetClosep ()
    {
        return _closep_;
    }

    public void SetClosep (TClosep node)
    {
        if(_closep_ != null)
        {
            _closep_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closep_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_openp_)
            + ToString (_expression_)
            + ToString (_closep_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _openp_ == child )
        {
            _openp_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _closep_ == child )
        {
            _closep_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _openp_ == oldChild )
        {
            SetOpenp ((TOpenp) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _closep_ == oldChild )
        {
            SetClosep ((TClosep) newChild);
            return;
        }
    }

}
public sealed class APassExpression7 : PExpression7
{
    private POperand _operand_;

    public APassExpression7 ()
    {
    }

    public APassExpression7 (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new APassExpression7 (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression7(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AIntOperand : POperand
{
    private TNum _num_;

    public AIntOperand ()
    {
    }

    public AIntOperand (
            TNum _num_
    )
    {
        SetNum (_num_);
    }

    public override Object Clone()
    {
        return new AIntOperand (
            (TNum)CloneNode (_num_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntOperand(this);
    }

    public TNum GetNum ()
    {
        return _num_;
    }

    public void SetNum (TNum node)
    {
        if(_num_ != null)
        {
            _num_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _num_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_num_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _num_ == child )
        {
            _num_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _num_ == oldChild )
        {
            SetNum ((TNum) newChild);
            return;
        }
    }

}
public sealed class AFloatOperand : POperand
{
    private TFp _fp_;

    public AFloatOperand ()
    {
    }

    public AFloatOperand (
            TFp _fp_
    )
    {
        SetFp (_fp_);
    }

    public override Object Clone()
    {
        return new AFloatOperand (
            (TFp)CloneNode (_fp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatOperand(this);
    }

    public TFp GetFp ()
    {
        return _fp_;
    }

    public void SetFp (TFp node)
    {
        if(_fp_ != null)
        {
            _fp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_fp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _fp_ == child )
        {
            _fp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _fp_ == oldChild )
        {
            SetFp ((TFp) newChild);
            return;
        }
    }

}
public sealed class AStringOperand : POperand
{
    private TS _s_;

    public AStringOperand ()
    {
    }

    public AStringOperand (
            TS _s_
    )
    {
        SetS (_s_);
    }

    public override Object Clone()
    {
        return new AStringOperand (
            (TS)CloneNode (_s_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringOperand(this);
    }

    public TS GetS ()
    {
        return _s_;
    }

    public void SetS (TS node)
    {
        if(_s_ != null)
        {
            _s_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _s_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_s_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _s_ == child )
        {
            _s_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _s_ == oldChild )
        {
            SetS ((TS) newChild);
            return;
        }
    }

}
public sealed class AVariableOperand : POperand
{
    private TId _id_;

    public AVariableOperand ()
    {
    }

    public AVariableOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
