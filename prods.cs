/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  CS426.analysis;

namespace CS426.node {

public abstract class PProgram : Node
{
}

public abstract class PStatements : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PMainFunction : Node
{
}

public abstract class PFunctionCallStatement : Node
{
}

public abstract class PFunctionDefineStatement : Node
{
}

public abstract class PDefineParameters : Node
{
}

public abstract class PDefineParameter : Node
{
}

public abstract class PDeclareStatement : Node
{
}

public abstract class PTypeId : Node
{
}

public abstract class PConstantDeclaration : Node
{
}

public abstract class PConstTypeId : Node
{
}

public abstract class PParameters : Node
{
}

public abstract class PParameter : Node
{
}

public abstract class PIfElseConditional : Node
{
}

public abstract class PWhileLoop : Node
{
}

public abstract class PConditionals : Node
{
}

public abstract class PConditional : Node
{
}

public abstract class PConditionalToken : Node
{
}

public abstract class PBooleanToken : Node
{
}

public abstract class PAssignStatement : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PExpression2 : Node
{
}

public abstract class PExpression3 : Node
{
}

public abstract class PExpression4 : Node
{
}

public abstract class PExpression5 : Node
{
}

public abstract class PExpression6 : Node
{
}

public abstract class PExpression7 : Node
{
}

public abstract class PExpression8 : Node
{
}

public abstract class PExpression9 : Node
{
}

public abstract class PExpression10 : Node
{
}

public abstract class PExpression11 : Node
{
}

public abstract class POperand : Node
{
}


public sealed class AProgram : PProgram
{
    private PStatements _statements_;
    private PMainFunction _main_function_;

    public AProgram ()
    {
    }

    public AProgram (
            PStatements _statements_,
            PMainFunction _main_function_
    )
    {
        SetStatements (_statements_);
        SetMainFunction (_main_function_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PStatements)CloneNode (_statements_),
            (PMainFunction)CloneNode (_main_function_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public PMainFunction GetMainFunction ()
    {
        return _main_function_;
    }

    public void SetMainFunction (PMainFunction node)
    {
        if(_main_function_ != null)
        {
            _main_function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_function_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statements_)
            + ToString (_main_function_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _main_function_ == child )
        {
            _main_function_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _main_function_ == oldChild )
        {
            SetMainFunction ((PMainFunction) newChild);
            return;
        }
    }

}
public sealed class AMultipleStatements : PStatements
{
    private PStatement _statement_;
    private PStatements _statements_;

    public AMultipleStatements ()
    {
    }

    public AMultipleStatements (
            PStatement _statement_,
            PStatements _statements_
    )
    {
        SetStatement (_statement_);
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AMultipleStatements (
            (PStatement)CloneNode (_statement_),
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class ASingleStatements : PStatements
{
    private PStatement _statement_;

    public ASingleStatements ()
    {
    }

    public ASingleStatements (
            PStatement _statement_
    )
    {
        SetStatement (_statement_);
    }

    public override Object Clone()
    {
        return new ASingleStatements (
            (PStatement)CloneNode (_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
    }

}
public sealed class AAssignmentStatement : PStatement
{
    private PAssignStatement _assign_statement_;

    public AAssignmentStatement ()
    {
    }

    public AAssignmentStatement (
            PAssignStatement _assign_statement_
    )
    {
        SetAssignStatement (_assign_statement_);
    }

    public override Object Clone()
    {
        return new AAssignmentStatement (
            (PAssignStatement)CloneNode (_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentStatement(this);
    }

    public PAssignStatement GetAssignStatement ()
    {
        return _assign_statement_;
    }

    public void SetAssignStatement (PAssignStatement node)
    {
        if(_assign_statement_ != null)
        {
            _assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_statement_ == child )
        {
            _assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_statement_ == oldChild )
        {
            SetAssignStatement ((PAssignStatement) newChild);
            return;
        }
    }

}
public sealed class ADeclarationStatement : PStatement
{
    private PDeclareStatement _declare_statement_;

    public ADeclarationStatement ()
    {
    }

    public ADeclarationStatement (
            PDeclareStatement _declare_statement_
    )
    {
        SetDeclareStatement (_declare_statement_);
    }

    public override Object Clone()
    {
        return new ADeclarationStatement (
            (PDeclareStatement)CloneNode (_declare_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationStatement(this);
    }

    public PDeclareStatement GetDeclareStatement ()
    {
        return _declare_statement_;
    }

    public void SetDeclareStatement (PDeclareStatement node)
    {
        if(_declare_statement_ != null)
        {
            _declare_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declare_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declare_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declare_statement_ == child )
        {
            _declare_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declare_statement_ == oldChild )
        {
            SetDeclareStatement ((PDeclareStatement) newChild);
            return;
        }
    }

}
public sealed class ACallStatement : PStatement
{
    private PFunctionCallStatement _function_call_statement_;

    public ACallStatement ()
    {
    }

    public ACallStatement (
            PFunctionCallStatement _function_call_statement_
    )
    {
        SetFunctionCallStatement (_function_call_statement_);
    }

    public override Object Clone()
    {
        return new ACallStatement (
            (PFunctionCallStatement)CloneNode (_function_call_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallStatement(this);
    }

    public PFunctionCallStatement GetFunctionCallStatement ()
    {
        return _function_call_statement_;
    }

    public void SetFunctionCallStatement (PFunctionCallStatement node)
    {
        if(_function_call_statement_ != null)
        {
            _function_call_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_call_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_call_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_call_statement_ == child )
        {
            _function_call_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_call_statement_ == oldChild )
        {
            SetFunctionCallStatement ((PFunctionCallStatement) newChild);
            return;
        }
    }

}
public sealed class ADefineStatement : PStatement
{
    private PFunctionDefineStatement _function_define_statement_;

    public ADefineStatement ()
    {
    }

    public ADefineStatement (
            PFunctionDefineStatement _function_define_statement_
    )
    {
        SetFunctionDefineStatement (_function_define_statement_);
    }

    public override Object Clone()
    {
        return new ADefineStatement (
            (PFunctionDefineStatement)CloneNode (_function_define_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADefineStatement(this);
    }

    public PFunctionDefineStatement GetFunctionDefineStatement ()
    {
        return _function_define_statement_;
    }

    public void SetFunctionDefineStatement (PFunctionDefineStatement node)
    {
        if(_function_define_statement_ != null)
        {
            _function_define_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_define_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_define_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_define_statement_ == child )
        {
            _function_define_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_define_statement_ == oldChild )
        {
            SetFunctionDefineStatement ((PFunctionDefineStatement) newChild);
            return;
        }
    }

}
public sealed class AConstantStatement : PStatement
{
    private PConstantDeclaration _constant_declaration_;

    public AConstantStatement ()
    {
    }

    public AConstantStatement (
            PConstantDeclaration _constant_declaration_
    )
    {
        SetConstantDeclaration (_constant_declaration_);
    }

    public override Object Clone()
    {
        return new AConstantStatement (
            (PConstantDeclaration)CloneNode (_constant_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantStatement(this);
    }

    public PConstantDeclaration GetConstantDeclaration ()
    {
        return _constant_declaration_;
    }

    public void SetConstantDeclaration (PConstantDeclaration node)
    {
        if(_constant_declaration_ != null)
        {
            _constant_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_declaration_ == child )
        {
            _constant_declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_declaration_ == oldChild )
        {
            SetConstantDeclaration ((PConstantDeclaration) newChild);
            return;
        }
    }

}
public sealed class AIfStatement : PStatement
{
    private PIfElseConditional _if_else_conditional_;

    public AIfStatement ()
    {
    }

    public AIfStatement (
            PIfElseConditional _if_else_conditional_
    )
    {
        SetIfElseConditional (_if_else_conditional_);
    }

    public override Object Clone()
    {
        return new AIfStatement (
            (PIfElseConditional)CloneNode (_if_else_conditional_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStatement(this);
    }

    public PIfElseConditional GetIfElseConditional ()
    {
        return _if_else_conditional_;
    }

    public void SetIfElseConditional (PIfElseConditional node)
    {
        if(_if_else_conditional_ != null)
        {
            _if_else_conditional_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_else_conditional_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_else_conditional_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_else_conditional_ == child )
        {
            _if_else_conditional_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_else_conditional_ == oldChild )
        {
            SetIfElseConditional ((PIfElseConditional) newChild);
            return;
        }
    }

}
public sealed class AWhileStatement : PStatement
{
    private PWhileLoop _while_loop_;

    public AWhileStatement ()
    {
    }

    public AWhileStatement (
            PWhileLoop _while_loop_
    )
    {
        SetWhileLoop (_while_loop_);
    }

    public override Object Clone()
    {
        return new AWhileStatement (
            (PWhileLoop)CloneNode (_while_loop_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStatement(this);
    }

    public PWhileLoop GetWhileLoop ()
    {
        return _while_loop_;
    }

    public void SetWhileLoop (PWhileLoop node)
    {
        if(_while_loop_ != null)
        {
            _while_loop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_loop_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_loop_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_loop_ == child )
        {
            _while_loop_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_loop_ == oldChild )
        {
            SetWhileLoop ((PWhileLoop) newChild);
            return;
        }
    }

}
public sealed class AMainFunction : PMainFunction
{
    private TMain _main_;
    private TOpenparanthesis _openparanthesis_;
    private TCloseparanthesis _closeparanthesis_;
    private TOpencurly _opencurly_;
    private PStatements _statements_;
    private TClosecurly _closecurly_;

    public AMainFunction ()
    {
    }

    public AMainFunction (
            TMain _main_,
            TOpenparanthesis _openparanthesis_,
            TCloseparanthesis _closeparanthesis_,
            TOpencurly _opencurly_,
            PStatements _statements_,
            TClosecurly _closecurly_
    )
    {
        SetMain (_main_);
        SetOpenparanthesis (_openparanthesis_);
        SetCloseparanthesis (_closeparanthesis_);
        SetOpencurly (_opencurly_);
        SetStatements (_statements_);
        SetClosecurly (_closecurly_);
    }

    public override Object Clone()
    {
        return new AMainFunction (
            (TMain)CloneNode (_main_),
            (TOpenparanthesis)CloneNode (_openparanthesis_),
            (TCloseparanthesis)CloneNode (_closeparanthesis_),
            (TOpencurly)CloneNode (_opencurly_),
            (PStatements)CloneNode (_statements_),
            (TClosecurly)CloneNode (_closecurly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainFunction(this);
    }

    public TMain GetMain ()
    {
        return _main_;
    }

    public void SetMain (TMain node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }
    public TOpenparanthesis GetOpenparanthesis ()
    {
        return _openparanthesis_;
    }

    public void SetOpenparanthesis (TOpenparanthesis node)
    {
        if(_openparanthesis_ != null)
        {
            _openparanthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparanthesis_ = node;
    }
    public TCloseparanthesis GetCloseparanthesis ()
    {
        return _closeparanthesis_;
    }

    public void SetCloseparanthesis (TCloseparanthesis node)
    {
        if(_closeparanthesis_ != null)
        {
            _closeparanthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closeparanthesis_ = node;
    }
    public TOpencurly GetOpencurly ()
    {
        return _opencurly_;
    }

    public void SetOpencurly (TOpencurly node)
    {
        if(_opencurly_ != null)
        {
            _opencurly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _opencurly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosecurly GetClosecurly ()
    {
        return _closecurly_;
    }

    public void SetClosecurly (TClosecurly node)
    {
        if(_closecurly_ != null)
        {
            _closecurly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closecurly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_)
            + ToString (_openparanthesis_)
            + ToString (_closeparanthesis_)
            + ToString (_opencurly_)
            + ToString (_statements_)
            + ToString (_closecurly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
        if ( _openparanthesis_ == child )
        {
            _openparanthesis_ = null;
            return;
        }
        if ( _closeparanthesis_ == child )
        {
            _closeparanthesis_ = null;
            return;
        }
        if ( _opencurly_ == child )
        {
            _opencurly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closecurly_ == child )
        {
            _closecurly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_ == oldChild )
        {
            SetMain ((TMain) newChild);
            return;
        }
        if ( _openparanthesis_ == oldChild )
        {
            SetOpenparanthesis ((TOpenparanthesis) newChild);
            return;
        }
        if ( _closeparanthesis_ == oldChild )
        {
            SetCloseparanthesis ((TCloseparanthesis) newChild);
            return;
        }
        if ( _opencurly_ == oldChild )
        {
            SetOpencurly ((TOpencurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closecurly_ == oldChild )
        {
            SetClosecurly ((TClosecurly) newChild);
            return;
        }
    }

}
public sealed class AFunctionCallStatement : PFunctionCallStatement
{
    private TId _id_;
    private TOpenparanthesis _openparanthesis_;
    private PParameters _parameters_;
    private TCloseparanthesis _closeparanthesis_;
    private TEol _eol_;

    public AFunctionCallStatement ()
    {
    }

    public AFunctionCallStatement (
            TId _id_,
            TOpenparanthesis _openparanthesis_,
            PParameters _parameters_,
            TCloseparanthesis _closeparanthesis_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetOpenparanthesis (_openparanthesis_);
        SetParameters (_parameters_);
        SetCloseparanthesis (_closeparanthesis_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunctionCallStatement (
            (TId)CloneNode (_id_),
            (TOpenparanthesis)CloneNode (_openparanthesis_),
            (PParameters)CloneNode (_parameters_),
            (TCloseparanthesis)CloneNode (_closeparanthesis_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionCallStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenparanthesis GetOpenparanthesis ()
    {
        return _openparanthesis_;
    }

    public void SetOpenparanthesis (TOpenparanthesis node)
    {
        if(_openparanthesis_ != null)
        {
            _openparanthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparanthesis_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }
    public TCloseparanthesis GetCloseparanthesis ()
    {
        return _closeparanthesis_;
    }

    public void SetCloseparanthesis (TCloseparanthesis node)
    {
        if(_closeparanthesis_ != null)
        {
            _closeparanthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closeparanthesis_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_openparanthesis_)
            + ToString (_parameters_)
            + ToString (_closeparanthesis_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _openparanthesis_ == child )
        {
            _openparanthesis_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
        if ( _closeparanthesis_ == child )
        {
            _closeparanthesis_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _openparanthesis_ == oldChild )
        {
            SetOpenparanthesis ((TOpenparanthesis) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
        if ( _closeparanthesis_ == oldChild )
        {
            SetCloseparanthesis ((TCloseparanthesis) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AFunctionDefineStatement : PFunctionDefineStatement
{
    private TFunction _function_;
    private TId _id_;
    private TOpenparanthesis _openparanthesis_;
    private PDefineParameters _define_parameters_;
    private TCloseparanthesis _closeparanthesis_;
    private TOpencurly _opencurly_;
    private PStatements _statements_;
    private TClosecurly _closecurly_;

    public AFunctionDefineStatement ()
    {
    }

    public AFunctionDefineStatement (
            TFunction _function_,
            TId _id_,
            TOpenparanthesis _openparanthesis_,
            PDefineParameters _define_parameters_,
            TCloseparanthesis _closeparanthesis_,
            TOpencurly _opencurly_,
            PStatements _statements_,
            TClosecurly _closecurly_
    )
    {
        SetFunction (_function_);
        SetId (_id_);
        SetOpenparanthesis (_openparanthesis_);
        SetDefineParameters (_define_parameters_);
        SetCloseparanthesis (_closeparanthesis_);
        SetOpencurly (_opencurly_);
        SetStatements (_statements_);
        SetClosecurly (_closecurly_);
    }

    public override Object Clone()
    {
        return new AFunctionDefineStatement (
            (TFunction)CloneNode (_function_),
            (TId)CloneNode (_id_),
            (TOpenparanthesis)CloneNode (_openparanthesis_),
            (PDefineParameters)CloneNode (_define_parameters_),
            (TCloseparanthesis)CloneNode (_closeparanthesis_),
            (TOpencurly)CloneNode (_opencurly_),
            (PStatements)CloneNode (_statements_),
            (TClosecurly)CloneNode (_closecurly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionDefineStatement(this);
    }

    public TFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (TFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenparanthesis GetOpenparanthesis ()
    {
        return _openparanthesis_;
    }

    public void SetOpenparanthesis (TOpenparanthesis node)
    {
        if(_openparanthesis_ != null)
        {
            _openparanthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparanthesis_ = node;
    }
    public PDefineParameters GetDefineParameters ()
    {
        return _define_parameters_;
    }

    public void SetDefineParameters (PDefineParameters node)
    {
        if(_define_parameters_ != null)
        {
            _define_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _define_parameters_ = node;
    }
    public TCloseparanthesis GetCloseparanthesis ()
    {
        return _closeparanthesis_;
    }

    public void SetCloseparanthesis (TCloseparanthesis node)
    {
        if(_closeparanthesis_ != null)
        {
            _closeparanthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closeparanthesis_ = node;
    }
    public TOpencurly GetOpencurly ()
    {
        return _opencurly_;
    }

    public void SetOpencurly (TOpencurly node)
    {
        if(_opencurly_ != null)
        {
            _opencurly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _opencurly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosecurly GetClosecurly ()
    {
        return _closecurly_;
    }

    public void SetClosecurly (TClosecurly node)
    {
        if(_closecurly_ != null)
        {
            _closecurly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closecurly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_)
            + ToString (_id_)
            + ToString (_openparanthesis_)
            + ToString (_define_parameters_)
            + ToString (_closeparanthesis_)
            + ToString (_opencurly_)
            + ToString (_statements_)
            + ToString (_closecurly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _openparanthesis_ == child )
        {
            _openparanthesis_ = null;
            return;
        }
        if ( _define_parameters_ == child )
        {
            _define_parameters_ = null;
            return;
        }
        if ( _closeparanthesis_ == child )
        {
            _closeparanthesis_ = null;
            return;
        }
        if ( _opencurly_ == child )
        {
            _opencurly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closecurly_ == child )
        {
            _closecurly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_ == oldChild )
        {
            SetFunction ((TFunction) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _openparanthesis_ == oldChild )
        {
            SetOpenparanthesis ((TOpenparanthesis) newChild);
            return;
        }
        if ( _define_parameters_ == oldChild )
        {
            SetDefineParameters ((PDefineParameters) newChild);
            return;
        }
        if ( _closeparanthesis_ == oldChild )
        {
            SetCloseparanthesis ((TCloseparanthesis) newChild);
            return;
        }
        if ( _opencurly_ == oldChild )
        {
            SetOpencurly ((TOpencurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closecurly_ == oldChild )
        {
            SetClosecurly ((TClosecurly) newChild);
            return;
        }
    }

}
public sealed class AMultipleDefineParameters : PDefineParameters
{
    private PDefineParameter _define_parameter_;
    private TComma _comma_;
    private PDefineParameters _define_parameters_;

    public AMultipleDefineParameters ()
    {
    }

    public AMultipleDefineParameters (
            PDefineParameter _define_parameter_,
            TComma _comma_,
            PDefineParameters _define_parameters_
    )
    {
        SetDefineParameter (_define_parameter_);
        SetComma (_comma_);
        SetDefineParameters (_define_parameters_);
    }

    public override Object Clone()
    {
        return new AMultipleDefineParameters (
            (PDefineParameter)CloneNode (_define_parameter_),
            (TComma)CloneNode (_comma_),
            (PDefineParameters)CloneNode (_define_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleDefineParameters(this);
    }

    public PDefineParameter GetDefineParameter ()
    {
        return _define_parameter_;
    }

    public void SetDefineParameter (PDefineParameter node)
    {
        if(_define_parameter_ != null)
        {
            _define_parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _define_parameter_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PDefineParameters GetDefineParameters ()
    {
        return _define_parameters_;
    }

    public void SetDefineParameters (PDefineParameters node)
    {
        if(_define_parameters_ != null)
        {
            _define_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _define_parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_define_parameter_)
            + ToString (_comma_)
            + ToString (_define_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _define_parameter_ == child )
        {
            _define_parameter_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _define_parameters_ == child )
        {
            _define_parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _define_parameter_ == oldChild )
        {
            SetDefineParameter ((PDefineParameter) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _define_parameters_ == oldChild )
        {
            SetDefineParameters ((PDefineParameters) newChild);
            return;
        }
    }

}
public sealed class ASingleDefineParameters : PDefineParameters
{
    private PDefineParameter _define_parameter_;

    public ASingleDefineParameters ()
    {
    }

    public ASingleDefineParameters (
            PDefineParameter _define_parameter_
    )
    {
        SetDefineParameter (_define_parameter_);
    }

    public override Object Clone()
    {
        return new ASingleDefineParameters (
            (PDefineParameter)CloneNode (_define_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleDefineParameters(this);
    }

    public PDefineParameter GetDefineParameter ()
    {
        return _define_parameter_;
    }

    public void SetDefineParameter (PDefineParameter node)
    {
        if(_define_parameter_ != null)
        {
            _define_parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _define_parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_define_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _define_parameter_ == child )
        {
            _define_parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _define_parameter_ == oldChild )
        {
            SetDefineParameter ((PDefineParameter) newChild);
            return;
        }
    }

}
public sealed class ANoParametersDefineParameters : PDefineParameters
{


    public ANoParametersDefineParameters (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoParametersDefineParameters (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoParametersDefineParameters(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AIntDefineParameter : PDefineParameter
{
    private TInttype _inttype_;
    private TId _id_;

    public AIntDefineParameter ()
    {
    }

    public AIntDefineParameter (
            TInttype _inttype_,
            TId _id_
    )
    {
        SetInttype (_inttype_);
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AIntDefineParameter (
            (TInttype)CloneNode (_inttype_),
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntDefineParameter(this);
    }

    public TInttype GetInttype ()
    {
        return _inttype_;
    }

    public void SetInttype (TInttype node)
    {
        if(_inttype_ != null)
        {
            _inttype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _inttype_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_inttype_)
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _inttype_ == child )
        {
            _inttype_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _inttype_ == oldChild )
        {
            SetInttype ((TInttype) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AFloatDefineParameter : PDefineParameter
{
    private TFloattype _floattype_;
    private TId _id_;

    public AFloatDefineParameter ()
    {
    }

    public AFloatDefineParameter (
            TFloattype _floattype_,
            TId _id_
    )
    {
        SetFloattype (_floattype_);
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AFloatDefineParameter (
            (TFloattype)CloneNode (_floattype_),
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatDefineParameter(this);
    }

    public TFloattype GetFloattype ()
    {
        return _floattype_;
    }

    public void SetFloattype (TFloattype node)
    {
        if(_floattype_ != null)
        {
            _floattype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _floattype_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_floattype_)
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _floattype_ == child )
        {
            _floattype_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _floattype_ == oldChild )
        {
            SetFloattype ((TFloattype) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class ACharDefineParameter : PDefineParameter
{
    private TChartype _chartype_;
    private TOpenbracket _openbracket_;
    private TInteger _integer_;
    private TClosebracket _closebracket_;
    private TId _id_;

    public ACharDefineParameter ()
    {
    }

    public ACharDefineParameter (
            TChartype _chartype_,
            TOpenbracket _openbracket_,
            TInteger _integer_,
            TClosebracket _closebracket_,
            TId _id_
    )
    {
        SetChartype (_chartype_);
        SetOpenbracket (_openbracket_);
        SetInteger (_integer_);
        SetClosebracket (_closebracket_);
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new ACharDefineParameter (
            (TChartype)CloneNode (_chartype_),
            (TOpenbracket)CloneNode (_openbracket_),
            (TInteger)CloneNode (_integer_),
            (TClosebracket)CloneNode (_closebracket_),
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACharDefineParameter(this);
    }

    public TChartype GetChartype ()
    {
        return _chartype_;
    }

    public void SetChartype (TChartype node)
    {
        if(_chartype_ != null)
        {
            _chartype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _chartype_ = node;
    }
    public TOpenbracket GetOpenbracket ()
    {
        return _openbracket_;
    }

    public void SetOpenbracket (TOpenbracket node)
    {
        if(_openbracket_ != null)
        {
            _openbracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbracket_ = node;
    }
    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }
    public TClosebracket GetClosebracket ()
    {
        return _closebracket_;
    }

    public void SetClosebracket (TClosebracket node)
    {
        if(_closebracket_ != null)
        {
            _closebracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebracket_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_chartype_)
            + ToString (_openbracket_)
            + ToString (_integer_)
            + ToString (_closebracket_)
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _chartype_ == child )
        {
            _chartype_ = null;
            return;
        }
        if ( _openbracket_ == child )
        {
            _openbracket_ = null;
            return;
        }
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
        if ( _closebracket_ == child )
        {
            _closebracket_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _chartype_ == oldChild )
        {
            SetChartype ((TChartype) newChild);
            return;
        }
        if ( _openbracket_ == oldChild )
        {
            SetOpenbracket ((TOpenbracket) newChild);
            return;
        }
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
        if ( _closebracket_ == oldChild )
        {
            SetClosebracket ((TClosebracket) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AIntAndFloatDeclareDeclareStatement : PDeclareStatement
{
    private PTypeId _type_id_;
    private TId _id_;
    private TEol _eol_;

    public AIntAndFloatDeclareDeclareStatement ()
    {
    }

    public AIntAndFloatDeclareDeclareStatement (
            PTypeId _type_id_,
            TId _id_,
            TEol _eol_
    )
    {
        SetTypeId (_type_id_);
        SetId (_id_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AIntAndFloatDeclareDeclareStatement (
            (PTypeId)CloneNode (_type_id_),
            (TId)CloneNode (_id_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntAndFloatDeclareDeclareStatement(this);
    }

    public PTypeId GetTypeId ()
    {
        return _type_id_;
    }

    public void SetTypeId (PTypeId node)
    {
        if(_type_id_ != null)
        {
            _type_id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_id_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_id_)
            + ToString (_id_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_id_ == child )
        {
            _type_id_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_id_ == oldChild )
        {
            SetTypeId ((PTypeId) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ACharDeclareDeclareStatement : PDeclareStatement
{
    private PTypeId _type_id_;
    private TId _id_;
    private TOpenbracket _openbracket_;
    private TInteger _integer_;
    private TClosebracket _closebracket_;
    private TEol _eol_;

    public ACharDeclareDeclareStatement ()
    {
    }

    public ACharDeclareDeclareStatement (
            PTypeId _type_id_,
            TId _id_,
            TOpenbracket _openbracket_,
            TInteger _integer_,
            TClosebracket _closebracket_,
            TEol _eol_
    )
    {
        SetTypeId (_type_id_);
        SetId (_id_);
        SetOpenbracket (_openbracket_);
        SetInteger (_integer_);
        SetClosebracket (_closebracket_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ACharDeclareDeclareStatement (
            (PTypeId)CloneNode (_type_id_),
            (TId)CloneNode (_id_),
            (TOpenbracket)CloneNode (_openbracket_),
            (TInteger)CloneNode (_integer_),
            (TClosebracket)CloneNode (_closebracket_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACharDeclareDeclareStatement(this);
    }

    public PTypeId GetTypeId ()
    {
        return _type_id_;
    }

    public void SetTypeId (PTypeId node)
    {
        if(_type_id_ != null)
        {
            _type_id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_id_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenbracket GetOpenbracket ()
    {
        return _openbracket_;
    }

    public void SetOpenbracket (TOpenbracket node)
    {
        if(_openbracket_ != null)
        {
            _openbracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbracket_ = node;
    }
    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }
    public TClosebracket GetClosebracket ()
    {
        return _closebracket_;
    }

    public void SetClosebracket (TClosebracket node)
    {
        if(_closebracket_ != null)
        {
            _closebracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebracket_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_id_)
            + ToString (_id_)
            + ToString (_openbracket_)
            + ToString (_integer_)
            + ToString (_closebracket_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_id_ == child )
        {
            _type_id_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _openbracket_ == child )
        {
            _openbracket_ = null;
            return;
        }
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
        if ( _closebracket_ == child )
        {
            _closebracket_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_id_ == oldChild )
        {
            SetTypeId ((PTypeId) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _openbracket_ == oldChild )
        {
            SetOpenbracket ((TOpenbracket) newChild);
            return;
        }
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
        if ( _closebracket_ == oldChild )
        {
            SetClosebracket ((TClosebracket) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AIntTypeId : PTypeId
{
    private TInttype _inttype_;

    public AIntTypeId ()
    {
    }

    public AIntTypeId (
            TInttype _inttype_
    )
    {
        SetInttype (_inttype_);
    }

    public override Object Clone()
    {
        return new AIntTypeId (
            (TInttype)CloneNode (_inttype_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntTypeId(this);
    }

    public TInttype GetInttype ()
    {
        return _inttype_;
    }

    public void SetInttype (TInttype node)
    {
        if(_inttype_ != null)
        {
            _inttype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _inttype_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_inttype_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _inttype_ == child )
        {
            _inttype_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _inttype_ == oldChild )
        {
            SetInttype ((TInttype) newChild);
            return;
        }
    }

}
public sealed class AFloatTypeId : PTypeId
{
    private TFloattype _floattype_;

    public AFloatTypeId ()
    {
    }

    public AFloatTypeId (
            TFloattype _floattype_
    )
    {
        SetFloattype (_floattype_);
    }

    public override Object Clone()
    {
        return new AFloatTypeId (
            (TFloattype)CloneNode (_floattype_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatTypeId(this);
    }

    public TFloattype GetFloattype ()
    {
        return _floattype_;
    }

    public void SetFloattype (TFloattype node)
    {
        if(_floattype_ != null)
        {
            _floattype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _floattype_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_floattype_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _floattype_ == child )
        {
            _floattype_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _floattype_ == oldChild )
        {
            SetFloattype ((TFloattype) newChild);
            return;
        }
    }

}
public sealed class ACharTypeId : PTypeId
{
    private TChartype _chartype_;

    public ACharTypeId ()
    {
    }

    public ACharTypeId (
            TChartype _chartype_
    )
    {
        SetChartype (_chartype_);
    }

    public override Object Clone()
    {
        return new ACharTypeId (
            (TChartype)CloneNode (_chartype_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACharTypeId(this);
    }

    public TChartype GetChartype ()
    {
        return _chartype_;
    }

    public void SetChartype (TChartype node)
    {
        if(_chartype_ != null)
        {
            _chartype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _chartype_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_chartype_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _chartype_ == child )
        {
            _chartype_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _chartype_ == oldChild )
        {
            SetChartype ((TChartype) newChild);
            return;
        }
    }

}
public sealed class AIntAndFloatDeclareConstantDeclaration : PConstantDeclaration
{
    private PConstTypeId _const_type_id_;
    private PAssignStatement _assign_statement_;

    public AIntAndFloatDeclareConstantDeclaration ()
    {
    }

    public AIntAndFloatDeclareConstantDeclaration (
            PConstTypeId _const_type_id_,
            PAssignStatement _assign_statement_
    )
    {
        SetConstTypeId (_const_type_id_);
        SetAssignStatement (_assign_statement_);
    }

    public override Object Clone()
    {
        return new AIntAndFloatDeclareConstantDeclaration (
            (PConstTypeId)CloneNode (_const_type_id_),
            (PAssignStatement)CloneNode (_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntAndFloatDeclareConstantDeclaration(this);
    }

    public PConstTypeId GetConstTypeId ()
    {
        return _const_type_id_;
    }

    public void SetConstTypeId (PConstTypeId node)
    {
        if(_const_type_id_ != null)
        {
            _const_type_id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_type_id_ = node;
    }
    public PAssignStatement GetAssignStatement ()
    {
        return _assign_statement_;
    }

    public void SetAssignStatement (PAssignStatement node)
    {
        if(_assign_statement_ != null)
        {
            _assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_const_type_id_)
            + ToString (_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _const_type_id_ == child )
        {
            _const_type_id_ = null;
            return;
        }
        if ( _assign_statement_ == child )
        {
            _assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _const_type_id_ == oldChild )
        {
            SetConstTypeId ((PConstTypeId) newChild);
            return;
        }
        if ( _assign_statement_ == oldChild )
        {
            SetAssignStatement ((PAssignStatement) newChild);
            return;
        }
    }

}
public sealed class ACharDeclareConstantDeclaration : PConstantDeclaration
{
    private PConstTypeId _const_type_id_;
    private TId _id_;
    private TOpenbracket _openbracket_;
    private TInteger _integer_;
    private TClosebracket _closebracket_;
    private TAssign _assign_;
    private TString _string_;
    private TEol _eol_;

    public ACharDeclareConstantDeclaration ()
    {
    }

    public ACharDeclareConstantDeclaration (
            PConstTypeId _const_type_id_,
            TId _id_,
            TOpenbracket _openbracket_,
            TInteger _integer_,
            TClosebracket _closebracket_,
            TAssign _assign_,
            TString _string_,
            TEol _eol_
    )
    {
        SetConstTypeId (_const_type_id_);
        SetId (_id_);
        SetOpenbracket (_openbracket_);
        SetInteger (_integer_);
        SetClosebracket (_closebracket_);
        SetAssign (_assign_);
        SetString (_string_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ACharDeclareConstantDeclaration (
            (PConstTypeId)CloneNode (_const_type_id_),
            (TId)CloneNode (_id_),
            (TOpenbracket)CloneNode (_openbracket_),
            (TInteger)CloneNode (_integer_),
            (TClosebracket)CloneNode (_closebracket_),
            (TAssign)CloneNode (_assign_),
            (TString)CloneNode (_string_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACharDeclareConstantDeclaration(this);
    }

    public PConstTypeId GetConstTypeId ()
    {
        return _const_type_id_;
    }

    public void SetConstTypeId (PConstTypeId node)
    {
        if(_const_type_id_ != null)
        {
            _const_type_id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_type_id_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenbracket GetOpenbracket ()
    {
        return _openbracket_;
    }

    public void SetOpenbracket (TOpenbracket node)
    {
        if(_openbracket_ != null)
        {
            _openbracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbracket_ = node;
    }
    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }
    public TClosebracket GetClosebracket ()
    {
        return _closebracket_;
    }

    public void SetClosebracket (TClosebracket node)
    {
        if(_closebracket_ != null)
        {
            _closebracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebracket_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_const_type_id_)
            + ToString (_id_)
            + ToString (_openbracket_)
            + ToString (_integer_)
            + ToString (_closebracket_)
            + ToString (_assign_)
            + ToString (_string_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _const_type_id_ == child )
        {
            _const_type_id_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _openbracket_ == child )
        {
            _openbracket_ = null;
            return;
        }
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
        if ( _closebracket_ == child )
        {
            _closebracket_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _const_type_id_ == oldChild )
        {
            SetConstTypeId ((PConstTypeId) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _openbracket_ == oldChild )
        {
            SetOpenbracket ((TOpenbracket) newChild);
            return;
        }
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
        if ( _closebracket_ == oldChild )
        {
            SetClosebracket ((TClosebracket) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AIntConstTypeId : PConstTypeId
{
    private TConstint _constint_;

    public AIntConstTypeId ()
    {
    }

    public AIntConstTypeId (
            TConstint _constint_
    )
    {
        SetConstint (_constint_);
    }

    public override Object Clone()
    {
        return new AIntConstTypeId (
            (TConstint)CloneNode (_constint_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntConstTypeId(this);
    }

    public TConstint GetConstint ()
    {
        return _constint_;
    }

    public void SetConstint (TConstint node)
    {
        if(_constint_ != null)
        {
            _constint_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constint_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constint_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constint_ == child )
        {
            _constint_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constint_ == oldChild )
        {
            SetConstint ((TConstint) newChild);
            return;
        }
    }

}
public sealed class AFloatConstTypeId : PConstTypeId
{
    private TConstfloat _constfloat_;

    public AFloatConstTypeId ()
    {
    }

    public AFloatConstTypeId (
            TConstfloat _constfloat_
    )
    {
        SetConstfloat (_constfloat_);
    }

    public override Object Clone()
    {
        return new AFloatConstTypeId (
            (TConstfloat)CloneNode (_constfloat_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatConstTypeId(this);
    }

    public TConstfloat GetConstfloat ()
    {
        return _constfloat_;
    }

    public void SetConstfloat (TConstfloat node)
    {
        if(_constfloat_ != null)
        {
            _constfloat_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constfloat_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constfloat_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constfloat_ == child )
        {
            _constfloat_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constfloat_ == oldChild )
        {
            SetConstfloat ((TConstfloat) newChild);
            return;
        }
    }

}
public sealed class ACharConstTypeId : PConstTypeId
{
    private TConstchar _constchar_;

    public ACharConstTypeId ()
    {
    }

    public ACharConstTypeId (
            TConstchar _constchar_
    )
    {
        SetConstchar (_constchar_);
    }

    public override Object Clone()
    {
        return new ACharConstTypeId (
            (TConstchar)CloneNode (_constchar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACharConstTypeId(this);
    }

    public TConstchar GetConstchar ()
    {
        return _constchar_;
    }

    public void SetConstchar (TConstchar node)
    {
        if(_constchar_ != null)
        {
            _constchar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constchar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constchar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constchar_ == child )
        {
            _constchar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constchar_ == oldChild )
        {
            SetConstchar ((TConstchar) newChild);
            return;
        }
    }

}
public sealed class AMultipleParameters : PParameters
{
    private PParameter _parameter_;
    private TComma _comma_;
    private PParameters _parameters_;

    public AMultipleParameters ()
    {
    }

    public AMultipleParameters (
            PParameter _parameter_,
            TComma _comma_,
            PParameters _parameters_
    )
    {
        SetParameter (_parameter_);
        SetComma (_comma_);
        SetParameters (_parameters_);
    }

    public override Object Clone()
    {
        return new AMultipleParameters (
            (PParameter)CloneNode (_parameter_),
            (TComma)CloneNode (_comma_),
            (PParameters)CloneNode (_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleParameters(this);
    }

    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameter_)
            + ToString (_comma_)
            + ToString (_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
    }

}
public sealed class ASingleParameters : PParameters
{
    private PParameter _parameter_;

    public ASingleParameters ()
    {
    }

    public ASingleParameters (
            PParameter _parameter_
    )
    {
        SetParameter (_parameter_);
    }

    public override Object Clone()
    {
        return new ASingleParameters (
            (PParameter)CloneNode (_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleParameters(this);
    }

    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
    }

}
public sealed class ANoParameterParameters : PParameters
{


    public ANoParameterParameters (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoParameterParameters (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoParameterParameters(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AParameter : PParameter
{
    private POperand _operand_;

    public AParameter ()
    {
    }

    public AParameter (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new AParameter (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParameter(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AIfElseConditional : PIfElseConditional
{
    private TIf _if_;
    private PConditionals _conditionals_;
    private TOpencurly _ifopen_;
    private PStatements _ifstatements_;
    private TClosecurly _ifclose_;
    private TElse _else_;
    private TOpencurly _elseopen_;
    private PStatements _elsestatements_;
    private TClosecurly _elseclose_;

    public AIfElseConditional ()
    {
    }

    public AIfElseConditional (
            TIf _if_,
            PConditionals _conditionals_,
            TOpencurly _ifopen_,
            PStatements _ifstatements_,
            TClosecurly _ifclose_,
            TElse _else_,
            TOpencurly _elseopen_,
            PStatements _elsestatements_,
            TClosecurly _elseclose_
    )
    {
        SetIf (_if_);
        SetConditionals (_conditionals_);
        SetIfopen (_ifopen_);
        SetIfstatements (_ifstatements_);
        SetIfclose (_ifclose_);
        SetElse (_else_);
        SetElseopen (_elseopen_);
        SetElsestatements (_elsestatements_);
        SetElseclose (_elseclose_);
    }

    public override Object Clone()
    {
        return new AIfElseConditional (
            (TIf)CloneNode (_if_),
            (PConditionals)CloneNode (_conditionals_),
            (TOpencurly)CloneNode (_ifopen_),
            (PStatements)CloneNode (_ifstatements_),
            (TClosecurly)CloneNode (_ifclose_),
            (TElse)CloneNode (_else_),
            (TOpencurly)CloneNode (_elseopen_),
            (PStatements)CloneNode (_elsestatements_),
            (TClosecurly)CloneNode (_elseclose_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfElseConditional(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public PConditionals GetConditionals ()
    {
        return _conditionals_;
    }

    public void SetConditionals (PConditionals node)
    {
        if(_conditionals_ != null)
        {
            _conditionals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditionals_ = node;
    }
    public TOpencurly GetIfopen ()
    {
        return _ifopen_;
    }

    public void SetIfopen (TOpencurly node)
    {
        if(_ifopen_ != null)
        {
            _ifopen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ifopen_ = node;
    }
    public PStatements GetIfstatements ()
    {
        return _ifstatements_;
    }

    public void SetIfstatements (PStatements node)
    {
        if(_ifstatements_ != null)
        {
            _ifstatements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ifstatements_ = node;
    }
    public TClosecurly GetIfclose ()
    {
        return _ifclose_;
    }

    public void SetIfclose (TClosecurly node)
    {
        if(_ifclose_ != null)
        {
            _ifclose_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ifclose_ = node;
    }
    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public TOpencurly GetElseopen ()
    {
        return _elseopen_;
    }

    public void SetElseopen (TOpencurly node)
    {
        if(_elseopen_ != null)
        {
            _elseopen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elseopen_ = node;
    }
    public PStatements GetElsestatements ()
    {
        return _elsestatements_;
    }

    public void SetElsestatements (PStatements node)
    {
        if(_elsestatements_ != null)
        {
            _elsestatements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elsestatements_ = node;
    }
    public TClosecurly GetElseclose ()
    {
        return _elseclose_;
    }

    public void SetElseclose (TClosecurly node)
    {
        if(_elseclose_ != null)
        {
            _elseclose_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elseclose_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_conditionals_)
            + ToString (_ifopen_)
            + ToString (_ifstatements_)
            + ToString (_ifclose_)
            + ToString (_else_)
            + ToString (_elseopen_)
            + ToString (_elsestatements_)
            + ToString (_elseclose_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _conditionals_ == child )
        {
            _conditionals_ = null;
            return;
        }
        if ( _ifopen_ == child )
        {
            _ifopen_ = null;
            return;
        }
        if ( _ifstatements_ == child )
        {
            _ifstatements_ = null;
            return;
        }
        if ( _ifclose_ == child )
        {
            _ifclose_ = null;
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _elseopen_ == child )
        {
            _elseopen_ = null;
            return;
        }
        if ( _elsestatements_ == child )
        {
            _elsestatements_ = null;
            return;
        }
        if ( _elseclose_ == child )
        {
            _elseclose_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _conditionals_ == oldChild )
        {
            SetConditionals ((PConditionals) newChild);
            return;
        }
        if ( _ifopen_ == oldChild )
        {
            SetIfopen ((TOpencurly) newChild);
            return;
        }
        if ( _ifstatements_ == oldChild )
        {
            SetIfstatements ((PStatements) newChild);
            return;
        }
        if ( _ifclose_ == oldChild )
        {
            SetIfclose ((TClosecurly) newChild);
            return;
        }
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        if ( _elseopen_ == oldChild )
        {
            SetElseopen ((TOpencurly) newChild);
            return;
        }
        if ( _elsestatements_ == oldChild )
        {
            SetElsestatements ((PStatements) newChild);
            return;
        }
        if ( _elseclose_ == oldChild )
        {
            SetElseclose ((TClosecurly) newChild);
            return;
        }
    }

}
public sealed class AWhileLoop : PWhileLoop
{
    private TWhile _while_;
    private PConditionals _conditionals_;
    private TOpencurly _opencurly_;
    private PStatements _statements_;
    private TClosecurly _closecurly_;

    public AWhileLoop ()
    {
    }

    public AWhileLoop (
            TWhile _while_,
            PConditionals _conditionals_,
            TOpencurly _opencurly_,
            PStatements _statements_,
            TClosecurly _closecurly_
    )
    {
        SetWhile (_while_);
        SetConditionals (_conditionals_);
        SetOpencurly (_opencurly_);
        SetStatements (_statements_);
        SetClosecurly (_closecurly_);
    }

    public override Object Clone()
    {
        return new AWhileLoop (
            (TWhile)CloneNode (_while_),
            (PConditionals)CloneNode (_conditionals_),
            (TOpencurly)CloneNode (_opencurly_),
            (PStatements)CloneNode (_statements_),
            (TClosecurly)CloneNode (_closecurly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileLoop(this);
    }

    public TWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (TWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }
    public PConditionals GetConditionals ()
    {
        return _conditionals_;
    }

    public void SetConditionals (PConditionals node)
    {
        if(_conditionals_ != null)
        {
            _conditionals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditionals_ = node;
    }
    public TOpencurly GetOpencurly ()
    {
        return _opencurly_;
    }

    public void SetOpencurly (TOpencurly node)
    {
        if(_opencurly_ != null)
        {
            _opencurly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _opencurly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosecurly GetClosecurly ()
    {
        return _closecurly_;
    }

    public void SetClosecurly (TClosecurly node)
    {
        if(_closecurly_ != null)
        {
            _closecurly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closecurly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
            + ToString (_conditionals_)
            + ToString (_opencurly_)
            + ToString (_statements_)
            + ToString (_closecurly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
        if ( _conditionals_ == child )
        {
            _conditionals_ = null;
            return;
        }
        if ( _opencurly_ == child )
        {
            _opencurly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closecurly_ == child )
        {
            _closecurly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((TWhile) newChild);
            return;
        }
        if ( _conditionals_ == oldChild )
        {
            SetConditionals ((PConditionals) newChild);
            return;
        }
        if ( _opencurly_ == oldChild )
        {
            SetOpencurly ((TOpencurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closecurly_ == oldChild )
        {
            SetClosecurly ((TClosecurly) newChild);
            return;
        }
    }

}
public sealed class AMultipleConditionals : PConditionals
{
    private TOpenparanthesis _openparanthesis_;
    private PConditional _conditional_;
    private PBooleanToken _boolean_token_;
    private PConditionals _conditionals_;
    private TCloseparanthesis _closeparanthesis_;

    public AMultipleConditionals ()
    {
    }

    public AMultipleConditionals (
            TOpenparanthesis _openparanthesis_,
            PConditional _conditional_,
            PBooleanToken _boolean_token_,
            PConditionals _conditionals_,
            TCloseparanthesis _closeparanthesis_
    )
    {
        SetOpenparanthesis (_openparanthesis_);
        SetConditional (_conditional_);
        SetBooleanToken (_boolean_token_);
        SetConditionals (_conditionals_);
        SetCloseparanthesis (_closeparanthesis_);
    }

    public override Object Clone()
    {
        return new AMultipleConditionals (
            (TOpenparanthesis)CloneNode (_openparanthesis_),
            (PConditional)CloneNode (_conditional_),
            (PBooleanToken)CloneNode (_boolean_token_),
            (PConditionals)CloneNode (_conditionals_),
            (TCloseparanthesis)CloneNode (_closeparanthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleConditionals(this);
    }

    public TOpenparanthesis GetOpenparanthesis ()
    {
        return _openparanthesis_;
    }

    public void SetOpenparanthesis (TOpenparanthesis node)
    {
        if(_openparanthesis_ != null)
        {
            _openparanthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparanthesis_ = node;
    }
    public PConditional GetConditional ()
    {
        return _conditional_;
    }

    public void SetConditional (PConditional node)
    {
        if(_conditional_ != null)
        {
            _conditional_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditional_ = node;
    }
    public PBooleanToken GetBooleanToken ()
    {
        return _boolean_token_;
    }

    public void SetBooleanToken (PBooleanToken node)
    {
        if(_boolean_token_ != null)
        {
            _boolean_token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_token_ = node;
    }
    public PConditionals GetConditionals ()
    {
        return _conditionals_;
    }

    public void SetConditionals (PConditionals node)
    {
        if(_conditionals_ != null)
        {
            _conditionals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditionals_ = node;
    }
    public TCloseparanthesis GetCloseparanthesis ()
    {
        return _closeparanthesis_;
    }

    public void SetCloseparanthesis (TCloseparanthesis node)
    {
        if(_closeparanthesis_ != null)
        {
            _closeparanthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closeparanthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_openparanthesis_)
            + ToString (_conditional_)
            + ToString (_boolean_token_)
            + ToString (_conditionals_)
            + ToString (_closeparanthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _openparanthesis_ == child )
        {
            _openparanthesis_ = null;
            return;
        }
        if ( _conditional_ == child )
        {
            _conditional_ = null;
            return;
        }
        if ( _boolean_token_ == child )
        {
            _boolean_token_ = null;
            return;
        }
        if ( _conditionals_ == child )
        {
            _conditionals_ = null;
            return;
        }
        if ( _closeparanthesis_ == child )
        {
            _closeparanthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _openparanthesis_ == oldChild )
        {
            SetOpenparanthesis ((TOpenparanthesis) newChild);
            return;
        }
        if ( _conditional_ == oldChild )
        {
            SetConditional ((PConditional) newChild);
            return;
        }
        if ( _boolean_token_ == oldChild )
        {
            SetBooleanToken ((PBooleanToken) newChild);
            return;
        }
        if ( _conditionals_ == oldChild )
        {
            SetConditionals ((PConditionals) newChild);
            return;
        }
        if ( _closeparanthesis_ == oldChild )
        {
            SetCloseparanthesis ((TCloseparanthesis) newChild);
            return;
        }
    }

}
public sealed class ASingleConditionals : PConditionals
{
    private PConditional _conditional_;

    public ASingleConditionals ()
    {
    }

    public ASingleConditionals (
            PConditional _conditional_
    )
    {
        SetConditional (_conditional_);
    }

    public override Object Clone()
    {
        return new ASingleConditionals (
            (PConditional)CloneNode (_conditional_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleConditionals(this);
    }

    public PConditional GetConditional ()
    {
        return _conditional_;
    }

    public void SetConditional (PConditional node)
    {
        if(_conditional_ != null)
        {
            _conditional_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditional_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_conditional_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _conditional_ == child )
        {
            _conditional_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _conditional_ == oldChild )
        {
            SetConditional ((PConditional) newChild);
            return;
        }
    }

}
public sealed class AConditional : PConditional
{
    private TOpenparanthesis _openparanthesis_;
    private POperand _var1_;
    private PConditionalToken _conditional_token_;
    private POperand _var2_;
    private TCloseparanthesis _closeparanthesis_;

    public AConditional ()
    {
    }

    public AConditional (
            TOpenparanthesis _openparanthesis_,
            POperand _var1_,
            PConditionalToken _conditional_token_,
            POperand _var2_,
            TCloseparanthesis _closeparanthesis_
    )
    {
        SetOpenparanthesis (_openparanthesis_);
        SetVar1 (_var1_);
        SetConditionalToken (_conditional_token_);
        SetVar2 (_var2_);
        SetCloseparanthesis (_closeparanthesis_);
    }

    public override Object Clone()
    {
        return new AConditional (
            (TOpenparanthesis)CloneNode (_openparanthesis_),
            (POperand)CloneNode (_var1_),
            (PConditionalToken)CloneNode (_conditional_token_),
            (POperand)CloneNode (_var2_),
            (TCloseparanthesis)CloneNode (_closeparanthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConditional(this);
    }

    public TOpenparanthesis GetOpenparanthesis ()
    {
        return _openparanthesis_;
    }

    public void SetOpenparanthesis (TOpenparanthesis node)
    {
        if(_openparanthesis_ != null)
        {
            _openparanthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparanthesis_ = node;
    }
    public POperand GetVar1 ()
    {
        return _var1_;
    }

    public void SetVar1 (POperand node)
    {
        if(_var1_ != null)
        {
            _var1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var1_ = node;
    }
    public PConditionalToken GetConditionalToken ()
    {
        return _conditional_token_;
    }

    public void SetConditionalToken (PConditionalToken node)
    {
        if(_conditional_token_ != null)
        {
            _conditional_token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditional_token_ = node;
    }
    public POperand GetVar2 ()
    {
        return _var2_;
    }

    public void SetVar2 (POperand node)
    {
        if(_var2_ != null)
        {
            _var2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var2_ = node;
    }
    public TCloseparanthesis GetCloseparanthesis ()
    {
        return _closeparanthesis_;
    }

    public void SetCloseparanthesis (TCloseparanthesis node)
    {
        if(_closeparanthesis_ != null)
        {
            _closeparanthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closeparanthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_openparanthesis_)
            + ToString (_var1_)
            + ToString (_conditional_token_)
            + ToString (_var2_)
            + ToString (_closeparanthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _openparanthesis_ == child )
        {
            _openparanthesis_ = null;
            return;
        }
        if ( _var1_ == child )
        {
            _var1_ = null;
            return;
        }
        if ( _conditional_token_ == child )
        {
            _conditional_token_ = null;
            return;
        }
        if ( _var2_ == child )
        {
            _var2_ = null;
            return;
        }
        if ( _closeparanthesis_ == child )
        {
            _closeparanthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _openparanthesis_ == oldChild )
        {
            SetOpenparanthesis ((TOpenparanthesis) newChild);
            return;
        }
        if ( _var1_ == oldChild )
        {
            SetVar1 ((POperand) newChild);
            return;
        }
        if ( _conditional_token_ == oldChild )
        {
            SetConditionalToken ((PConditionalToken) newChild);
            return;
        }
        if ( _var2_ == oldChild )
        {
            SetVar2 ((POperand) newChild);
            return;
        }
        if ( _closeparanthesis_ == oldChild )
        {
            SetCloseparanthesis ((TCloseparanthesis) newChild);
            return;
        }
    }

}
public sealed class AEqualConditionalToken : PConditionalToken
{
    private TEquivalence _equivalence_;

    public AEqualConditionalToken ()
    {
    }

    public AEqualConditionalToken (
            TEquivalence _equivalence_
    )
    {
        SetEquivalence (_equivalence_);
    }

    public override Object Clone()
    {
        return new AEqualConditionalToken (
            (TEquivalence)CloneNode (_equivalence_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualConditionalToken(this);
    }

    public TEquivalence GetEquivalence ()
    {
        return _equivalence_;
    }

    public void SetEquivalence (TEquivalence node)
    {
        if(_equivalence_ != null)
        {
            _equivalence_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equivalence_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_equivalence_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _equivalence_ == child )
        {
            _equivalence_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _equivalence_ == oldChild )
        {
            SetEquivalence ((TEquivalence) newChild);
            return;
        }
    }

}
public sealed class ANotConditionalToken : PConditionalToken
{
    private TNottoken _nottoken_;

    public ANotConditionalToken ()
    {
    }

    public ANotConditionalToken (
            TNottoken _nottoken_
    )
    {
        SetNottoken (_nottoken_);
    }

    public override Object Clone()
    {
        return new ANotConditionalToken (
            (TNottoken)CloneNode (_nottoken_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotConditionalToken(this);
    }

    public TNottoken GetNottoken ()
    {
        return _nottoken_;
    }

    public void SetNottoken (TNottoken node)
    {
        if(_nottoken_ != null)
        {
            _nottoken_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nottoken_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_nottoken_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _nottoken_ == child )
        {
            _nottoken_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _nottoken_ == oldChild )
        {
            SetNottoken ((TNottoken) newChild);
            return;
        }
    }

}
public sealed class AGreaterConditionalToken : PConditionalToken
{
    private TGreater _greater_;

    public AGreaterConditionalToken ()
    {
    }

    public AGreaterConditionalToken (
            TGreater _greater_
    )
    {
        SetGreater (_greater_);
    }

    public override Object Clone()
    {
        return new AGreaterConditionalToken (
            (TGreater)CloneNode (_greater_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterConditionalToken(this);
    }

    public TGreater GetGreater ()
    {
        return _greater_;
    }

    public void SetGreater (TGreater node)
    {
        if(_greater_ != null)
        {
            _greater_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_greater_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _greater_ == child )
        {
            _greater_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _greater_ == oldChild )
        {
            SetGreater ((TGreater) newChild);
            return;
        }
    }

}
public sealed class ALessConditionalToken : PConditionalToken
{
    private TLess _less_;

    public ALessConditionalToken ()
    {
    }

    public ALessConditionalToken (
            TLess _less_
    )
    {
        SetLess (_less_);
    }

    public override Object Clone()
    {
        return new ALessConditionalToken (
            (TLess)CloneNode (_less_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessConditionalToken(this);
    }

    public TLess GetLess ()
    {
        return _less_;
    }

    public void SetLess (TLess node)
    {
        if(_less_ != null)
        {
            _less_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_less_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _less_ == child )
        {
            _less_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _less_ == oldChild )
        {
            SetLess ((TLess) newChild);
            return;
        }
    }

}
public sealed class AGreaterOrEqualConditionalToken : PConditionalToken
{
    private TGreaterequal _greaterequal_;

    public AGreaterOrEqualConditionalToken ()
    {
    }

    public AGreaterOrEqualConditionalToken (
            TGreaterequal _greaterequal_
    )
    {
        SetGreaterequal (_greaterequal_);
    }

    public override Object Clone()
    {
        return new AGreaterOrEqualConditionalToken (
            (TGreaterequal)CloneNode (_greaterequal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterOrEqualConditionalToken(this);
    }

    public TGreaterequal GetGreaterequal ()
    {
        return _greaterequal_;
    }

    public void SetGreaterequal (TGreaterequal node)
    {
        if(_greaterequal_ != null)
        {
            _greaterequal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greaterequal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_greaterequal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _greaterequal_ == child )
        {
            _greaterequal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _greaterequal_ == oldChild )
        {
            SetGreaterequal ((TGreaterequal) newChild);
            return;
        }
    }

}
public sealed class ALessOrEqualConditionalToken : PConditionalToken
{
    private TLessequal _lessequal_;

    public ALessOrEqualConditionalToken ()
    {
    }

    public ALessOrEqualConditionalToken (
            TLessequal _lessequal_
    )
    {
        SetLessequal (_lessequal_);
    }

    public override Object Clone()
    {
        return new ALessOrEqualConditionalToken (
            (TLessequal)CloneNode (_lessequal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessOrEqualConditionalToken(this);
    }

    public TLessequal GetLessequal ()
    {
        return _lessequal_;
    }

    public void SetLessequal (TLessequal node)
    {
        if(_lessequal_ != null)
        {
            _lessequal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lessequal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lessequal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lessequal_ == child )
        {
            _lessequal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lessequal_ == oldChild )
        {
            SetLessequal ((TLessequal) newChild);
            return;
        }
    }

}
public sealed class AAndtokenBooleanToken : PBooleanToken
{
    private TAnd _and_;

    public AAndtokenBooleanToken ()
    {
    }

    public AAndtokenBooleanToken (
            TAnd _and_
    )
    {
        SetAnd (_and_);
    }

    public override Object Clone()
    {
        return new AAndtokenBooleanToken (
            (TAnd)CloneNode (_and_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndtokenBooleanToken(this);
    }

    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_and_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
    }

}
public sealed class AOrtokenBooleanToken : PBooleanToken
{
    private TOr _or_;

    public AOrtokenBooleanToken ()
    {
    }

    public AOrtokenBooleanToken (
            TOr _or_
    )
    {
        SetOr (_or_);
    }

    public override Object Clone()
    {
        return new AOrtokenBooleanToken (
            (TOr)CloneNode (_or_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrtokenBooleanToken(this);
    }

    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_or_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
    }

}
public sealed class AIntAndFloatAssignAssignStatement : PAssignStatement
{
    private TId _id_;
    private TAssign _assign_;
    private PExpression _expression_;
    private TEol _eol_;

    public AIntAndFloatAssignAssignStatement ()
    {
    }

    public AIntAndFloatAssignAssignStatement (
            TId _id_,
            TAssign _assign_,
            PExpression _expression_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetExpression (_expression_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AIntAndFloatAssignAssignStatement (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntAndFloatAssignAssignStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expression_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AStringAssignAssignStatement : PAssignStatement
{
    private TId _id_;
    private TAssign _assign_;
    private TString _string_;
    private TEol _eol_;

    public AStringAssignAssignStatement ()
    {
    }

    public AStringAssignAssignStatement (
            TId _id_,
            TAssign _assign_,
            TString _string_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetString (_string_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AStringAssignAssignStatement (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (TString)CloneNode (_string_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringAssignAssignStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_string_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ALogicalorExpression : PExpression
{
    private PExpression _expression_;
    private TOr _or_;
    private PExpression2 _expression2_;

    public ALogicalorExpression ()
    {
    }

    public ALogicalorExpression (
            PExpression _expression_,
            TOr _or_,
            PExpression2 _expression2_
    )
    {
        SetExpression (_expression_);
        SetOr (_or_);
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new ALogicalorExpression (
            (PExpression)CloneNode (_expression_),
            (TOr)CloneNode (_or_),
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALogicalorExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }
    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_or_)
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class APassExpression : PExpression
{
    private PExpression2 _expression2_;

    public APassExpression ()
    {
    }

    public APassExpression (
            PExpression2 _expression2_
    )
    {
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new APassExpression (
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class ALogicalandExpression2 : PExpression2
{
    private PExpression2 _expression2_;
    private TAnd _and_;
    private PExpression3 _expression3_;

    public ALogicalandExpression2 ()
    {
    }

    public ALogicalandExpression2 (
            PExpression2 _expression2_,
            TAnd _and_,
            PExpression3 _expression3_
    )
    {
        SetExpression2 (_expression2_);
        SetAnd (_and_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new ALogicalandExpression2 (
            (PExpression2)CloneNode (_expression2_),
            (TAnd)CloneNode (_and_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALogicalandExpression2(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }
    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
            + ToString (_and_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class APassExpression2 : PExpression2
{
    private PExpression3 _expression3_;

    public APassExpression2 ()
    {
    }

    public APassExpression2 (
            PExpression3 _expression3_
    )
    {
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new APassExpression2 (
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression2(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class AEqualExpression3 : PExpression3
{
    private PExpression3 _expression3_;
    private TEquivalence _equivalence_;
    private PExpression4 _expression4_;

    public AEqualExpression3 ()
    {
    }

    public AEqualExpression3 (
            PExpression3 _expression3_,
            TEquivalence _equivalence_,
            PExpression4 _expression4_
    )
    {
        SetExpression3 (_expression3_);
        SetEquivalence (_equivalence_);
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new AEqualExpression3 (
            (PExpression3)CloneNode (_expression3_),
            (TEquivalence)CloneNode (_equivalence_),
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualExpression3(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }
    public TEquivalence GetEquivalence ()
    {
        return _equivalence_;
    }

    public void SetEquivalence (TEquivalence node)
    {
        if(_equivalence_ != null)
        {
            _equivalence_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equivalence_ = node;
    }
    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
            + ToString (_equivalence_)
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
        if ( _equivalence_ == child )
        {
            _equivalence_ = null;
            return;
        }
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
        if ( _equivalence_ == oldChild )
        {
            SetEquivalence ((TEquivalence) newChild);
            return;
        }
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class ANotequalExpression3 : PExpression3
{
    private PExpression3 _expression3_;
    private TNottoken _nottoken_;
    private PExpression4 _expression4_;

    public ANotequalExpression3 ()
    {
    }

    public ANotequalExpression3 (
            PExpression3 _expression3_,
            TNottoken _nottoken_,
            PExpression4 _expression4_
    )
    {
        SetExpression3 (_expression3_);
        SetNottoken (_nottoken_);
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new ANotequalExpression3 (
            (PExpression3)CloneNode (_expression3_),
            (TNottoken)CloneNode (_nottoken_),
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotequalExpression3(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }
    public TNottoken GetNottoken ()
    {
        return _nottoken_;
    }

    public void SetNottoken (TNottoken node)
    {
        if(_nottoken_ != null)
        {
            _nottoken_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nottoken_ = node;
    }
    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
            + ToString (_nottoken_)
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
        if ( _nottoken_ == child )
        {
            _nottoken_ = null;
            return;
        }
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
        if ( _nottoken_ == oldChild )
        {
            SetNottoken ((TNottoken) newChild);
            return;
        }
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class APassExpression3 : PExpression3
{
    private PExpression4 _expression4_;

    public APassExpression3 ()
    {
    }

    public APassExpression3 (
            PExpression4 _expression4_
    )
    {
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new APassExpression3 (
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression3(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class ALessthanExpression4 : PExpression4
{
    private PExpression4 _expression4_;
    private TLess _less_;
    private PExpression5 _expression5_;

    public ALessthanExpression4 ()
    {
    }

    public ALessthanExpression4 (
            PExpression4 _expression4_,
            TLess _less_,
            PExpression5 _expression5_
    )
    {
        SetExpression4 (_expression4_);
        SetLess (_less_);
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new ALessthanExpression4 (
            (PExpression4)CloneNode (_expression4_),
            (TLess)CloneNode (_less_),
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessthanExpression4(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }
    public TLess GetLess ()
    {
        return _less_;
    }

    public void SetLess (TLess node)
    {
        if(_less_ != null)
        {
            _less_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_ = node;
    }
    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
            + ToString (_less_)
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
        if ( _less_ == child )
        {
            _less_ = null;
            return;
        }
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
        if ( _less_ == oldChild )
        {
            SetLess ((TLess) newChild);
            return;
        }
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class AGreaterthanExpression4 : PExpression4
{
    private PExpression4 _expression4_;
    private TGreater _greater_;
    private PExpression5 _expression5_;

    public AGreaterthanExpression4 ()
    {
    }

    public AGreaterthanExpression4 (
            PExpression4 _expression4_,
            TGreater _greater_,
            PExpression5 _expression5_
    )
    {
        SetExpression4 (_expression4_);
        SetGreater (_greater_);
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new AGreaterthanExpression4 (
            (PExpression4)CloneNode (_expression4_),
            (TGreater)CloneNode (_greater_),
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterthanExpression4(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }
    public TGreater GetGreater ()
    {
        return _greater_;
    }

    public void SetGreater (TGreater node)
    {
        if(_greater_ != null)
        {
            _greater_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_ = node;
    }
    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
            + ToString (_greater_)
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
        if ( _greater_ == child )
        {
            _greater_ = null;
            return;
        }
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
        if ( _greater_ == oldChild )
        {
            SetGreater ((TGreater) newChild);
            return;
        }
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class APassExpression4 : PExpression4
{
    private PExpression5 _expression5_;

    public APassExpression4 ()
    {
    }

    public APassExpression4 (
            PExpression5 _expression5_
    )
    {
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new APassExpression4 (
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression4(this);
    }

    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class AAddExpression5 : PExpression5
{
    private PExpression5 _expression5_;
    private TPlus _plus_;
    private PExpression6 _expression6_;

    public AAddExpression5 ()
    {
    }

    public AAddExpression5 (
            PExpression5 _expression5_,
            TPlus _plus_,
            PExpression6 _expression6_
    )
    {
        SetExpression5 (_expression5_);
        SetPlus (_plus_);
        SetExpression6 (_expression6_);
    }

    public override Object Clone()
    {
        return new AAddExpression5 (
            (PExpression5)CloneNode (_expression5_),
            (TPlus)CloneNode (_plus_),
            (PExpression6)CloneNode (_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddExpression5(this);
    }

    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression5_)
            + ToString (_plus_)
            + ToString (_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
    }

}
public sealed class APassExpression5 : PExpression5
{
    private PExpression6 _expression6_;

    public APassExpression5 ()
    {
    }

    public APassExpression5 (
            PExpression6 _expression6_
    )
    {
        SetExpression6 (_expression6_);
    }

    public override Object Clone()
    {
        return new APassExpression5 (
            (PExpression6)CloneNode (_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression5(this);
    }

    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
    }

}
public sealed class AMinusExpression6 : PExpression6
{
    private PExpression6 _expression6_;
    private TMinus _minus_;
    private PExpression7 _expression7_;

    public AMinusExpression6 ()
    {
    }

    public AMinusExpression6 (
            PExpression6 _expression6_,
            TMinus _minus_,
            PExpression7 _expression7_
    )
    {
        SetExpression6 (_expression6_);
        SetMinus (_minus_);
        SetExpression7 (_expression7_);
    }

    public override Object Clone()
    {
        return new AMinusExpression6 (
            (PExpression6)CloneNode (_expression6_),
            (TMinus)CloneNode (_minus_),
            (PExpression7)CloneNode (_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMinusExpression6(this);
    }

    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PExpression7 GetExpression7 ()
    {
        return _expression7_;
    }

    public void SetExpression7 (PExpression7 node)
    {
        if(_expression7_ != null)
        {
            _expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression6_)
            + ToString (_minus_)
            + ToString (_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _expression7_ == child )
        {
            _expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _expression7_ == oldChild )
        {
            SetExpression7 ((PExpression7) newChild);
            return;
        }
    }

}
public sealed class APassExpression6 : PExpression6
{
    private PExpression7 _expression7_;

    public APassExpression6 ()
    {
    }

    public APassExpression6 (
            PExpression7 _expression7_
    )
    {
        SetExpression7 (_expression7_);
    }

    public override Object Clone()
    {
        return new APassExpression6 (
            (PExpression7)CloneNode (_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression6(this);
    }

    public PExpression7 GetExpression7 ()
    {
        return _expression7_;
    }

    public void SetExpression7 (PExpression7 node)
    {
        if(_expression7_ != null)
        {
            _expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression7_ == child )
        {
            _expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression7_ == oldChild )
        {
            SetExpression7 ((PExpression7) newChild);
            return;
        }
    }

}
public sealed class AMultiplyExpression7 : PExpression7
{
    private PExpression7 _expression7_;
    private TMult _mult_;
    private PExpression8 _expression8_;

    public AMultiplyExpression7 ()
    {
    }

    public AMultiplyExpression7 (
            PExpression7 _expression7_,
            TMult _mult_,
            PExpression8 _expression8_
    )
    {
        SetExpression7 (_expression7_);
        SetMult (_mult_);
        SetExpression8 (_expression8_);
    }

    public override Object Clone()
    {
        return new AMultiplyExpression7 (
            (PExpression7)CloneNode (_expression7_),
            (TMult)CloneNode (_mult_),
            (PExpression8)CloneNode (_expression8_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiplyExpression7(this);
    }

    public PExpression7 GetExpression7 ()
    {
        return _expression7_;
    }

    public void SetExpression7 (PExpression7 node)
    {
        if(_expression7_ != null)
        {
            _expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression7_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public PExpression8 GetExpression8 ()
    {
        return _expression8_;
    }

    public void SetExpression8 (PExpression8 node)
    {
        if(_expression8_ != null)
        {
            _expression8_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression8_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression7_)
            + ToString (_mult_)
            + ToString (_expression8_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression7_ == child )
        {
            _expression7_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _expression8_ == child )
        {
            _expression8_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression7_ == oldChild )
        {
            SetExpression7 ((PExpression7) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _expression8_ == oldChild )
        {
            SetExpression8 ((PExpression8) newChild);
            return;
        }
    }

}
public sealed class APassExpression7 : PExpression7
{
    private PExpression8 _expression8_;

    public APassExpression7 ()
    {
    }

    public APassExpression7 (
            PExpression8 _expression8_
    )
    {
        SetExpression8 (_expression8_);
    }

    public override Object Clone()
    {
        return new APassExpression7 (
            (PExpression8)CloneNode (_expression8_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression7(this);
    }

    public PExpression8 GetExpression8 ()
    {
        return _expression8_;
    }

    public void SetExpression8 (PExpression8 node)
    {
        if(_expression8_ != null)
        {
            _expression8_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression8_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression8_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression8_ == child )
        {
            _expression8_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression8_ == oldChild )
        {
            SetExpression8 ((PExpression8) newChild);
            return;
        }
    }

}
public sealed class ADivisionExpression8 : PExpression8
{
    private PExpression8 _expression8_;
    private TDivision _division_;
    private PExpression9 _expression9_;

    public ADivisionExpression8 ()
    {
    }

    public ADivisionExpression8 (
            PExpression8 _expression8_,
            TDivision _division_,
            PExpression9 _expression9_
    )
    {
        SetExpression8 (_expression8_);
        SetDivision (_division_);
        SetExpression9 (_expression9_);
    }

    public override Object Clone()
    {
        return new ADivisionExpression8 (
            (PExpression8)CloneNode (_expression8_),
            (TDivision)CloneNode (_division_),
            (PExpression9)CloneNode (_expression9_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivisionExpression8(this);
    }

    public PExpression8 GetExpression8 ()
    {
        return _expression8_;
    }

    public void SetExpression8 (PExpression8 node)
    {
        if(_expression8_ != null)
        {
            _expression8_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression8_ = node;
    }
    public TDivision GetDivision ()
    {
        return _division_;
    }

    public void SetDivision (TDivision node)
    {
        if(_division_ != null)
        {
            _division_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _division_ = node;
    }
    public PExpression9 GetExpression9 ()
    {
        return _expression9_;
    }

    public void SetExpression9 (PExpression9 node)
    {
        if(_expression9_ != null)
        {
            _expression9_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression9_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression8_)
            + ToString (_division_)
            + ToString (_expression9_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression8_ == child )
        {
            _expression8_ = null;
            return;
        }
        if ( _division_ == child )
        {
            _division_ = null;
            return;
        }
        if ( _expression9_ == child )
        {
            _expression9_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression8_ == oldChild )
        {
            SetExpression8 ((PExpression8) newChild);
            return;
        }
        if ( _division_ == oldChild )
        {
            SetDivision ((TDivision) newChild);
            return;
        }
        if ( _expression9_ == oldChild )
        {
            SetExpression9 ((PExpression9) newChild);
            return;
        }
    }

}
public sealed class APassExpression8 : PExpression8
{
    private PExpression9 _expression9_;

    public APassExpression8 ()
    {
    }

    public APassExpression8 (
            PExpression9 _expression9_
    )
    {
        SetExpression9 (_expression9_);
    }

    public override Object Clone()
    {
        return new APassExpression8 (
            (PExpression9)CloneNode (_expression9_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression8(this);
    }

    public PExpression9 GetExpression9 ()
    {
        return _expression9_;
    }

    public void SetExpression9 (PExpression9 node)
    {
        if(_expression9_ != null)
        {
            _expression9_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression9_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression9_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression9_ == child )
        {
            _expression9_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression9_ == oldChild )
        {
            SetExpression9 ((PExpression9) newChild);
            return;
        }
    }

}
public sealed class AExponentialExpression9 : PExpression9
{
    private PExpression9 _expression9_;
    private TExponent _exponent_;
    private PExpression10 _expression10_;

    public AExponentialExpression9 ()
    {
    }

    public AExponentialExpression9 (
            PExpression9 _expression9_,
            TExponent _exponent_,
            PExpression10 _expression10_
    )
    {
        SetExpression9 (_expression9_);
        SetExponent (_exponent_);
        SetExpression10 (_expression10_);
    }

    public override Object Clone()
    {
        return new AExponentialExpression9 (
            (PExpression9)CloneNode (_expression9_),
            (TExponent)CloneNode (_exponent_),
            (PExpression10)CloneNode (_expression10_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExponentialExpression9(this);
    }

    public PExpression9 GetExpression9 ()
    {
        return _expression9_;
    }

    public void SetExpression9 (PExpression9 node)
    {
        if(_expression9_ != null)
        {
            _expression9_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression9_ = node;
    }
    public TExponent GetExponent ()
    {
        return _exponent_;
    }

    public void SetExponent (TExponent node)
    {
        if(_exponent_ != null)
        {
            _exponent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exponent_ = node;
    }
    public PExpression10 GetExpression10 ()
    {
        return _expression10_;
    }

    public void SetExpression10 (PExpression10 node)
    {
        if(_expression10_ != null)
        {
            _expression10_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression10_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression9_)
            + ToString (_exponent_)
            + ToString (_expression10_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression9_ == child )
        {
            _expression9_ = null;
            return;
        }
        if ( _exponent_ == child )
        {
            _exponent_ = null;
            return;
        }
        if ( _expression10_ == child )
        {
            _expression10_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression9_ == oldChild )
        {
            SetExpression9 ((PExpression9) newChild);
            return;
        }
        if ( _exponent_ == oldChild )
        {
            SetExponent ((TExponent) newChild);
            return;
        }
        if ( _expression10_ == oldChild )
        {
            SetExpression10 ((PExpression10) newChild);
            return;
        }
    }

}
public sealed class APassExpression9 : PExpression9
{
    private PExpression10 _expression10_;

    public APassExpression9 ()
    {
    }

    public APassExpression9 (
            PExpression10 _expression10_
    )
    {
        SetExpression10 (_expression10_);
    }

    public override Object Clone()
    {
        return new APassExpression9 (
            (PExpression10)CloneNode (_expression10_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression9(this);
    }

    public PExpression10 GetExpression10 ()
    {
        return _expression10_;
    }

    public void SetExpression10 (PExpression10 node)
    {
        if(_expression10_ != null)
        {
            _expression10_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression10_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression10_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression10_ == child )
        {
            _expression10_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression10_ == oldChild )
        {
            SetExpression10 ((PExpression10) newChild);
            return;
        }
    }

}
public sealed class AParanthesisExpression10 : PExpression10
{
    private TOpenparanthesis _openparanthesis_;
    private PExpression _expression_;
    private TCloseparanthesis _closeparanthesis_;

    public AParanthesisExpression10 ()
    {
    }

    public AParanthesisExpression10 (
            TOpenparanthesis _openparanthesis_,
            PExpression _expression_,
            TCloseparanthesis _closeparanthesis_
    )
    {
        SetOpenparanthesis (_openparanthesis_);
        SetExpression (_expression_);
        SetCloseparanthesis (_closeparanthesis_);
    }

    public override Object Clone()
    {
        return new AParanthesisExpression10 (
            (TOpenparanthesis)CloneNode (_openparanthesis_),
            (PExpression)CloneNode (_expression_),
            (TCloseparanthesis)CloneNode (_closeparanthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParanthesisExpression10(this);
    }

    public TOpenparanthesis GetOpenparanthesis ()
    {
        return _openparanthesis_;
    }

    public void SetOpenparanthesis (TOpenparanthesis node)
    {
        if(_openparanthesis_ != null)
        {
            _openparanthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparanthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TCloseparanthesis GetCloseparanthesis ()
    {
        return _closeparanthesis_;
    }

    public void SetCloseparanthesis (TCloseparanthesis node)
    {
        if(_closeparanthesis_ != null)
        {
            _closeparanthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closeparanthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_openparanthesis_)
            + ToString (_expression_)
            + ToString (_closeparanthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _openparanthesis_ == child )
        {
            _openparanthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _closeparanthesis_ == child )
        {
            _closeparanthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _openparanthesis_ == oldChild )
        {
            SetOpenparanthesis ((TOpenparanthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _closeparanthesis_ == oldChild )
        {
            SetCloseparanthesis ((TCloseparanthesis) newChild);
            return;
        }
    }

}
public sealed class APassExpression10 : PExpression10
{
    private PExpression11 _expression11_;

    public APassExpression10 ()
    {
    }

    public APassExpression10 (
            PExpression11 _expression11_
    )
    {
        SetExpression11 (_expression11_);
    }

    public override Object Clone()
    {
        return new APassExpression10 (
            (PExpression11)CloneNode (_expression11_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression10(this);
    }

    public PExpression11 GetExpression11 ()
    {
        return _expression11_;
    }

    public void SetExpression11 (PExpression11 node)
    {
        if(_expression11_ != null)
        {
            _expression11_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression11_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression11_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression11_ == child )
        {
            _expression11_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression11_ == oldChild )
        {
            SetExpression11 ((PExpression11) newChild);
            return;
        }
    }

}
public sealed class ANegativeExpression11 : PExpression11
{
    private TMinus _minus_;
    private POperand _operand_;

    public ANegativeExpression11 ()
    {
    }

    public ANegativeExpression11 (
            TMinus _minus_,
            POperand _operand_
    )
    {
        SetMinus (_minus_);
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new ANegativeExpression11 (
            (TMinus)CloneNode (_minus_),
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegativeExpression11(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class APassExpression11 : PExpression11
{
    private POperand _operand_;

    public APassExpression11 ()
    {
    }

    public APassExpression11 (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new APassExpression11 (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression11(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AIntOperand : POperand
{
    private TInteger _integer_;

    public AIntOperand ()
    {
    }

    public AIntOperand (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntOperand (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntOperand(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AFloatOperand : POperand
{
    private TFloat _float_;

    public AFloatOperand ()
    {
    }

    public AFloatOperand (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatOperand (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatOperand(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class AVariableOperand : POperand
{
    private TId _id_;

    public AVariableOperand ()
    {
    }

    public AVariableOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
